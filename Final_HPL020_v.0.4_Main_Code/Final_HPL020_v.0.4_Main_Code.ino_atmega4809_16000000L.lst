
C:\Users\KISHOR~1.MAN\AppData\Local\Temp\arduino_build_861312/Final_HPL020_v.0.4_Main_Code.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000200 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
     200:	50 c0       	rjmp	.+160    	; 0x2a2 <__ctors_end>
     202:	00 00       	nop
../../../../crt1/gcrt1.S:67
     204:	76 c0       	rjmp	.+236    	; 0x2f2 <__bad_interrupt>
     206:	00 00       	nop
../../../../crt1/gcrt1.S:68
     208:	74 c0       	rjmp	.+232    	; 0x2f2 <__bad_interrupt>
     20a:	00 00       	nop
../../../../crt1/gcrt1.S:69
     20c:	72 c0       	rjmp	.+228    	; 0x2f2 <__bad_interrupt>
     20e:	00 00       	nop
../../../../crt1/gcrt1.S:70
     210:	70 c0       	rjmp	.+224    	; 0x2f2 <__bad_interrupt>
     212:	00 00       	nop
../../../../crt1/gcrt1.S:71
     214:	6e c0       	rjmp	.+220    	; 0x2f2 <__bad_interrupt>
     216:	00 00       	nop
../../../../crt1/gcrt1.S:72
     218:	6c c0       	rjmp	.+216    	; 0x2f2 <__bad_interrupt>
     21a:	00 00       	nop
../../../../crt1/gcrt1.S:73
     21c:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__vector_7>
../../../../crt1/gcrt1.S:74
     220:	68 c0       	rjmp	.+208    	; 0x2f2 <__bad_interrupt>
     222:	00 00       	nop
../../../../crt1/gcrt1.S:75
     224:	66 c0       	rjmp	.+204    	; 0x2f2 <__bad_interrupt>
     226:	00 00       	nop
../../../../crt1/gcrt1.S:76
     228:	64 c0       	rjmp	.+200    	; 0x2f2 <__bad_interrupt>
     22a:	00 00       	nop
../../../../crt1/gcrt1.S:77
     22c:	62 c0       	rjmp	.+196    	; 0x2f2 <__bad_interrupt>
     22e:	00 00       	nop
../../../../crt1/gcrt1.S:78
     230:	60 c0       	rjmp	.+192    	; 0x2f2 <__bad_interrupt>
     232:	00 00       	nop
../../../../crt1/gcrt1.S:79
     234:	5e c0       	rjmp	.+188    	; 0x2f2 <__bad_interrupt>
     236:	00 00       	nop
../../../../crt1/gcrt1.S:80
     238:	5c c0       	rjmp	.+184    	; 0x2f2 <__bad_interrupt>
     23a:	00 00       	nop
../../../../crt1/gcrt1.S:81
     23c:	5a c0       	rjmp	.+180    	; 0x2f2 <__bad_interrupt>
     23e:	00 00       	nop
../../../../crt1/gcrt1.S:82
     240:	58 c0       	rjmp	.+176    	; 0x2f2 <__bad_interrupt>
     242:	00 00       	nop
../../../../crt1/gcrt1.S:83
     244:	56 c0       	rjmp	.+172    	; 0x2f2 <__bad_interrupt>
     246:	00 00       	nop
../../../../crt1/gcrt1.S:84
     248:	54 c0       	rjmp	.+168    	; 0x2f2 <__bad_interrupt>
     24a:	00 00       	nop
../../../../crt1/gcrt1.S:85
     24c:	52 c0       	rjmp	.+164    	; 0x2f2 <__bad_interrupt>
     24e:	00 00       	nop
../../../../crt1/gcrt1.S:86
     250:	50 c0       	rjmp	.+160    	; 0x2f2 <__bad_interrupt>
     252:	00 00       	nop
../../../../crt1/gcrt1.S:87
     254:	4e c0       	rjmp	.+156    	; 0x2f2 <__bad_interrupt>
     256:	00 00       	nop
../../../../crt1/gcrt1.S:88
     258:	4c c0       	rjmp	.+152    	; 0x2f2 <__bad_interrupt>
     25a:	00 00       	nop
../../../../crt1/gcrt1.S:89
     25c:	4a c0       	rjmp	.+148    	; 0x2f2 <__bad_interrupt>
     25e:	00 00       	nop
../../../../crt1/gcrt1.S:90
     260:	48 c0       	rjmp	.+144    	; 0x2f2 <__bad_interrupt>
     262:	00 00       	nop
../../../../crt1/gcrt1.S:91
     264:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__vector_25>
../../../../crt1/gcrt1.S:92
     268:	44 c0       	rjmp	.+136    	; 0x2f2 <__bad_interrupt>
     26a:	00 00       	nop
../../../../crt1/gcrt1.S:93
     26c:	42 c0       	rjmp	.+132    	; 0x2f2 <__bad_interrupt>
     26e:	00 00       	nop
../../../../crt1/gcrt1.S:94
     270:	40 c0       	rjmp	.+128    	; 0x2f2 <__bad_interrupt>
     272:	00 00       	nop
../../../../crt1/gcrt1.S:95
     274:	3e c0       	rjmp	.+124    	; 0x2f2 <__bad_interrupt>
     276:	00 00       	nop
../../../../crt1/gcrt1.S:96
     278:	3c c0       	rjmp	.+120    	; 0x2f2 <__bad_interrupt>
     27a:	00 00       	nop
../../../../crt1/gcrt1.S:97
     27c:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__vector_31>
../../../../crt1/gcrt1.S:98
     280:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__vector_32>
../../../../crt1/gcrt1.S:99
     284:	36 c0       	rjmp	.+108    	; 0x2f2 <__bad_interrupt>
     286:	00 00       	nop
../../../../crt1/gcrt1.S:100
     288:	34 c0       	rjmp	.+104    	; 0x2f2 <__bad_interrupt>
     28a:	00 00       	nop
../../../../crt1/gcrt1.S:101
     28c:	32 c0       	rjmp	.+100    	; 0x2f2 <__bad_interrupt>
     28e:	00 00       	nop
../../../../crt1/gcrt1.S:102
     290:	30 c0       	rjmp	.+96     	; 0x2f2 <__bad_interrupt>
     292:	00 00       	nop
../../../../crt1/gcrt1.S:103
     294:	2e c0       	rjmp	.+92     	; 0x2f2 <__bad_interrupt>
     296:	00 00       	nop
../../../../crt1/gcrt1.S:104
     298:	2c c0       	rjmp	.+88     	; 0x2f2 <__bad_interrupt>
     29a:	00 00       	nop
../../../../crt1/gcrt1.S:105
     29c:	2a c0       	rjmp	.+84     	; 0x2f2 <__bad_interrupt>
	...

000002a0 <__ctors_start>:
__trampolines_start():
     2a0:	ce 26       	eor	r12, r30

000002a2 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     2a2:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     2a4:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     2a6:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     2a8:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     2aa:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     2ac:	de bf       	out	0x3e, r29	; 62

000002ae <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     2ae:	18 e2       	ldi	r17, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     2b0:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     2b2:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     2b4:	e9 ef       	ldi	r30, 0xF9	; 249
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     2b6:	f8 e7       	ldi	r31, 0x78	; 120
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     2ba:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     2bc:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     2be:	a2 32       	cpi	r26, 0x22	; 34
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     2c0:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     2c2:	d9 f7       	brne	.-10     	; 0x2ba <__do_copy_data+0xc>

000002c4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     2c4:	2c e2       	ldi	r18, 0x2C	; 44
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     2c6:	a2 e2       	ldi	r26, 0x22	; 34
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     2c8:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <.do_clear_bss_start>

000002cc <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2cc:	1d 92       	st	X+, r1

000002ce <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2ce:	ad 38       	cpi	r26, 0x8D	; 141
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2d0:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <.do_clear_bss_loop>

000002d4 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2d4:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2d6:	c1 e5       	ldi	r28, 0x51	; 81
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2d8:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2da:	04 c0       	rjmp	.+8      	; 0x2e4 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2dc:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2de:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2e0:	0e 94 ad 3b 	call	0x775a	; 0x775a <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     2e4:	c0 35       	cpi	r28, 0x50	; 80
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     2e6:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     2e8:	c9 f7       	brne	.-14     	; 0x2dc <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     2ea:	0e 94 de 2a 	call	0x55bc	; 0x55bc <main>
../../../../crt1/gcrt1.S:315
     2ee:	0c 94 d8 3b 	jmp	0x77b0	; 0x77b0 <_exit>

000002f2 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     2f2:	86 cf       	rjmp	.-244    	; 0x200 <__vectors>

000002f4 <AUTO_UPDATE()>:
AUTO_UPDATE():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:288
  DATA_PRINT.update();
}

void AUTO_UPDATE()
{
  Auto ? Auto = 0 : Auto = 1;
     2f4:	80 91 31 28 	lds	r24, 0x2831	; 0x802831 <Auto>
     2f8:	88 23       	and	r24, r24
     2fa:	b1 f0       	breq	.+44     	; 0x328 <AUTO_UPDATE()+0x34>
     2fc:	10 92 31 28 	sts	0x2831, r1	; 0x802831 <Auto>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:290
  //  Auto = ~Auto;
  lup++;
     300:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <lup>
     304:	90 91 4a 28 	lds	r25, 0x284A	; 0x80284a <lup+0x1>
     308:	a0 91 4b 28 	lds	r26, 0x284B	; 0x80284b <lup+0x2>
     30c:	b0 91 4c 28 	lds	r27, 0x284C	; 0x80284c <lup+0x3>
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	a1 1d       	adc	r26, r1
     314:	b1 1d       	adc	r27, r1
     316:	80 93 49 28 	sts	0x2849, r24	; 0x802849 <lup>
     31a:	90 93 4a 28 	sts	0x284A, r25	; 0x80284a <lup+0x1>
     31e:	a0 93 4b 28 	sts	0x284B, r26	; 0x80284b <lup+0x2>
     322:	b0 93 4c 28 	sts	0x284C, r27	; 0x80284c <lup+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:291
}
     326:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:288
  DATA_PRINT.update();
}

void AUTO_UPDATE()
{
  Auto ? Auto = 0 : Auto = 1;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 31 28 	sts	0x2831, r24	; 0x802831 <Auto>
     32e:	e8 cf       	rjmp	.-48     	; 0x300 <AUTO_UPDATE()+0xc>

00000330 <DATA_UPDATE()>:
DATA_UPDATE():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:279
  //           Serial2.print(TEMP_BUFF);
  //           Serial2.print("     ");
  //           Serial2.println(SET_MIN);
  //           Serial2.print("     ");

}
     330:	08 95       	ret

00000332 <Intial_time_for_ktype_read()>:
Intial_time_for_ktype_read():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:32

void Intial_time_for_ktype_read();
Ticker Intial_time_for_ktype_read_ticker(Intial_time_for_ktype_read, 5000, 1);
void Intial_time_for_ktype_read()
{
  Intial_time_for_ktype_read_FLAG=1;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	80 93 43 28 	sts	0x2843, r24	; 0x802843 <Intial_time_for_ktype_read_FLAG>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:33
}
     338:	08 95       	ret

0000033a <flahDisplayFunction()>:
flahDisplayFunction():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Proces.cpp:18
void flahDisplayFunction();
Ticker flahDisplay(flahDisplayFunction, 500, 0, MILLIS);

void flahDisplayFunction()
{
  blankDisplayFlag == 1 ? blankDisplayFlag=0 : blankDisplayFlag=1;  
     33a:	80 91 44 28 	lds	r24, 0x2844	; 0x802844 <blankDisplayFlag>
     33e:	88 23       	and	r24, r24
     340:	19 f0       	breq	.+6      	; 0x348 <flahDisplayFunction()+0xe>
     342:	10 92 44 28 	sts	0x2844, r1	; 0x802844 <blankDisplayFlag>
     346:	08 95       	ret
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	80 93 44 28 	sts	0x2844, r24	; 0x802844 <blankDisplayFlag>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Proces.cpp:19
}
     34e:	08 95       	ret

00000350 <readTemp()>:
readTemp():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Proces.cpp:32

void readTemp();
Ticker tempRiseCheck(readTemp, 30000, 0, MILLIS);

void readTemp()
{ 
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Proces.cpp:34
  // Serial3.println("tick"); //--------------change
  if(incArray < 6)
     358:	c0 91 89 28 	lds	r28, 0x2889	; 0x802889 <incArray>
     35c:	d0 91 8a 28 	lds	r29, 0x288A	; 0x80288a <incArray+0x1>
     360:	c6 30       	cpi	r28, 0x06	; 6
     362:	d1 05       	cpc	r29, r1
     364:	bc f4       	brge	.+46     	; 0x394 <readTemp()+0x44>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Proces.cpp:36
  {
    tempArray[incArray] = TEMP_DEG;
     366:	8e 01       	movw	r16, r28
     368:	00 0f       	add	r16, r16
     36a:	11 1f       	adc	r17, r17
     36c:	04 58       	subi	r16, 0x84	; 132
     36e:	17 4d       	sbci	r17, 0xD7	; 215
     370:	60 91 12 28 	lds	r22, 0x2812	; 0x802812 <TEMP_DEG>
     374:	70 91 13 28 	lds	r23, 0x2813	; 0x802813 <TEMP_DEG+0x1>
     378:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <TEMP_DEG+0x2>
     37c:	90 91 15 28 	lds	r25, 0x2815	; 0x802815 <TEMP_DEG+0x3>
     380:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
     384:	f8 01       	movw	r30, r16
     386:	60 83       	st	Z, r22
     388:	71 83       	std	Z+1, r23	; 0x01
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Proces.cpp:37
    incArray++;
     38a:	21 96       	adiw	r28, 0x01	; 1
     38c:	c0 93 89 28 	sts	0x2889, r28	; 0x802889 <incArray>
     390:	d0 93 8a 28 	sts	0x288A, r29	; 0x80288a <incArray+0x1>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Proces.cpp:39
  }
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <toggle_fun()>:
toggle_fun():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Proces.cpp:63
void toggle_fun();
Ticker toggle_ticker(toggle_fun, 1000, 0, MILLIS);  //Time_speed_show_toggle
void toggle_fun()
{  
 
   SSR_fail_toggle == 0 ? SSR_fail_toggle = 1 : SSR_fail_toggle = 0;
     39e:	80 91 6f 28 	lds	r24, 0x286F	; 0x80286f <SSR_fail_toggle>
     3a2:	81 11       	cpse	r24, r1
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <toggle_fun()+0x10>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <SSR_fail_toggle>
     3ac:	08 95       	ret
     3ae:	10 92 6f 28 	sts	0x286F, r1	; 0x80286f <SSR_fail_toggle>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Proces.cpp:65
  
}
     3b2:	08 95       	ret

000003b4 <Bclass::SET_CHANGE_UP() [clone .constprop.43]>:
SET_CHANGE_UP():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:199



void Bclass :: SET_CHANGE_UP()
{
  if(LONG_PRESS )
     3b4:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
     3b8:	88 23       	and	r24, r24
     3ba:	09 f4       	brne	.+2      	; 0x3be <Bclass::SET_CHANGE_UP() [clone .constprop.43]+0xa>
     3bc:	42 c1       	rjmp	.+644    	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:201
  {
        if( SELECTION_PARAMETER == Time_Mode ) //time       //  SET_LONG_VALUE[SELECTION_PARAMETER]  SET_LONG_VALUE[25]={0};       SPEED_SW[5]={1, 2, 4, 5, 10};   INC=0      MAX_SET_VALUE[6]={0, 99, 9, 99, 59, 1};
     3be:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <SELECTION_PARAMETER>
     3c2:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	91 f4       	brne	.+36     	; 0x3ee <Bclass::SET_CHANGE_UP() [clone .constprop.43]+0x3a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:203
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     3ca:	80 91 1d 29 	lds	r24, 0x291D	; 0x80291d <SET_LONG_VALUE>
     3ce:	90 91 1e 29 	lds	r25, 0x291E	; 0x80291e <SET_LONG_VALUE+0x1>
     3d2:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:204
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	91 05       	cpc	r25, r1
     3d8:	2c f4       	brge	.+10     	; 0x3e4 <Bclass::SET_CHANGE_UP() [clone .constprop.43]+0x30>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:203
{
  if(LONG_PRESS )
  {
        if( SELECTION_PARAMETER == Time_Mode ) //time       //  SET_LONG_VALUE[SELECTION_PARAMETER]  SET_LONG_VALUE[25]={0};       SPEED_SW[5]={1, 2, 4, 5, 10};   INC=0      MAX_SET_VALUE[6]={0, 99, 9, 99, 59, 1};
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     3da:	80 93 1d 29 	sts	0x291D, r24	; 0x80291d <SET_LONG_VALUE>
     3de:	90 93 1e 29 	sts	0x291E, r25	; 0x80291e <SET_LONG_VALUE+0x1>
     3e2:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:204
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
     3e4:	10 92 1d 29 	sts	0x291D, r1	; 0x80291d <SET_LONG_VALUE>
     3e8:	10 92 1e 29 	sts	0x291E, r1	; 0x80291e <SET_LONG_VALUE+0x1>
     3ec:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:207
        }
       
        else if( SELECTION_PARAMETER == Auto_Resume_Enable )  
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	91 05       	cpc	r25, r1
     3f2:	91 f4       	brne	.+36     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:209
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC];
     3f4:	80 91 1f 29 	lds	r24, 0x291F	; 0x80291f <SET_LONG_VALUE+0x2>
     3f8:	90 91 20 29 	lds	r25, 0x2920	; 0x802920 <SET_LONG_VALUE+0x3>
     3fc:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:210
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
     3fe:	82 30       	cpi	r24, 0x02	; 2
     400:	91 05       	cpc	r25, r1
     402:	2c f4       	brge	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:209
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
        }
       
        else if( SELECTION_PARAMETER == Auto_Resume_Enable )  
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC];
     404:	80 93 1f 29 	sts	0x291F, r24	; 0x80291f <SET_LONG_VALUE+0x2>
     408:	90 93 20 29 	sts	0x2920, r25	; 0x802920 <SET_LONG_VALUE+0x3>
     40c:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:210
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
     40e:	10 92 1f 29 	sts	0x291F, r1	; 0x80291f <SET_LONG_VALUE+0x2>
     412:	10 92 20 29 	sts	0x2920, r1	; 0x802920 <SET_LONG_VALUE+0x3>
     416:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:213
        }
        
        else if( SELECTION_PARAMETER == Safe_Value_ON_OFF )   //safe value   
     418:	82 30       	cpi	r24, 0x02	; 2
     41a:	91 05       	cpc	r25, r1
     41c:	91 f4       	brne	.+36     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:215
        {
          SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     41e:	80 91 21 29 	lds	r24, 0x2921	; 0x802921 <SET_LONG_VALUE+0x4>
     422:	90 91 22 29 	lds	r25, 0x2922	; 0x802922 <SET_LONG_VALUE+0x5>
     426:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:216
          if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;//99
     428:	82 30       	cpi	r24, 0x02	; 2
     42a:	91 05       	cpc	r25, r1
     42c:	2c f4       	brge	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:215
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
        }
        
        else if( SELECTION_PARAMETER == Safe_Value_ON_OFF )   //safe value   
        {
          SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     42e:	80 93 21 29 	sts	0x2921, r24	; 0x802921 <SET_LONG_VALUE+0x4>
     432:	90 93 22 29 	sts	0x2922, r25	; 0x802922 <SET_LONG_VALUE+0x5>
     436:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:216
          if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;//99
     438:	10 92 21 29 	sts	0x2921, r1	; 0x802921 <SET_LONG_VALUE+0x4>
     43c:	10 92 22 29 	sts	0x2922, r1	; 0x802922 <SET_LONG_VALUE+0x5>
     440:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:220

        }
        
        else if( SELECTION_PARAMETER == Calibration_Selection )   //calb
     442:	83 30       	cpi	r24, 0x03	; 3
     444:	91 05       	cpc	r25, r1
     446:	91 f4       	brne	.+36     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:222
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     448:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <SET_LONG_VALUE+0x6>
     44c:	90 91 24 29 	lds	r25, 0x2924	; 0x802924 <SET_LONG_VALUE+0x7>
     450:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:223
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	91 05       	cpc	r25, r1
     456:	2c f4       	brge	.+10     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:222

        }
        
        else if( SELECTION_PARAMETER == Calibration_Selection )   //calb
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     458:	80 93 23 29 	sts	0x2923, r24	; 0x802923 <SET_LONG_VALUE+0x6>
     45c:	90 93 24 29 	sts	0x2924, r25	; 0x802924 <SET_LONG_VALUE+0x7>
     460:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:223
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
     462:	10 92 23 29 	sts	0x2923, r1	; 0x802923 <SET_LONG_VALUE+0x6>
     466:	10 92 24 29 	sts	0x2924, r1	; 0x802924 <SET_LONG_VALUE+0x7>
     46a:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:226
        }
       
        else if( SELECTION_PARAMETER == OnePointCalibration )   //cal1-l
     46c:	84 30       	cpi	r24, 0x04	; 4
     46e:	91 05       	cpc	r25, r1
     470:	89 f4       	brne	.+34     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:228
        { 
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC];
     472:	80 91 25 29 	lds	r24, 0x2925	; 0x802925 <SET_LONG_VALUE+0x8>
     476:	90 91 26 29 	lds	r25, 0x2926	; 0x802926 <SET_LONG_VALUE+0x9>
     47a:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:229
           if(SET_LONG_VALUE[SELECTION_PARAMETER] >MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 320; 
     47c:	81 34       	cpi	r24, 0x41	; 65
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	92 07       	cpc	r25, r18
     482:	2c f4       	brge	.+10     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     484:	80 93 25 29 	sts	0x2925, r24	; 0x802925 <SET_LONG_VALUE+0x8>
     488:	90 93 26 29 	sts	0x2926, r25	; 0x802926 <SET_LONG_VALUE+0x9>
     48c:	08 95       	ret
     48e:	80 e4       	ldi	r24, 0x40	; 64
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	f8 cf       	rjmp	.-16     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:232
        } 
        
        else if( SELECTION_PARAMETER == Cal2LowTemp_Set_Display )   // cal2-l
     494:	86 30       	cpi	r24, 0x06	; 6
     496:	91 05       	cpc	r25, r1
     498:	81 f4       	brne	.+32     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:234
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC];
     49a:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
     49e:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
     4a2:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:235
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 150; //cal2 LOW 
     4a4:	87 39       	cpi	r24, 0x97	; 151
     4a6:	91 05       	cpc	r25, r1
     4a8:	2c f4       	brge	.+10     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4aa:	80 93 29 29 	sts	0x2929, r24	; 0x802929 <SET_LONG_VALUE+0xc>
     4ae:	90 93 2a 29 	sts	0x292A, r25	; 0x80292a <SET_LONG_VALUE+0xd>
     4b2:	08 95       	ret
     4b4:	86 e9       	ldi	r24, 0x96	; 150
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	f8 cf       	rjmp	.-16     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:238
        } 
       
        else if( SELECTION_PARAMETER == Cal2HighTemp_Set_Display )   //cal2-H
     4ba:	87 30       	cpi	r24, 0x07	; 7
     4bc:	91 05       	cpc	r25, r1
     4be:	89 f4       	brne	.+34     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:240
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     4c0:	80 91 2b 29 	lds	r24, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
     4c4:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
     4c8:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:241
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 300;  //cal2 HIGH
     4ca:	8d 32       	cpi	r24, 0x2D	; 45
     4cc:	21 e0       	ldi	r18, 0x01	; 1
     4ce:	92 07       	cpc	r25, r18
     4d0:	2c f4       	brge	.+10     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4d2:	80 93 2b 29 	sts	0x292B, r24	; 0x80292b <SET_LONG_VALUE+0xe>
     4d6:	90 93 2c 29 	sts	0x292C, r25	; 0x80292c <SET_LONG_VALUE+0xf>
     4da:	08 95       	ret
     4dc:	8c e2       	ldi	r24, 0x2C	; 44
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	f8 cf       	rjmp	.-16     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:244
        }       
      
        else if( SELECTION_PARAMETER == Cal2LowTemp_Enter_Heat )   //inprocess entering values
     4e2:	88 30       	cpi	r24, 0x08	; 8
     4e4:	91 05       	cpc	r25, r1
     4e6:	81 f4       	brne	.+32     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:246
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC];
     4e8:	80 91 2d 29 	lds	r24, 0x292D	; 0x80292d <SET_LONG_VALUE+0x10>
     4ec:	90 91 2e 29 	lds	r25, 0x292E	; 0x80292e <SET_LONG_VALUE+0x11>
     4f0:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:247
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] =150; 
     4f2:	87 39       	cpi	r24, 0x97	; 151
     4f4:	91 05       	cpc	r25, r1
     4f6:	2c f4       	brge	.+10     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4f8:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <SET_LONG_VALUE+0x10>
     4fc:	90 93 2e 29 	sts	0x292E, r25	; 0x80292e <SET_LONG_VALUE+0x11>
     500:	08 95       	ret
     502:	86 e9       	ldi	r24, 0x96	; 150
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	f8 cf       	rjmp	.-16     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:250
        }
       
        else if( SELECTION_PARAMETER == Cal2LowTemp_Enter_Maintain )   //inprocess entering values
     508:	89 30       	cpi	r24, 0x09	; 9
     50a:	91 05       	cpc	r25, r1
     50c:	81 f4       	brne	.+32     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:252
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     50e:	80 91 2f 29 	lds	r24, 0x292F	; 0x80292f <SET_LONG_VALUE+0x12>
     512:	90 91 30 29 	lds	r25, 0x2930	; 0x802930 <SET_LONG_VALUE+0x13>
     516:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:253
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] =9; 
     518:	8a 30       	cpi	r24, 0x0A	; 10
     51a:	91 05       	cpc	r25, r1
     51c:	2c f4       	brge	.+10     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     51e:	80 93 2f 29 	sts	0x292F, r24	; 0x80292f <SET_LONG_VALUE+0x12>
     522:	90 93 30 29 	sts	0x2930, r25	; 0x802930 <SET_LONG_VALUE+0x13>
     526:	08 95       	ret
     528:	89 e0       	ldi	r24, 0x09	; 9
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	f8 cf       	rjmp	.-16     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:256
        }
     
        else if( SELECTION_PARAMETER ==  Cal2HighTemp_Enter_Heat )   //inprocess entering values
     52e:	8a 30       	cpi	r24, 0x0A	; 10
     530:	91 05       	cpc	r25, r1
     532:	89 f4       	brne	.+34     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:258
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     534:	80 91 31 29 	lds	r24, 0x2931	; 0x802931 <SET_LONG_VALUE+0x14>
     538:	90 91 32 29 	lds	r25, 0x2932	; 0x802932 <SET_LONG_VALUE+0x15>
     53c:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:259
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] =310; 
     53e:	87 33       	cpi	r24, 0x37	; 55
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	92 07       	cpc	r25, r18
     544:	2c f4       	brge	.+10     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     546:	80 93 31 29 	sts	0x2931, r24	; 0x802931 <SET_LONG_VALUE+0x14>
     54a:	90 93 32 29 	sts	0x2932, r25	; 0x802932 <SET_LONG_VALUE+0x15>
     54e:	08 95       	ret
     550:	86 e3       	ldi	r24, 0x36	; 54
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	f8 cf       	rjmp	.-16     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:262
        }
        
        else if( SELECTION_PARAMETER == Cal2HighTemp_Enter_Maintain )   //inprocess entering values
     556:	8b 30       	cpi	r24, 0x0B	; 11
     558:	91 05       	cpc	r25, r1
     55a:	81 f4       	brne	.+32     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:264
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     55c:	80 91 33 29 	lds	r24, 0x2933	; 0x802933 <SET_LONG_VALUE+0x16>
     560:	90 91 34 29 	lds	r25, 0x2934	; 0x802934 <SET_LONG_VALUE+0x17>
     564:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:265
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 9; 
     566:	8a 30       	cpi	r24, 0x0A	; 10
     568:	91 05       	cpc	r25, r1
     56a:	2c f4       	brge	.+10     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     56c:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <SET_LONG_VALUE+0x16>
     570:	90 93 34 29 	sts	0x2934, r25	; 0x802934 <SET_LONG_VALUE+0x17>
     574:	08 95       	ret
     576:	89 e0       	ldi	r24, 0x09	; 9
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	f8 cf       	rjmp	.-16     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:268
        } 
       
        else if( SELECTION_PARAMETER == SafeValue )   //safe value set
     57c:	81 31       	cpi	r24, 0x11	; 17
     57e:	91 05       	cpc	r25, r1
     580:	89 f4       	brne	.+34     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:270
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     582:	80 91 3f 29 	lds	r24, 0x293F	; 0x80293f <SET_LONG_VALUE+0x22>
     586:	90 91 40 29 	lds	r25, 0x2940	; 0x802940 <SET_LONG_VALUE+0x23>
     58a:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:271
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 300; 
     58c:	8d 32       	cpi	r24, 0x2D	; 45
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	92 07       	cpc	r25, r18
     592:	2c f4       	brge	.+10     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
     594:	80 93 3f 29 	sts	0x293F, r24	; 0x80293f <SET_LONG_VALUE+0x22>
     598:	90 93 40 29 	sts	0x2940, r25	; 0x802940 <SET_LONG_VALUE+0x23>
     59c:	08 95       	ret
     59e:	8c e2       	ldi	r24, 0x2C	; 44
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	f8 cf       	rjmp	.-16     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:274
        }
       
        else if( SELECTION_PARAMETER == blank1 )   //vent open time
     5a4:	80 31       	cpi	r24, 0x10	; 16
     5a6:	91 05       	cpc	r25, r1
     5a8:	81 f4       	brne	.+32     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:276
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     5aa:	80 91 3d 29 	lds	r24, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
     5ae:	90 91 3e 29 	lds	r25, 0x293E	; 0x80293e <SET_LONG_VALUE+0x21>
     5b2:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:277
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 50; 
     5b4:	83 33       	cpi	r24, 0x33	; 51
     5b6:	91 05       	cpc	r25, r1
     5b8:	2c f4       	brge	.+10     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     5ba:	80 93 3d 29 	sts	0x293D, r24	; 0x80293d <SET_LONG_VALUE+0x20>
     5be:	90 93 3e 29 	sts	0x293E, r25	; 0x80293e <SET_LONG_VALUE+0x21>
     5c2:	08 95       	ret
     5c4:	82 e3       	ldi	r24, 0x32	; 50
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	f8 cf       	rjmp	.-16     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:280
        }

        else if( SELECTION_PARAMETER == Energy_Mode_Selection )   //sure rest 16
     5ca:	8d 30       	cpi	r24, 0x0D	; 13
     5cc:	91 05       	cpc	r25, r1
     5ce:	91 f4       	brne	.+36     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:282
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     5d0:	80 91 37 29 	lds	r24, 0x2937	; 0x802937 <SET_LONG_VALUE+0x1a>
     5d4:	90 91 38 29 	lds	r25, 0x2938	; 0x802938 <SET_LONG_VALUE+0x1b>
     5d8:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:283
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	91 05       	cpc	r25, r1
     5de:	2c f4       	brge	.+10     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:282
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 50; 
        }

        else if( SELECTION_PARAMETER == Energy_Mode_Selection )   //sure rest 16
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     5e0:	80 93 37 29 	sts	0x2937, r24	; 0x802937 <SET_LONG_VALUE+0x1a>
     5e4:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <SET_LONG_VALUE+0x1b>
     5e8:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:283
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 0; 
     5ea:	10 92 37 29 	sts	0x2937, r1	; 0x802937 <SET_LONG_VALUE+0x1a>
     5ee:	10 92 38 29 	sts	0x2938, r1	; 0x802938 <SET_LONG_VALUE+0x1b>
     5f2:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:287
        }

   
        else if( SELECTION_PARAMETER == FactoryAndSure_Reset )   //sure rest 16
     5f4:	8e 30       	cpi	r24, 0x0E	; 14
     5f6:	91 05       	cpc	r25, r1
     5f8:	81 f4       	brne	.+32     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:289
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     5fa:	80 91 39 29 	lds	r24, 0x2939	; 0x802939 <SET_LONG_VALUE+0x1c>
     5fe:	90 91 3a 29 	lds	r25, 0x293A	; 0x80293a <SET_LONG_VALUE+0x1d>
     602:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:290
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 99; 
     604:	82 30       	cpi	r24, 0x02	; 2
     606:	91 05       	cpc	r25, r1
     608:	2c f4       	brge	.+10     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     60a:	80 93 39 29 	sts	0x2939, r24	; 0x802939 <SET_LONG_VALUE+0x1c>
     60e:	90 93 3a 29 	sts	0x293A, r25	; 0x80293a <SET_LONG_VALUE+0x1d>
     612:	08 95       	ret
     614:	83 e6       	ldi	r24, 0x63	; 99
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	f8 cf       	rjmp	.-16     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:293
        }
     
        else if( SELECTION_PARAMETER == ResetDone )   // rest (---- ----) 17
     61a:	0f 97       	sbiw	r24, 0x0f	; 15
     61c:	09 f0       	breq	.+2      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     61e:	8d c0       	rjmp	.+282    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:295
        {
           SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC]; 
     620:	80 91 3b 29 	lds	r24, 0x293B	; 0x80293b <SET_LONG_VALUE+0x1e>
     624:	90 91 3c 29 	lds	r25, 0x293C	; 0x80293c <SET_LONG_VALUE+0x1f>
     628:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:296
           if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER]) SET_LONG_VALUE[SELECTION_PARAMETER] = 1; 
     62a:	88 3e       	cpi	r24, 0xE8	; 232
     62c:	23 e0       	ldi	r18, 0x03	; 3
     62e:	92 07       	cpc	r25, r18
     630:	2c f4       	brge	.+10     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     632:	80 93 3b 29 	sts	0x293B, r24	; 0x80293b <SET_LONG_VALUE+0x1e>
     636:	90 93 3c 29 	sts	0x293C, r25	; 0x80293c <SET_LONG_VALUE+0x1f>
     63a:	08 95       	ret
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	f8 cf       	rjmp	.-16     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:302
        }
 
  }   
  else       //set limit values for single mode click and set temp hour and minute limit values
  {
              if( ENTER_BUT == 1 )   //SPEED_SW[5]={1, 2, 4, 5, 10};  SET_LONG_VALUE[25]={0}; MAX_SET_VALUE[6]={0, 99, 9, 99, 59, 1};
     642:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	c9 f5       	brne	.+114    	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:304
              {       
                  if(!Energy_Mode)
     64a:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
     64e:	81 11       	cpse	r24, r1
     650:	23 c0       	rjmp	.+70     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:307
                  {  
                     
                     SET_VALUE[ENTER_BUT] += SPEED_SW[INC];
     652:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <SET_VALUE+0x2>
     656:	90 91 11 29 	lds	r25, 0x2911	; 0x802911 <SET_VALUE+0x3>
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	80 93 10 29 	sts	0x2910, r24	; 0x802910 <SET_VALUE+0x2>
     660:	90 93 11 29 	sts	0x2911, r25	; 0x802911 <SET_VALUE+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:309
                  
                     if(SAFE_VALUE_SET_DEG == 1)
     664:	20 91 0d 29 	lds	r18, 0x290D	; 0x80290d <SAFE_VALUE_SET_DEG>
     668:	22 23       	and	r18, r18
     66a:	69 f0       	breq	.+26     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:311
                       {
                         if(SET_VALUE[ENTER_BUT] > SAFE_VALUE_SET) SET_VALUE[ENTER_BUT] = SAFE_VALUE_SET;   //FOR 1ST TWO DIGIT ON TEMP SET 00XC  
     66c:	20 91 0b 29 	lds	r18, 0x290B	; 0x80290b <SAFE_VALUE_SET>
     670:	30 91 0c 29 	lds	r19, 0x290C	; 0x80290c <SAFE_VALUE_SET+0x1>
     674:	28 17       	cp	r18, r24
     676:	39 07       	cpc	r19, r25
     678:	0c f0       	brlt	.+2      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     67a:	5f c0       	rjmp	.+190    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
     67c:	20 93 10 29 	sts	0x2910, r18	; 0x802910 <SET_VALUE+0x2>
     680:	30 93 11 29 	sts	0x2911, r19	; 0x802911 <SET_VALUE+0x3>
     684:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:313
                       }
                    else if(SET_VALUE[ENTER_BUT] > 300) SET_VALUE[ENTER_BUT] = 0; 
     686:	8d 32       	cpi	r24, 0x2D	; 45
     688:	91 40       	sbci	r25, 0x01	; 1
     68a:	0c f4       	brge	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     68c:	56 c0       	rjmp	.+172    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
     68e:	10 92 10 29 	sts	0x2910, r1	; 0x802910 <SET_VALUE+0x2>
     692:	10 92 11 29 	sts	0x2911, r1	; 0x802911 <SET_VALUE+0x3>
     696:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:317
                  }
                  else
                  {
                    SET_VALUE[6] += SPEED_SW[INC];
     698:	80 91 1a 29 	lds	r24, 0x291A	; 0x80291a <SET_VALUE+0xc>
     69c:	90 91 1b 29 	lds	r25, 0x291B	; 0x80291b <SET_VALUE+0xd>
     6a0:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:318
                    if(SET_VALUE[6] > 10) SET_VALUE[6] = 0;
     6a2:	8b 30       	cpi	r24, 0x0B	; 11
     6a4:	91 05       	cpc	r25, r1
     6a6:	2c f4       	brge	.+10     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:317
                       }
                    else if(SET_VALUE[ENTER_BUT] > 300) SET_VALUE[ENTER_BUT] = 0; 
                  }
                  else
                  {
                    SET_VALUE[6] += SPEED_SW[INC];
     6a8:	80 93 1a 29 	sts	0x291A, r24	; 0x80291a <SET_VALUE+0xc>
     6ac:	90 93 1b 29 	sts	0x291B, r25	; 0x80291b <SET_VALUE+0xd>
     6b0:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:318
                    if(SET_VALUE[6] > 10) SET_VALUE[6] = 0;
     6b2:	10 92 1a 29 	sts	0x291A, r1	; 0x80291a <SET_VALUE+0xc>
     6b6:	10 92 1b 29 	sts	0x291B, r1	; 0x80291b <SET_VALUE+0xd>
     6ba:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:322
                  }
                
               }
               else if( ENTER_BUT == 3 )   //set limit for hour 
     6bc:	83 30       	cpi	r24, 0x03	; 3
     6be:	91 f4       	brne	.+36     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:324
               {
                SET_VALUE[ENTER_BUT] +=SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > MAX_SET_VALUE[ENTER_BUT]) SET_VALUE[ENTER_BUT] = 0;   // FOR 1st TWO DIGIT ON TIME SET 00XX
     6c0:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <SET_VALUE+0x6>
     6c4:	90 91 15 29 	lds	r25, 0x2915	; 0x802915 <SET_VALUE+0x7>
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	84 36       	cpi	r24, 0x64	; 100
     6cc:	91 05       	cpc	r25, r1
     6ce:	2c f4       	brge	.+10     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
     6d0:	80 93 14 29 	sts	0x2914, r24	; 0x802914 <SET_VALUE+0x6>
     6d4:	90 93 15 29 	sts	0x2915, r25	; 0x802915 <SET_VALUE+0x7>
     6d8:	08 95       	ret
     6da:	10 92 14 29 	sts	0x2914, r1	; 0x802914 <SET_VALUE+0x6>
     6de:	10 92 15 29 	sts	0x2915, r1	; 0x802915 <SET_VALUE+0x7>
     6e2:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:326
               }
               else if( ENTER_BUT == 4 )    //set limit for minute
     6e4:	84 30       	cpi	r24, 0x04	; 4
     6e6:	91 f4       	brne	.+36     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:328
               {
                SET_VALUE[ENTER_BUT] +=SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > MAX_SET_VALUE[ENTER_BUT]) SET_VALUE[ENTER_BUT] = 0;   //FOR LAST TWO DIGIT ON TIME SET XX00
     6e8:	80 91 16 29 	lds	r24, 0x2916	; 0x802916 <SET_VALUE+0x8>
     6ec:	90 91 17 29 	lds	r25, 0x2917	; 0x802917 <SET_VALUE+0x9>
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	8c 33       	cpi	r24, 0x3C	; 60
     6f4:	91 05       	cpc	r25, r1
     6f6:	2c f4       	brge	.+10     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
     6f8:	80 93 16 29 	sts	0x2916, r24	; 0x802916 <SET_VALUE+0x8>
     6fc:	90 93 17 29 	sts	0x2917, r25	; 0x802917 <SET_VALUE+0x9>
     700:	08 95       	ret
     702:	10 92 16 29 	sts	0x2916, r1	; 0x802916 <SET_VALUE+0x8>
     706:	10 92 17 29 	sts	0x2917, r1	; 0x802917 <SET_VALUE+0x9>
     70a:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:330
               }  
               else if( ENTER_BUT == 5 && VENT_FLAG )   //set vent open or close
     70c:	85 30       	cpi	r24, 0x05	; 5
     70e:	a9 f4       	brne	.+42     	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
     710:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <VENT_FLAG>
     714:	88 23       	and	r24, r24
     716:	89 f0       	breq	.+34     	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:332
               {
                SET_VALUE[ENTER_BUT] +=SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > MAX_SET_VALUE[ENTER_BUT]) SET_VALUE[ENTER_BUT] = 0; 
     718:	80 91 18 29 	lds	r24, 0x2918	; 0x802918 <SET_VALUE+0xa>
     71c:	90 91 19 29 	lds	r25, 0x2919	; 0x802919 <SET_VALUE+0xb>
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	82 30       	cpi	r24, 0x02	; 2
     724:	91 05       	cpc	r25, r1
     726:	2c f4       	brge	.+10     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
     728:	80 93 18 29 	sts	0x2918, r24	; 0x802918 <SET_VALUE+0xa>
     72c:	90 93 19 29 	sts	0x2919, r25	; 0x802919 <SET_VALUE+0xb>
     730:	08 95       	ret
     732:	10 92 18 29 	sts	0x2918, r1	; 0x802918 <SET_VALUE+0xa>
     736:	10 92 19 29 	sts	0x2919, r1	; 0x802919 <SET_VALUE+0xb>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:336
               }
  
  }
}
     73a:	08 95       	ret

0000073c <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]>:
SET_CHANGE_DOWN():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:340

void Bclass :: SET_CHANGE_DOWN()
{
  if(LONG_PRESS )
     73c:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
     740:	88 23       	and	r24, r24
     742:	09 f4       	brne	.+2      	; 0x746 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0xa>
     744:	35 c1       	rjmp	.+618    	; 0x9b0 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x274>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:342
  {
        if( SELECTION_PARAMETER == Time_Mode  )    //settings time
     746:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <SELECTION_PARAMETER>
     74a:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
     74e:	00 97       	sbiw	r24, 0x00	; 0
     750:	79 f4       	brne	.+30     	; 0x770 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x34>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:344
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     752:	80 91 1d 29 	lds	r24, 0x291D	; 0x80291d <SET_LONG_VALUE>
     756:	90 91 1e 29 	lds	r25, 0x291E	; 0x80291e <SET_LONG_VALUE+0x1>
     75a:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:345
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 1;
     75c:	97 fd       	sbrc	r25, 7
     75e:	05 c0       	rjmp	.+10     	; 0x76a <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x2e>
     760:	80 93 1d 29 	sts	0x291D, r24	; 0x80291d <SET_LONG_VALUE>
     764:	90 93 1e 29 	sts	0x291E, r25	; 0x80291e <SET_LONG_VALUE+0x1>
     768:	08 95       	ret
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	f8 cf       	rjmp	.-16     	; 0x760 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x24>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:348
        }
        
        else if( SELECTION_PARAMETER == Auto_Resume_Enable )   //settinge print(unit)
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	91 05       	cpc	r25, r1
     774:	69 f4       	brne	.+26     	; 0x790 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x54>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:350
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     776:	20 91 1f 29 	lds	r18, 0x291F	; 0x80291f <SET_LONG_VALUE+0x2>
     77a:	30 91 20 29 	lds	r19, 0x2920	; 0x802920 <SET_LONG_VALUE+0x3>
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	31 09       	sbc	r19, r1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:351
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 1;
     782:	37 ff       	sbrs	r19, 7
     784:	80 c1       	rjmp	.+768    	; 0xa86 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x34a>
     786:	80 93 1f 29 	sts	0x291F, r24	; 0x80291f <SET_LONG_VALUE+0x2>
     78a:	90 93 20 29 	sts	0x2920, r25	; 0x802920 <SET_LONG_VALUE+0x3>
     78e:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:354
        }
        
        else if( SELECTION_PARAMETER == Safe_Value_ON_OFF )   // safe value on off
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	91 05       	cpc	r25, r1
     794:	79 f4       	brne	.+30     	; 0x7b4 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x78>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:356
        {
          SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC];
     796:	80 91 21 29 	lds	r24, 0x2921	; 0x802921 <SET_LONG_VALUE+0x4>
     79a:	90 91 22 29 	lds	r25, 0x2922	; 0x802922 <SET_LONG_VALUE+0x5>
     79e:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:357
          if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 1;  
     7a0:	97 fd       	sbrc	r25, 7
     7a2:	05 c0       	rjmp	.+10     	; 0x7ae <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x72>
     7a4:	80 93 21 29 	sts	0x2921, r24	; 0x802921 <SET_LONG_VALUE+0x4>
     7a8:	90 93 22 29 	sts	0x2922, r25	; 0x802922 <SET_LONG_VALUE+0x5>
     7ac:	08 95       	ret
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	f8 cf       	rjmp	.-16     	; 0x7a4 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x68>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:360
         }
       
        else if( SELECTION_PARAMETER == Calibration_Selection )   // calb
     7b4:	83 30       	cpi	r24, 0x03	; 3
     7b6:	91 05       	cpc	r25, r1
     7b8:	79 f4       	brne	.+30     	; 0x7d8 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x9c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:362
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     7ba:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <SET_LONG_VALUE+0x6>
     7be:	90 91 24 29 	lds	r25, 0x2924	; 0x802924 <SET_LONG_VALUE+0x7>
     7c2:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:363
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 1;
     7c4:	97 fd       	sbrc	r25, 7
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x96>
     7c8:	80 93 23 29 	sts	0x2923, r24	; 0x802923 <SET_LONG_VALUE+0x6>
     7cc:	90 93 24 29 	sts	0x2924, r25	; 0x802924 <SET_LONG_VALUE+0x7>
     7d0:	08 95       	ret
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	f8 cf       	rjmp	.-16     	; 0x7c8 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x8c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:366
        }
       
        else if( SELECTION_PARAMETER == OnePointCalibration )   //cal1
     7d8:	84 30       	cpi	r24, 0x04	; 4
     7da:	91 05       	cpc	r25, r1
     7dc:	89 f4       	brne	.+34     	; 0x800 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0xc4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:368
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     7de:	80 91 25 29 	lds	r24, 0x2925	; 0x802925 <SET_LONG_VALUE+0x8>
     7e2:	90 91 26 29 	lds	r25, 0x2926	; 0x802926 <SET_LONG_VALUE+0x9>
     7e6:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:369
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     7e8:	97 fd       	sbrc	r25, 7
     7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0xba>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:368
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 1;
        }
       
        else if( SELECTION_PARAMETER == OnePointCalibration )   //cal1
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     7ec:	80 93 25 29 	sts	0x2925, r24	; 0x802925 <SET_LONG_VALUE+0x8>
     7f0:	90 93 26 29 	sts	0x2926, r25	; 0x802926 <SET_LONG_VALUE+0x9>
     7f4:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:369
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     7f6:	10 92 25 29 	sts	0x2925, r1	; 0x802925 <SET_LONG_VALUE+0x8>
     7fa:	10 92 26 29 	sts	0x2926, r1	; 0x802926 <SET_LONG_VALUE+0x9>
     7fe:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:372
        }
        
        else if( SELECTION_PARAMETER == Cal2LowTemp_Set_Display )   
     800:	86 30       	cpi	r24, 0x06	; 6
     802:	91 05       	cpc	r25, r1
     804:	81 f4       	brne	.+32     	; 0x826 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0xea>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:374
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     806:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
     80a:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
     80e:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:375
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 70) SET_LONG_VALUE[SELECTION_PARAMETER] = 70;
     810:	86 34       	cpi	r24, 0x46	; 70
     812:	91 05       	cpc	r25, r1
     814:	2c f0       	brlt	.+10     	; 0x820 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0xe4>
     816:	80 93 29 29 	sts	0x2929, r24	; 0x802929 <SET_LONG_VALUE+0xc>
     81a:	90 93 2a 29 	sts	0x292A, r25	; 0x80292a <SET_LONG_VALUE+0xd>
     81e:	08 95       	ret
     820:	86 e4       	ldi	r24, 0x46	; 70
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	f8 cf       	rjmp	.-16     	; 0x816 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0xda>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:378
        }
     
        else if( SELECTION_PARAMETER == Cal2HighTemp_Set_Display )   
     826:	87 30       	cpi	r24, 0x07	; 7
     828:	91 05       	cpc	r25, r1
     82a:	81 f4       	brne	.+32     	; 0x84c <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x110>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:380
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC];
     82c:	80 91 2b 29 	lds	r24, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
     830:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
     834:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:381
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 230) SET_LONG_VALUE[SELECTION_PARAMETER] = 230;
     836:	86 3e       	cpi	r24, 0xE6	; 230
     838:	91 05       	cpc	r25, r1
     83a:	2c f0       	brlt	.+10     	; 0x846 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x10a>
     83c:	80 93 2b 29 	sts	0x292B, r24	; 0x80292b <SET_LONG_VALUE+0xe>
     840:	90 93 2c 29 	sts	0x292C, r25	; 0x80292c <SET_LONG_VALUE+0xf>
     844:	08 95       	ret
     846:	86 ee       	ldi	r24, 0xE6	; 230
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	f8 cf       	rjmp	.-16     	; 0x83c <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x100>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:384
        }
       
        else if( SELECTION_PARAMETER == Cal2LowTemp_Enter_Heat )   
     84c:	88 30       	cpi	r24, 0x08	; 8
     84e:	91 05       	cpc	r25, r1
     850:	89 f4       	brne	.+34     	; 0x874 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x138>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:386
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     852:	80 91 2d 29 	lds	r24, 0x292D	; 0x80292d <SET_LONG_VALUE+0x10>
     856:	90 91 2e 29 	lds	r25, 0x292E	; 0x80292e <SET_LONG_VALUE+0x11>
     85a:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:387
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     85c:	97 fd       	sbrc	r25, 7
     85e:	05 c0       	rjmp	.+10     	; 0x86a <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x12e>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:386
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 230) SET_LONG_VALUE[SELECTION_PARAMETER] = 230;
        }
       
        else if( SELECTION_PARAMETER == Cal2LowTemp_Enter_Heat )   
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     860:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <SET_LONG_VALUE+0x10>
     864:	90 93 2e 29 	sts	0x292E, r25	; 0x80292e <SET_LONG_VALUE+0x11>
     868:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:387
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     86a:	10 92 2d 29 	sts	0x292D, r1	; 0x80292d <SET_LONG_VALUE+0x10>
     86e:	10 92 2e 29 	sts	0x292E, r1	; 0x80292e <SET_LONG_VALUE+0x11>
     872:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:390
        }
        
        else if( SELECTION_PARAMETER == Cal2LowTemp_Enter_Maintain )   
     874:	89 30       	cpi	r24, 0x09	; 9
     876:	91 05       	cpc	r25, r1
     878:	89 f4       	brne	.+34     	; 0x89c <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x160>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:392
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     87a:	80 91 2f 29 	lds	r24, 0x292F	; 0x80292f <SET_LONG_VALUE+0x12>
     87e:	90 91 30 29 	lds	r25, 0x2930	; 0x802930 <SET_LONG_VALUE+0x13>
     882:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:393
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     884:	97 fd       	sbrc	r25, 7
     886:	05 c0       	rjmp	.+10     	; 0x892 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x156>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:392
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
        }
        
        else if( SELECTION_PARAMETER == Cal2LowTemp_Enter_Maintain )   
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     888:	80 93 2f 29 	sts	0x292F, r24	; 0x80292f <SET_LONG_VALUE+0x12>
     88c:	90 93 30 29 	sts	0x2930, r25	; 0x802930 <SET_LONG_VALUE+0x13>
     890:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:393
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     892:	10 92 2f 29 	sts	0x292F, r1	; 0x80292f <SET_LONG_VALUE+0x12>
     896:	10 92 30 29 	sts	0x2930, r1	; 0x802930 <SET_LONG_VALUE+0x13>
     89a:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:396
        }
        
        else if( SELECTION_PARAMETER == Cal2HighTemp_Enter_Heat )   
     89c:	8a 30       	cpi	r24, 0x0A	; 10
     89e:	91 05       	cpc	r25, r1
     8a0:	89 f4       	brne	.+34     	; 0x8c4 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x188>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:398
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     8a2:	80 91 31 29 	lds	r24, 0x2931	; 0x802931 <SET_LONG_VALUE+0x14>
     8a6:	90 91 32 29 	lds	r25, 0x2932	; 0x802932 <SET_LONG_VALUE+0x15>
     8aa:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:399
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     8ac:	97 fd       	sbrc	r25, 7
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x17e>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:398
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
        }
        
        else if( SELECTION_PARAMETER == Cal2HighTemp_Enter_Heat )   
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     8b0:	80 93 31 29 	sts	0x2931, r24	; 0x802931 <SET_LONG_VALUE+0x14>
     8b4:	90 93 32 29 	sts	0x2932, r25	; 0x802932 <SET_LONG_VALUE+0x15>
     8b8:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:399
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     8ba:	10 92 31 29 	sts	0x2931, r1	; 0x802931 <SET_LONG_VALUE+0x14>
     8be:	10 92 32 29 	sts	0x2932, r1	; 0x802932 <SET_LONG_VALUE+0x15>
     8c2:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:402
        }
        
        else if( SELECTION_PARAMETER == Cal2HighTemp_Enter_Maintain )   
     8c4:	8b 30       	cpi	r24, 0x0B	; 11
     8c6:	91 05       	cpc	r25, r1
     8c8:	89 f4       	brne	.+34     	; 0x8ec <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x1b0>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:404
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     8ca:	80 91 33 29 	lds	r24, 0x2933	; 0x802933 <SET_LONG_VALUE+0x16>
     8ce:	90 91 34 29 	lds	r25, 0x2934	; 0x802934 <SET_LONG_VALUE+0x17>
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	97 fd       	sbrc	r25, 7
     8d6:	05 c0       	rjmp	.+10     	; 0x8e2 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x1a6>
     8d8:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <SET_LONG_VALUE+0x16>
     8dc:	90 93 34 29 	sts	0x2934, r25	; 0x802934 <SET_LONG_VALUE+0x17>
     8e0:	08 95       	ret
     8e2:	10 92 33 29 	sts	0x2933, r1	; 0x802933 <SET_LONG_VALUE+0x16>
     8e6:	10 92 34 29 	sts	0x2934, r1	; 0x802934 <SET_LONG_VALUE+0x17>
     8ea:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:407
        }

        else if( SELECTION_PARAMETER == SafeValue )   //settings safe values lower limit
     8ec:	81 31       	cpi	r24, 0x11	; 17
     8ee:	91 05       	cpc	r25, r1
     8f0:	89 f4       	brne	.+34     	; 0x914 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x1d8>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:409
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     8f2:	80 91 3f 29 	lds	r24, 0x293F	; 0x80293f <SET_LONG_VALUE+0x22>
     8f6:	90 91 40 29 	lds	r25, 0x2940	; 0x802940 <SET_LONG_VALUE+0x23>
     8fa:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:410
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     8fc:	97 fd       	sbrc	r25, 7
     8fe:	05 c0       	rjmp	.+10     	; 0x90a <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x1ce>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:409
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
        }

        else if( SELECTION_PARAMETER == SafeValue )   //settings safe values lower limit
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     900:	80 93 3f 29 	sts	0x293F, r24	; 0x80293f <SET_LONG_VALUE+0x22>
     904:	90 93 40 29 	sts	0x2940, r25	; 0x802940 <SET_LONG_VALUE+0x23>
     908:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:410
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     90a:	10 92 3f 29 	sts	0x293F, r1	; 0x80293f <SET_LONG_VALUE+0x22>
     90e:	10 92 40 29 	sts	0x2940, r1	; 0x802940 <SET_LONG_VALUE+0x23>
     912:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:414
        }

        
        else if( SELECTION_PARAMETER == Energy_Mode_Selection )   
     914:	8d 30       	cpi	r24, 0x0D	; 13
     916:	91 05       	cpc	r25, r1
     918:	79 f4       	brne	.+30     	; 0x938 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x1fc>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:416
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     91a:	80 91 37 29 	lds	r24, 0x2937	; 0x802937 <SET_LONG_VALUE+0x1a>
     91e:	90 91 38 29 	lds	r25, 0x2938	; 0x802938 <SET_LONG_VALUE+0x1b>
     922:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:417
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 1;
     924:	97 fd       	sbrc	r25, 7
     926:	05 c0       	rjmp	.+10     	; 0x932 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x1f6>
     928:	80 93 37 29 	sts	0x2937, r24	; 0x802937 <SET_LONG_VALUE+0x1a>
     92c:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <SET_LONG_VALUE+0x1b>
     930:	08 95       	ret
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	f8 cf       	rjmp	.-16     	; 0x928 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x1ec>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:420
        }
        
        else if( SELECTION_PARAMETER == blank1 )   
     938:	80 31       	cpi	r24, 0x10	; 16
     93a:	91 05       	cpc	r25, r1
     93c:	89 f4       	brne	.+34     	; 0x960 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x224>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:422
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     93e:	80 91 3d 29 	lds	r24, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
     942:	90 91 3e 29 	lds	r25, 0x293E	; 0x80293e <SET_LONG_VALUE+0x21>
     946:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:423
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     948:	97 fd       	sbrc	r25, 7
     94a:	05 c0       	rjmp	.+10     	; 0x956 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x21a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:422
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 1;
        }
        
        else if( SELECTION_PARAMETER == blank1 )   
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     94c:	80 93 3d 29 	sts	0x293D, r24	; 0x80293d <SET_LONG_VALUE+0x20>
     950:	90 93 3e 29 	sts	0x293E, r25	; 0x80293e <SET_LONG_VALUE+0x21>
     954:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:423
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     956:	10 92 3d 29 	sts	0x293D, r1	; 0x80293d <SET_LONG_VALUE+0x20>
     95a:	10 92 3e 29 	sts	0x293E, r1	; 0x80293e <SET_LONG_VALUE+0x21>
     95e:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:426
        }
        
        else if( SELECTION_PARAMETER == FactoryAndSure_Reset )   
     960:	8e 30       	cpi	r24, 0x0E	; 14
     962:	91 05       	cpc	r25, r1
     964:	89 f4       	brne	.+34     	; 0x988 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x24c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:428
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     966:	80 91 39 29 	lds	r24, 0x2939	; 0x802939 <SET_LONG_VALUE+0x1c>
     96a:	90 91 3a 29 	lds	r25, 0x293A	; 0x80293a <SET_LONG_VALUE+0x1d>
     96e:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:429
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     970:	97 fd       	sbrc	r25, 7
     972:	05 c0       	rjmp	.+10     	; 0x97e <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x242>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:428
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
        }
        
        else if( SELECTION_PARAMETER == FactoryAndSure_Reset )   
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     974:	80 93 39 29 	sts	0x2939, r24	; 0x802939 <SET_LONG_VALUE+0x1c>
     978:	90 93 3a 29 	sts	0x293A, r25	; 0x80293a <SET_LONG_VALUE+0x1d>
     97c:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:429
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     97e:	10 92 39 29 	sts	0x2939, r1	; 0x802939 <SET_LONG_VALUE+0x1c>
     982:	10 92 3a 29 	sts	0x293A, r1	; 0x80293a <SET_LONG_VALUE+0x1d>
     986:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:432
        }   
             
        if( SELECTION_PARAMETER == ResetDone )   
     988:	0f 97       	sbiw	r24, 0x0f	; 15
     98a:	09 f0       	breq	.+2      	; 0x98e <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x252>
     98c:	80 c0       	rjmp	.+256    	; 0xa8e <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x352>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:434
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     98e:	80 91 3b 29 	lds	r24, 0x293B	; 0x80293b <SET_LONG_VALUE+0x1e>
     992:	90 91 3c 29 	lds	r25, 0x293C	; 0x80293c <SET_LONG_VALUE+0x1f>
     996:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:435
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     998:	97 fd       	sbrc	r25, 7
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x26a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:434
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
        }   
             
        if( SELECTION_PARAMETER == ResetDone )   
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     99c:	80 93 3b 29 	sts	0x293B, r24	; 0x80293b <SET_LONG_VALUE+0x1e>
     9a0:	90 93 3c 29 	sts	0x293C, r25	; 0x80293c <SET_LONG_VALUE+0x1f>
     9a4:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:435
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 0;
     9a6:	10 92 3b 29 	sts	0x293B, r1	; 0x80293b <SET_LONG_VALUE+0x1e>
     9aa:	10 92 3c 29 	sts	0x293C, r1	; 0x80293c <SET_LONG_VALUE+0x1f>
     9ae:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:440
        }
  }
  else       //set limit values for single mode click and set temp hour and minute limit values
  {
               if( ENTER_BUT == 1 )   
     9b0:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	81 f5       	brne	.+96     	; 0xa18 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x2dc>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:442
               {                    
                 if(!Energy_Mode)
     9b8:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
     9bc:	81 11       	cpse	r24, r1
     9be:	1d c0       	rjmp	.+58     	; 0x9fa <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x2be>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:444
                 { 
                       SET_VALUE[ENTER_BUT] -= SPEED_SW[INC];
     9c0:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <SET_VALUE+0x2>
     9c4:	90 91 11 29 	lds	r25, 0x2911	; 0x802911 <SET_VALUE+0x3>
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	80 93 10 29 	sts	0x2910, r24	; 0x802910 <SET_VALUE+0x2>
     9ce:	90 93 11 29 	sts	0x2911, r25	; 0x802911 <SET_VALUE+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:446

                      if( SAFE_VALUE_SET_DEG == 1 )  //SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; 
     9d2:	20 91 0d 29 	lds	r18, 0x290D	; 0x80290d <SAFE_VALUE_SET_DEG>
     9d6:	22 23       	and	r18, r18
     9d8:	39 f0       	breq	.+14     	; 0x9e8 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x2ac>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:448
                      {  
                                 if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 0;//SAFE_VALUE_SET   SAFE_VALUE_SET_DEG; 
     9da:	97 ff       	sbrs	r25, 7
     9dc:	58 c0       	rjmp	.+176    	; 0xa8e <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x352>
     9de:	10 92 10 29 	sts	0x2910, r1	; 0x802910 <SET_VALUE+0x2>
     9e2:	10 92 11 29 	sts	0x2911, r1	; 0x802911 <SET_VALUE+0x3>
     9e6:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:453
                      }
                    // else SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; 
                    else if( SAFE_VALUE_SET_DEG == 0 ) 
                    {
                      if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 300;
     9e8:	97 ff       	sbrs	r25, 7
     9ea:	51 c0       	rjmp	.+162    	; 0xa8e <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x352>
     9ec:	8c e2       	ldi	r24, 0x2C	; 44
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	80 93 10 29 	sts	0x2910, r24	; 0x802910 <SET_VALUE+0x2>
     9f4:	90 93 11 29 	sts	0x2911, r25	; 0x802911 <SET_VALUE+0x3>
     9f8:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:464
                    // else SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; 
                    //             if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 300;
                 }
                else
                {                  
                  SET_VALUE[6] -= SPEED_SW[INC];
     9fa:	80 91 1a 29 	lds	r24, 0x291A	; 0x80291a <SET_VALUE+0xc>
     9fe:	90 91 1b 29 	lds	r25, 0x291B	; 0x80291b <SET_VALUE+0xd>
     a02:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:465
                  if(SET_VALUE[6] < 0) SET_VALUE[6] = 10;                
     a04:	97 fd       	sbrc	r25, 7
     a06:	05 c0       	rjmp	.+10     	; 0xa12 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x2d6>
     a08:	80 93 1a 29 	sts	0x291A, r24	; 0x80291a <SET_VALUE+0xc>
     a0c:	90 93 1b 29 	sts	0x291B, r25	; 0x80291b <SET_VALUE+0xd>
     a10:	08 95       	ret
     a12:	8a e0       	ldi	r24, 0x0A	; 10
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	f8 cf       	rjmp	.-16     	; 0xa08 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x2cc>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:475
//                SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 9; //SET_VALUE[ENTER_BUT] = 9; 
                
//                 if(!PRINTER_VALUE_SET) SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 9; 
//                 else                  SET_VALUE[22] -= SPEED_SW[INC]; if(SET_VALUE[22] < 32) SET_VALUE[22] = SAFE_VALUE_SET_FAH; 
//               }
               else if( ENTER_BUT == 3 )   //for hour
     a18:	83 30       	cpi	r24, 0x03	; 3
     a1a:	79 f4       	brne	.+30     	; 0xa3a <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x2fe>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:477
               {
                SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 99; 
     a1c:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <SET_VALUE+0x6>
     a20:	90 91 15 29 	lds	r25, 0x2915	; 0x802915 <SET_VALUE+0x7>
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	97 fd       	sbrc	r25, 7
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x2f8>
     a2a:	80 93 14 29 	sts	0x2914, r24	; 0x802914 <SET_VALUE+0x6>
     a2e:	90 93 15 29 	sts	0x2915, r25	; 0x802915 <SET_VALUE+0x7>
     a32:	08 95       	ret
     a34:	83 e6       	ldi	r24, 0x63	; 99
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	f8 cf       	rjmp	.-16     	; 0xa2a <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x2ee>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:479
               }
               else if( ENTER_BUT == 4 )   //for minute
     a3a:	84 30       	cpi	r24, 0x04	; 4
     a3c:	79 f4       	brne	.+30     	; 0xa5c <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x320>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:481
               {
                SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 59; 
     a3e:	80 91 16 29 	lds	r24, 0x2916	; 0x802916 <SET_VALUE+0x8>
     a42:	90 91 17 29 	lds	r25, 0x2917	; 0x802917 <SET_VALUE+0x9>
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	97 fd       	sbrc	r25, 7
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x31a>
     a4c:	80 93 16 29 	sts	0x2916, r24	; 0x802916 <SET_VALUE+0x8>
     a50:	90 93 17 29 	sts	0x2917, r25	; 0x802917 <SET_VALUE+0x9>
     a54:	08 95       	ret
     a56:	8b e3       	ldi	r24, 0x3B	; 59
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	f8 cf       	rjmp	.-16     	; 0xa4c <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x310>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:483
               }
               else if( ENTER_BUT == 5 && VENT_FLAG )   //vent on off
     a5c:	85 30       	cpi	r24, 0x05	; 5
     a5e:	b9 f4       	brne	.+46     	; 0xa8e <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x352>
     a60:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <VENT_FLAG>
     a64:	88 23       	and	r24, r24
     a66:	99 f0       	breq	.+38     	; 0xa8e <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x352>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:485
               {
                SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 1; 
     a68:	80 91 18 29 	lds	r24, 0x2918	; 0x802918 <SET_VALUE+0xa>
     a6c:	90 91 19 29 	lds	r25, 0x2919	; 0x802919 <SET_VALUE+0xb>
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	97 fd       	sbrc	r25, 7
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x344>
     a76:	80 93 18 29 	sts	0x2918, r24	; 0x802918 <SET_VALUE+0xa>
     a7a:	90 93 19 29 	sts	0x2919, r25	; 0x802919 <SET_VALUE+0xb>
     a7e:	08 95       	ret
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	f8 cf       	rjmp	.-16     	; 0xa76 <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]+0x33a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:350
            if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0) SET_LONG_VALUE[SELECTION_PARAMETER] = 1;
        }
        
        else if( SELECTION_PARAMETER == Auto_Resume_Enable )   //settinge print(unit)
        {
            SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     a86:	20 93 1f 29 	sts	0x291F, r18	; 0x80291f <SET_LONG_VALUE+0x2>
     a8a:	30 93 20 29 	sts	0x2920, r19	; 0x802920 <SET_LONG_VALUE+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:488
               else if( ENTER_BUT == 5 && VENT_FLAG )   //vent on off
               {
                SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 1; 
               }
  }
}
     a8e:	08 95       	ret

00000a90 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]>:
RTD_TEMP_CONV():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:932
  //    avrage_val1 = 50;


}

void Bclass :: RTD_TEMP_CONV()
     a90:	4f 92       	push	r4
     a92:	5f 92       	push	r5
     a94:	6f 92       	push	r6
     a96:	7f 92       	push	r7
     a98:	8f 92       	push	r8
     a9a:	9f 92       	push	r9
     a9c:	af 92       	push	r10
     a9e:	bf 92       	push	r11
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	00 d0       	rcall	.+0      	; 0xaae <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0x1e>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0x20>
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:934
{
  if (TEMP_DEG_RAW1 == 0) TEMP_DEG_RAW = TEMP_DEG_RAW2;
     ab4:	c0 90 02 29 	lds	r12, 0x2902	; 0x802902 <TEMP_DEG_RAW1>
     ab8:	d0 90 03 29 	lds	r13, 0x2903	; 0x802903 <TEMP_DEG_RAW1+0x1>
     abc:	e0 90 04 29 	lds	r14, 0x2904	; 0x802904 <TEMP_DEG_RAW1+0x2>
     ac0:	f0 90 05 29 	lds	r15, 0x2905	; 0x802905 <TEMP_DEG_RAW1+0x3>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	a9 01       	movw	r20, r18
     aca:	c7 01       	movw	r24, r14
     acc:	b6 01       	movw	r22, r12
     ace:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
     ad2:	81 11       	cpse	r24, r1
     ad4:	79 c0       	rjmp	.+242    	; 0xbc8 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0x138>
     ad6:	80 91 fe 28 	lds	r24, 0x28FE	; 0x8028fe <TEMP_DEG_RAW2>
     ada:	90 91 ff 28 	lds	r25, 0x28FF	; 0x8028ff <TEMP_DEG_RAW2+0x1>
     ade:	a0 91 00 29 	lds	r26, 0x2900	; 0x802900 <TEMP_DEG_RAW2+0x2>
     ae2:	b0 91 01 29 	lds	r27, 0x2901	; 0x802901 <TEMP_DEG_RAW2+0x3>
     ae6:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <TEMP_DEG_RAW>
     aea:	90 93 0f 28 	sts	0x280F, r25	; 0x80280f <TEMP_DEG_RAW+0x1>
     aee:	a0 93 10 28 	sts	0x2810, r26	; 0x802810 <TEMP_DEG_RAW+0x2>
     af2:	b0 93 11 28 	sts	0x2811, r27	; 0x802811 <TEMP_DEG_RAW+0x3>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e2       	ldi	r20, 0x20	; 32
     afc:	51 e4       	ldi	r21, 0x41	; 65
     afe:	60 91 06 29 	lds	r22, 0x2906	; 0x802906 <ERROR_CAL1>
     b02:	70 91 07 29 	lds	r23, 0x2907	; 0x802907 <ERROR_CAL1+0x1>
     b06:	80 91 08 29 	lds	r24, 0x2908	; 0x802908 <ERROR_CAL1+0x2>
     b0a:	90 91 09 29 	lds	r25, 0x2909	; 0x802909 <ERROR_CAL1+0x3>
     b0e:	0e 94 96 39 	call	0x732c	; 0x732c <__divsf3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:936
  else                   TEMP_DEG_RAW = TEMP_DEG_RAW1;
  if (SIGN) {
     b12:	20 91 fd 28 	lds	r18, 0x28FD	; 0x8028fd <SIGN>
     b16:	21 11       	cpse	r18, r1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:937
    ERROR_CAL = (ERROR_CAL1 / 10) * -1;
     b18:	90 58       	subi	r25, 0x80	; 128
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:940
  }
  else     {
    ERROR_CAL = (ERROR_CAL1 / 10) ;
     b1a:	60 93 f9 28 	sts	0x28F9, r22	; 0x8028f9 <ERROR_CAL>
     b1e:	70 93 fa 28 	sts	0x28FA, r23	; 0x8028fa <ERROR_CAL+0x1>
     b22:	80 93 fb 28 	sts	0x28FB, r24	; 0x8028fb <ERROR_CAL+0x2>
     b26:	90 93 fc 28 	sts	0x28FC, r25	; 0x8028fc <ERROR_CAL+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:942
  }
  if (ERROR_SET_IN_DEG_FLAG == 1)
     b2a:	b0 90 f8 28 	lds	r11, 0x28F8	; 0x8028f8 <ERROR_SET_IN_DEG_FLAG>
     b2e:	c0 90 0e 28 	lds	r12, 0x280E	; 0x80280e <TEMP_DEG_RAW>
     b32:	d0 90 0f 28 	lds	r13, 0x280F	; 0x80280f <TEMP_DEG_RAW+0x1>
     b36:	e0 90 10 28 	lds	r14, 0x2810	; 0x802810 <TEMP_DEG_RAW+0x2>
     b3a:	f0 90 11 28 	lds	r15, 0x2811	; 0x802811 <TEMP_DEG_RAW+0x3>
     b3e:	bb 20       	and	r11, r11
     b40:	09 f4       	brne	.+2      	; 0xb44 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0xb4>
     b42:	b4 c0       	rjmp	.+360    	; 0xcac <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0x21c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:945
  {
    //      Serial2.println(1);
    TEMP_DEG = TEMP_DEG_RAW + ERROR_CAL;
     b44:	a7 01       	movw	r20, r14
     b46:	96 01       	movw	r18, r12
     b48:	60 91 f9 28 	lds	r22, 0x28F9	; 0x8028f9 <ERROR_CAL>
     b4c:	70 91 fa 28 	lds	r23, 0x28FA	; 0x8028fa <ERROR_CAL+0x1>
     b50:	80 91 fb 28 	lds	r24, 0x28FB	; 0x8028fb <ERROR_CAL+0x2>
     b54:	90 91 fc 28 	lds	r25, 0x28FC	; 0x8028fc <ERROR_CAL+0x3>
     b58:	0e 94 2e 39 	call	0x725c	; 0x725c <__addsf3>
     b5c:	60 93 12 28 	sts	0x2812, r22	; 0x802812 <TEMP_DEG>
     b60:	70 93 13 28 	sts	0x2813, r23	; 0x802813 <TEMP_DEG+0x1>
     b64:	80 93 14 28 	sts	0x2814, r24	; 0x802814 <TEMP_DEG+0x2>
     b68:	90 93 15 28 	sts	0x2815, r25	; 0x802815 <TEMP_DEG+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:953
  {
    //      Serial2.println(2);
    TEMP_DEG = TEMP_DEG_RAW;
  }

  if (!CAL_SELECT_VALUE)
     b6c:	80 91 f6 28 	lds	r24, 0x28F6	; 0x8028f6 <CAL_SELECT_VALUE>
     b70:	90 91 f7 28 	lds	r25, 0x28F7	; 0x8028f7 <CAL_SELECT_VALUE+0x1>
     b74:	89 2b       	or	r24, r25
     b76:	89 f5       	brne	.+98     	; 0xbda <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0x14a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:960
    //        Serial2.println(3);
    // if(ERROR_SET_IN_DEG_FLAG)                         TEMP_DEG  =  TEMP_DEG_RAW + ERROR_CAL;     //show this values as temprature
    //     if(SIGN) {ERROR_CAL =(ERROR_CAL1/10) * -1;}
    //     else     {ERROR_CAL =(ERROR_CAL1/10) ;}

    if (ERROR_SET_IN_DEG_FLAG == 1)
     b78:	bb 20       	and	r11, r11
     b7a:	a1 f0       	breq	.+40     	; 0xba4 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0x114>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:963
    {
      //      Serial2.println(4);
      TEMP_DEG  =  TEMP_DEG_RAW + ERROR_CAL;     //show thi
     b7c:	a7 01       	movw	r20, r14
     b7e:	96 01       	movw	r18, r12
     b80:	60 91 f9 28 	lds	r22, 0x28F9	; 0x8028f9 <ERROR_CAL>
     b84:	70 91 fa 28 	lds	r23, 0x28FA	; 0x8028fa <ERROR_CAL+0x1>
     b88:	80 91 fb 28 	lds	r24, 0x28FB	; 0x8028fb <ERROR_CAL+0x2>
     b8c:	90 91 fc 28 	lds	r25, 0x28FC	; 0x8028fc <ERROR_CAL+0x3>
mapFloat():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\MapFloat-master\src/MapFloat.cpp:13


#include "MapFloat.h"

float mapFloat(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
  return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow; 
     b90:	0e 94 2e 39 	call	0x725c	; 0x725c <__addsf3>
RTD_TEMP_CONV():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:979
    // Serial2.println(2);
    CAL2_RAW_LOW_VALUE = (CAL2_RAW_LOW_VALUE_CONV / 10.0);
    CAL2_RAW_HIGH_VALUE = (CAL2_RAW_HIGH_VALUE_CONV  / 10.0);
    MASTER_LOW =  (MASTER_LOW_CONV  / 10.0);
    MASTER_HIGH = (MASTER_HIGH_CONV  / 10.0);
    TEMP_DEG = mapFloat( TEMP_DEG_RAW, CAL2_RAW_LOW_VALUE, CAL2_RAW_HIGH_VALUE, MASTER_LOW,  MASTER_HIGH);
     b94:	60 93 12 28 	sts	0x2812, r22	; 0x802812 <TEMP_DEG>
     b98:	70 93 13 28 	sts	0x2813, r23	; 0x802813 <TEMP_DEG+0x1>
     b9c:	80 93 14 28 	sts	0x2814, r24	; 0x802814 <TEMP_DEG+0x2>
     ba0:	90 93 15 28 	sts	0x2815, r25	; 0x802815 <TEMP_DEG+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:983
    TEMP_FAH = ( TEMP_DEG * 1.8 ) + 32;
  }
  //  Serial2.println(TEMP_DEG);
}
     ba4:	24 96       	adiw	r28, 0x04	; 4
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	bf 90       	pop	r11
     bb8:	af 90       	pop	r10
     bba:	9f 90       	pop	r9
     bbc:	8f 90       	pop	r8
     bbe:	7f 90       	pop	r7
     bc0:	6f 90       	pop	r6
     bc2:	5f 90       	pop	r5
     bc4:	4f 90       	pop	r4
     bc6:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:935
}

void Bclass :: RTD_TEMP_CONV()
{
  if (TEMP_DEG_RAW1 == 0) TEMP_DEG_RAW = TEMP_DEG_RAW2;
  else                   TEMP_DEG_RAW = TEMP_DEG_RAW1;
     bc8:	c0 92 0e 28 	sts	0x280E, r12	; 0x80280e <TEMP_DEG_RAW>
     bcc:	d0 92 0f 28 	sts	0x280F, r13	; 0x80280f <TEMP_DEG_RAW+0x1>
     bd0:	e0 92 10 28 	sts	0x2810, r14	; 0x802810 <TEMP_DEG_RAW+0x2>
     bd4:	f0 92 11 28 	sts	0x2811, r15	; 0x802811 <TEMP_DEG_RAW+0x3>
     bd8:	8e cf       	rjmp	.-228    	; 0xaf6 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0x66>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:975

  }
  else
  {
    // Serial2.println(2);
    CAL2_RAW_LOW_VALUE = (CAL2_RAW_LOW_VALUE_CONV / 10.0);
     bda:	60 91 f2 28 	lds	r22, 0x28F2	; 0x8028f2 <CAL2_RAW_LOW_VALUE_CONV>
     bde:	70 91 f3 28 	lds	r23, 0x28F3	; 0x8028f3 <CAL2_RAW_LOW_VALUE_CONV+0x1>
     be2:	80 91 f4 28 	lds	r24, 0x28F4	; 0x8028f4 <CAL2_RAW_LOW_VALUE_CONV+0x2>
     be6:	90 91 f5 28 	lds	r25, 0x28F5	; 0x8028f5 <CAL2_RAW_LOW_VALUE_CONV+0x3>
     bea:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e2       	ldi	r20, 0x20	; 32
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	0e 94 96 39 	call	0x732c	; 0x732c <__divsf3>
     bfa:	4b 01       	movw	r8, r22
     bfc:	5c 01       	movw	r10, r24
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:977
    CAL2_RAW_HIGH_VALUE = (CAL2_RAW_HIGH_VALUE_CONV  / 10.0);
    MASTER_LOW =  (MASTER_LOW_CONV  / 10.0);
     bfe:	60 91 ea 28 	lds	r22, 0x28EA	; 0x8028ea <MASTER_LOW_CONV>
     c02:	70 91 eb 28 	lds	r23, 0x28EB	; 0x8028eb <MASTER_LOW_CONV+0x1>
     c06:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <MASTER_LOW_CONV+0x2>
     c0a:	90 91 ed 28 	lds	r25, 0x28ED	; 0x8028ed <MASTER_LOW_CONV+0x3>
     c0e:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	0e 94 96 39 	call	0x732c	; 0x732c <__divsf3>
     c1e:	2b 01       	movw	r4, r22
     c20:	3c 01       	movw	r6, r24
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:978
    MASTER_HIGH = (MASTER_HIGH_CONV  / 10.0);
     c22:	60 91 e6 28 	lds	r22, 0x28E6	; 0x8028e6 <MASTER_HIGH_CONV>
     c26:	70 91 e7 28 	lds	r23, 0x28E7	; 0x8028e7 <MASTER_HIGH_CONV+0x1>
     c2a:	80 91 e8 28 	lds	r24, 0x28E8	; 0x8028e8 <MASTER_HIGH_CONV+0x2>
     c2e:	90 91 e9 28 	lds	r25, 0x28E9	; 0x8028e9 <MASTER_HIGH_CONV+0x3>
     c32:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e2       	ldi	r20, 0x20	; 32
     c3c:	51 e4       	ldi	r21, 0x41	; 65
     c3e:	0e 94 96 39 	call	0x732c	; 0x732c <__divsf3>
mapFloat():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\MapFloat-master\src/MapFloat.cpp:13
     c42:	a3 01       	movw	r20, r6
     c44:	92 01       	movw	r18, r4
     c46:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
     c4a:	69 83       	std	Y+1, r22	; 0x01
     c4c:	7a 83       	std	Y+2, r23	; 0x02
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	a5 01       	movw	r20, r10
     c54:	94 01       	movw	r18, r8
     c56:	c7 01       	movw	r24, r14
     c58:	b6 01       	movw	r22, r12
     c5a:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
     c5e:	9b 01       	movw	r18, r22
     c60:	ac 01       	movw	r20, r24
     c62:	69 81       	ldd	r22, Y+1	; 0x01
     c64:	7a 81       	ldd	r23, Y+2	; 0x02
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	9c 81       	ldd	r25, Y+4	; 0x04
     c6a:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
     c6e:	6b 01       	movw	r12, r22
     c70:	7c 01       	movw	r14, r24
RTD_TEMP_CONV():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:976
  }
  else
  {
    // Serial2.println(2);
    CAL2_RAW_LOW_VALUE = (CAL2_RAW_LOW_VALUE_CONV / 10.0);
    CAL2_RAW_HIGH_VALUE = (CAL2_RAW_HIGH_VALUE_CONV  / 10.0);
     c72:	60 91 ee 28 	lds	r22, 0x28EE	; 0x8028ee <CAL2_RAW_HIGH_VALUE_CONV>
     c76:	70 91 ef 28 	lds	r23, 0x28EF	; 0x8028ef <CAL2_RAW_HIGH_VALUE_CONV+0x1>
     c7a:	80 91 f0 28 	lds	r24, 0x28F0	; 0x8028f0 <CAL2_RAW_HIGH_VALUE_CONV+0x2>
     c7e:	90 91 f1 28 	lds	r25, 0x28F1	; 0x8028f1 <CAL2_RAW_HIGH_VALUE_CONV+0x3>
     c82:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e2       	ldi	r20, 0x20	; 32
     c8c:	51 e4       	ldi	r21, 0x41	; 65
     c8e:	0e 94 96 39 	call	0x732c	; 0x732c <__divsf3>
mapFloat():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\MapFloat-master\src/MapFloat.cpp:13
     c92:	a5 01       	movw	r20, r10
     c94:	94 01       	movw	r18, r8
     c96:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
     ca2:	0e 94 96 39 	call	0x732c	; 0x732c <__divsf3>
     ca6:	a3 01       	movw	r20, r6
     ca8:	92 01       	movw	r18, r4
     caa:	72 cf       	rjmp	.-284    	; 0xb90 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0x100>
RTD_TEMP_CONV():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:950
    TEMP_DEG = TEMP_DEG_RAW + ERROR_CAL;
  }
  if (ERROR_SET_IN_DEG_FLAG == 0)
  {
    //      Serial2.println(2);
    TEMP_DEG = TEMP_DEG_RAW;
     cac:	c0 92 12 28 	sts	0x2812, r12	; 0x802812 <TEMP_DEG>
     cb0:	d0 92 13 28 	sts	0x2813, r13	; 0x802813 <TEMP_DEG+0x1>
     cb4:	e0 92 14 28 	sts	0x2814, r14	; 0x802814 <TEMP_DEG+0x2>
     cb8:	f0 92 15 28 	sts	0x2815, r15	; 0x802815 <TEMP_DEG+0x3>
     cbc:	57 cf       	rjmp	.-338    	; 0xb6c <Bclass::RTD_TEMP_CONV() [clone .constprop.21]+0xdc>

00000cbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>:
BREAK_NUMBER2():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:203
    digits1[2] = third_digit;
    fourth_digit = second_left - (third_digit * 10);
    digits1[3] = fourth_digit;
}

void Eclass:: BREAK_NUMBER2(long num2) 
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	6b 01       	movw	r12, r22
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:205
{ 
    first_digit2 = num2 / 1000;
     cc8:	28 ee       	ldi	r18, 0xE8	; 232
     cca:	33 e0       	ldi	r19, 0x03	; 3
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	0e 94 91 3b 	call	0x7722	; 0x7722 <__divmodsi4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:206
    digits2[0] = first_digit2;
     cd4:	ee ed       	ldi	r30, 0xDE	; 222
     cd6:	f8 e2       	ldi	r31, 0x28	; 40
     cd8:	20 83       	st	Z, r18
     cda:	31 83       	std	Z+1, r19	; 0x01
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:207
    int first_left2 = num2 - (first_digit2 * 1000);
     cdc:	68 ee       	ldi	r22, 0xE8	; 232
     cde:	73 e0       	ldi	r23, 0x03	; 3
     ce0:	62 9f       	mul	r22, r18
     ce2:	c0 01       	movw	r24, r0
     ce4:	63 9f       	mul	r22, r19
     ce6:	90 0d       	add	r25, r0
     ce8:	72 9f       	mul	r23, r18
     cea:	90 0d       	add	r25, r0
     cec:	11 24       	eor	r1, r1
     cee:	c8 1a       	sub	r12, r24
     cf0:	d9 0a       	sbc	r13, r25
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:208
    second_digit2 = first_left2 / 100;
     cf2:	c6 01       	movw	r24, r12
     cf4:	64 e6       	ldi	r22, 0x64	; 100
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <__divmodhi4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:209
    digits2[1] = second_digit2;
     cfc:	62 83       	std	Z+2, r22	; 0x02
     cfe:	73 83       	std	Z+3, r23	; 0x03
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:210
    int second_left2 = first_left2 - (second_digit2 * 100);
     d00:	2c e9       	ldi	r18, 0x9C	; 156
     d02:	26 03       	mulsu	r18, r22
     d04:	c0 01       	movw	r24, r0
     d06:	27 9f       	mul	r18, r23
     d08:	90 0d       	add	r25, r0
     d0a:	11 24       	eor	r1, r1
     d0c:	c8 0e       	add	r12, r24
     d0e:	d9 1e       	adc	r13, r25
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:211
    third_digit2 = second_left2 / 10;
     d10:	c6 01       	movw	r24, r12
     d12:	6a e0       	ldi	r22, 0x0A	; 10
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <__divmodhi4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:212
    digits2[2] = third_digit2;
     d1a:	64 83       	std	Z+4, r22	; 0x04
     d1c:	75 83       	std	Z+5, r23	; 0x05
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:213
    fourth_digit2 = second_left2 - (third_digit2 * 10);
     d1e:	26 ef       	ldi	r18, 0xF6	; 246
     d20:	26 03       	mulsu	r18, r22
     d22:	c0 01       	movw	r24, r0
     d24:	27 9f       	mul	r18, r23
     d26:	90 0d       	add	r25, r0
     d28:	11 24       	eor	r1, r1
     d2a:	c8 0e       	add	r12, r24
     d2c:	d9 1e       	adc	r13, r25
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:214
    digits2[3] = fourth_digit2;
     d2e:	c6 82       	std	Z+6, r12	; 0x06
     d30:	d7 82       	std	Z+7, r13	; 0x07
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:215
}
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	08 95       	ret

00000d3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>:
BREAK_NUMBER1():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:189
    digitalWrite(CA_2, HIGH);
    digitalWrite(CA_3, HIGH);
    digitalWrite(CA_4, HIGH);
}

void Eclass:: BREAK_NUMBER1(long num) 
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	6b 01       	movw	r12, r22
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:191
{ 
    first_digit = num / 1000;
     d46:	28 ee       	ldi	r18, 0xE8	; 232
     d48:	33 e0       	ldi	r19, 0x03	; 3
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	0e 94 91 3b 	call	0x7722	; 0x7722 <__divmodsi4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:192
    digits1[0] = first_digit;
     d52:	e6 ed       	ldi	r30, 0xD6	; 214
     d54:	f8 e2       	ldi	r31, 0x28	; 40
     d56:	20 83       	st	Z, r18
     d58:	31 83       	std	Z+1, r19	; 0x01
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:193
    int first_left = num - (first_digit * 1000);
     d5a:	68 ee       	ldi	r22, 0xE8	; 232
     d5c:	73 e0       	ldi	r23, 0x03	; 3
     d5e:	62 9f       	mul	r22, r18
     d60:	c0 01       	movw	r24, r0
     d62:	63 9f       	mul	r22, r19
     d64:	90 0d       	add	r25, r0
     d66:	72 9f       	mul	r23, r18
     d68:	90 0d       	add	r25, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	c8 1a       	sub	r12, r24
     d6e:	d9 0a       	sbc	r13, r25
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:194
    second_digit = first_left / 100;
     d70:	c6 01       	movw	r24, r12
     d72:	64 e6       	ldi	r22, 0x64	; 100
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <__divmodhi4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:195
    digits1[1] = second_digit;
     d7a:	62 83       	std	Z+2, r22	; 0x02
     d7c:	73 83       	std	Z+3, r23	; 0x03
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:196
    int second_left = first_left - (second_digit * 100);
     d7e:	2c e9       	ldi	r18, 0x9C	; 156
     d80:	26 03       	mulsu	r18, r22
     d82:	c0 01       	movw	r24, r0
     d84:	27 9f       	mul	r18, r23
     d86:	90 0d       	add	r25, r0
     d88:	11 24       	eor	r1, r1
     d8a:	c8 0e       	add	r12, r24
     d8c:	d9 1e       	adc	r13, r25
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:197
    third_digit = second_left / 10;
     d8e:	c6 01       	movw	r24, r12
     d90:	6a e0       	ldi	r22, 0x0A	; 10
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <__divmodhi4>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:198
    digits1[2] = third_digit;
     d98:	64 83       	std	Z+4, r22	; 0x04
     d9a:	75 83       	std	Z+5, r23	; 0x05
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:199
    fourth_digit = second_left - (third_digit * 10);
     d9c:	26 ef       	ldi	r18, 0xF6	; 246
     d9e:	26 03       	mulsu	r18, r22
     da0:	c0 01       	movw	r24, r0
     da2:	27 9f       	mul	r18, r23
     da4:	90 0d       	add	r25, r0
     da6:	11 24       	eor	r1, r1
     da8:	c8 0e       	add	r12, r24
     daa:	d9 1e       	adc	r13, r25
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:200
    digits1[3] = fourth_digit;
     dac:	c6 82       	std	Z+6, r12	; 0x06
     dae:	d7 82       	std	Z+7, r13	; 0x07
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/led.cpp:201
}
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	08 95       	ret

00000dba <DEC_LONGPRESS_STOP()>:
DEC_LONGPRESS_STOP():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:761
  }
}

void DEC_LONGPRESS_STOP()
{
  if (checkTempRaised == 0)
     dba:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
     dbe:	81 11       	cpse	r24, r1
     dc0:	06 c0       	rjmp	.+12     	; 0xdce <DEC_LONGPRESS_STOP()+0x14>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:763
  {
    BLINK_STATS = 0;
     dc2:	10 92 ce 28 	sts	0x28CE, r1	; 0x8028ce <BLINK_STATS>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:764
    fast_inc = 0;
     dc6:	10 92 41 28 	sts	0x2841, r1	; 0x802841 <fast_inc>
     dca:	10 92 42 28 	sts	0x2842, r1	; 0x802842 <fast_inc+0x1>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:768
  }
  //  DEC_LONGPRESS_START=0;
  //  INC_LONGPRESS_START=0;
}
     dce:	08 95       	ret

00000dd0 <INC_LONGPRESS_STOP()>:
_Z18INC_LONGPRESS_STOPv():
     dd0:	f4 cf       	rjmp	.-24     	; 0xdba <DEC_LONGPRESS_STOP()>

00000dd2 <UartClass::swap(unsigned char)>:
swap():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:161
  _pin_set = 0; // Default to standard
  return false;
}

bool UartClass::swap(uint8_t state)
{
     dd2:	fc 01       	movw	r30, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:162
  if (state == 1) // Use alternative pin position
     dd4:	61 30       	cpi	r22, 0x01	; 1
     dd6:	19 f4       	brne	.+6      	; 0xdde <UartClass::swap(unsigned char)+0xc>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:164
  {
    _pin_set = state;
     dd8:	64 8b       	std	Z+20, r22	; 0x14
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:170
    return true;
  }
  else if (state == 0) // Use default pin position
  {
    _pin_set = 0;
    return true;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:169
    _pin_set = state;
    return true;
  }
  else if (state == 0) // Use default pin position
  {
    _pin_set = 0;
     dde:	14 8a       	std	Z+20, r1	; 0x14
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:167
  if (state == 1) // Use alternative pin position
  {
    _pin_set = state;
    return true;
  }
  else if (state == 0) // Use default pin position
     de0:	66 23       	and	r22, r22
     de2:	d9 f3       	breq	.-10     	; 0xdda <UartClass::swap(unsigned char)+0x8>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:175
    return true;
  }
  else // Invalid swap value. Use default position
  {
    _pin_set = 0;
    return false;
     de4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:177
  }
}
     de6:	08 95       	ret

00000de8 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles\api/Print.cpp:30

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     de8:	af 92       	push	r10
     dea:	bf 92       	push	r11
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	6c 01       	movw	r12, r24
     dfe:	7b 01       	movw	r14, r22
     e00:	8b 01       	movw	r16, r22
     e02:	04 0f       	add	r16, r20
     e04:	15 1f       	adc	r17, r21
     e06:	eb 01       	movw	r28, r22
     e08:	5e 01       	movw	r10, r28
     e0a:	ae 18       	sub	r10, r14
     e0c:	bf 08       	sbc	r11, r15
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles\api/Print.cpp:32
  size_t n = 0;
  while (size--)
     e0e:	c0 17       	cp	r28, r16
     e10:	d1 07       	cpc	r29, r17
     e12:	59 f0       	breq	.+22     	; 0xe2a <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles\api/Print.cpp:34
  {
    if (write(*buffer++))
     e14:	69 91       	ld	r22, Y+
     e16:	d6 01       	movw	r26, r12
     e18:	ed 91       	ld	r30, X+
     e1a:	fc 91       	ld	r31, X
     e1c:	01 90       	ld	r0, Z+
     e1e:	f0 81       	ld	r31, Z
     e20:	e0 2d       	mov	r30, r0
     e22:	c6 01       	movw	r24, r12
     e24:	09 95       	icall
     e26:	89 2b       	or	r24, r25
     e28:	79 f7       	brne	.-34     	; 0xe08 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles\api/Print.cpp:40
      n++;
    else
      break;
  }
  return n;
}
     e2a:	c5 01       	movw	r24, r10
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	08 95       	ret

00000e42 <UartClass::availableForWrite()>:
availableForWrite():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:295
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC
  {
    head = _tx_buffer_head;
     e42:	fc 01       	movw	r30, r24
     e44:	50 8d       	ldd	r21, Z+24	; 0x18
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:296
    tail = _tx_buffer_tail;
     e46:	41 8d       	ldd	r20, Z+25	; 0x19
     e48:	25 2f       	mov	r18, r21
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	84 2f       	mov	r24, r20
     e4e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:298
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     e50:	82 1b       	sub	r24, r18
     e52:	93 0b       	sbc	r25, r19
     e54:	54 17       	cp	r21, r20
     e56:	10 f0       	brcs	.+4      	; 0xe5c <UartClass::availableForWrite()+0x1a>
     e58:	cf 96       	adiw	r24, 0x3f	; 63
     e5a:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:299
  return tail - head - 1;
     e5c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:300
}
     e5e:	08 95       	ret

00000e60 <UartClass::read()>:
read():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:274
    return _rx_buffer[_rx_buffer_tail];
  }
}

int UartClass::read(void)
{
     e60:	fc 01       	movw	r30, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:276
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail)
     e62:	96 89       	ldd	r25, Z+22	; 0x16
     e64:	87 89       	ldd	r24, Z+23	; 0x17
     e66:	98 17       	cp	r25, r24
     e68:	61 f0       	breq	.+24     	; 0xe82 <UartClass::read()+0x22>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:282
  {
    return -1;
  }
  else
  {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     e6a:	a7 89       	ldd	r26, Z+23	; 0x17
     e6c:	ae 0f       	add	r26, r30
     e6e:	bf 2f       	mov	r27, r31
     e70:	b1 1d       	adc	r27, r1
     e72:	5d 96       	adiw	r26, 0x1d	; 29
     e74:	8c 91       	ld	r24, X
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:283
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     e76:	97 89       	ldd	r25, Z+23	; 0x17
     e78:	9f 5f       	subi	r25, 0xFF	; 255
     e7a:	9f 73       	andi	r25, 0x3F	; 63
     e7c:	97 8b       	std	Z+23, r25	; 0x17
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:284
    return c;
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:278
int UartClass::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail)
  {
    return -1;
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:286
  {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     e86:	08 95       	ret

00000e88 <UartClass::peek()>:
peek():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:262
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void)
{
     e88:	fc 01       	movw	r30, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:263
  if (_rx_buffer_head == _rx_buffer_tail)
     e8a:	96 89       	ldd	r25, Z+22	; 0x16
     e8c:	87 89       	ldd	r24, Z+23	; 0x17
     e8e:	98 17       	cp	r25, r24
     e90:	31 f0       	breq	.+12     	; 0xe9e <UartClass::peek()+0x16>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:269
  {
    return -1;
  }
  else
  {
    return _rx_buffer[_rx_buffer_tail];
     e92:	87 89       	ldd	r24, Z+23	; 0x17
     e94:	e8 0f       	add	r30, r24
     e96:	f1 1d       	adc	r31, r1
     e98:	85 8d       	ldd	r24, Z+29	; 0x1d
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:265

int UartClass::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail)
  {
    return -1;
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:271
  }
  else
  {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     ea2:	08 95       	ret

00000ea4 <UartClass::available()>:
available():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:257
  // Note: Does not change output pins
  _written = false;
}

int UartClass::available(void)
{
     ea4:	fc 01       	movw	r30, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:258
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     ea6:	96 89       	ldd	r25, Z+22	; 0x16
     ea8:	27 89       	ldd	r18, Z+23	; 0x17
     eaa:	89 2f       	mov	r24, r25
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	80 5c       	subi	r24, 0xC0	; 192
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	82 1b       	sub	r24, r18
     eb4:	91 09       	sbc	r25, r1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:259
}
     eb6:	8f 73       	andi	r24, 0x3F	; 63
     eb8:	99 27       	eor	r25, r25
     eba:	08 95       	ret

00000ebc <Serial2_available()>:
Serial2_available():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART2.cpp:65

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available()
{
  return Serial2.available();
     ebc:	86 e5       	ldi	r24, 0x56	; 86
     ebe:	99 e2       	ldi	r25, 0x29	; 41
     ec0:	f1 df       	rcall	.-30     	; 0xea4 <UartClass::available()>
     ec2:	21 e0       	ldi	r18, 0x01	; 1
     ec4:	89 2b       	or	r24, r25
     ec6:	09 f4       	brne	.+2      	; 0xeca <Serial2_available()+0xe>
     ec8:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART2.cpp:66
}
     eca:	82 2f       	mov	r24, r18
     ecc:	08 95       	ret

00000ece <UartClass::end()>:
end():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:240
  // Restore SREG content
  SREG = oldSREG;
}

void UartClass::end()
{
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	ec 01       	movw	r28, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:242
  // wait for transmission of outgoing data
  flush();
     ed4:	e8 81       	ld	r30, Y
     ed6:	f9 81       	ldd	r31, Y+1	; 0x01
     ed8:	06 80       	ldd	r0, Z+6	; 0x06
     eda:	f7 81       	ldd	r31, Z+7	; 0x07
     edc:	e0 2d       	mov	r30, r0
     ede:	09 95       	icall
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:246

  // Disable receiver and transmitter as well as the RX complete and
  // data register empty interrupts.
  (*_hwserial_module).CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
     ee0:	ec 85       	ldd	r30, Y+12	; 0x0c
     ee2:	fd 85       	ldd	r31, Y+13	; 0x0d
     ee4:	86 81       	ldd	r24, Z+6	; 0x06
     ee6:	8f 73       	andi	r24, 0x3F	; 63
     ee8:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:247
  (*_hwserial_module).CTRLA &= ~(USART_RXCIE_bm | USART_DREIE_bm);
     eea:	ec 85       	ldd	r30, Y+12	; 0x0c
     eec:	fd 85       	ldd	r31, Y+13	; 0x0d
     eee:	85 81       	ldd	r24, Z+5	; 0x05
     ef0:	8f 75       	andi	r24, 0x5F	; 95
     ef2:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:250

  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     ef4:	8f 89       	ldd	r24, Y+23	; 0x17
     ef6:	8e 8b       	std	Y+22, r24	; 0x16
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:253

  // Note: Does not change output pins
  _written = false;
     ef8:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:254
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <UartClass::pins(unsigned char, unsigned char)>:
pins():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:147

// Public Methods //////////////////////////////////////////////////////////////

// Invoke this function before 'begin' to define the pins used
bool UartClass::pins(uint8_t tx, uint8_t rx)
{
     f00:	dc 01       	movw	r26, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:148
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
     f02:	54 96       	adiw	r26, 0x14	; 20
     f04:	1c 92       	st	X, r1
     f06:	54 97       	sbiw	r26, 0x14	; 20
     f08:	54 96       	adiw	r26, 0x14	; 20
     f0a:	8c 91       	ld	r24, X
     f0c:	54 97       	sbiw	r26, 0x14	; 20
     f0e:	82 30       	cpi	r24, 0x02	; 2
     f10:	a0 f4       	brcc	.+40     	; 0xf3a <UartClass::pins(unsigned char, unsigned char)+0x3a>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:150
  {
    if (tx == _hw_set[_pin_set].tx_pin && rx == _hw_set[_pin_set].rx_pin)
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	f9 01       	movw	r30, r18
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	ea 0f       	add	r30, r26
     f22:	fb 1f       	adc	r31, r27
     f24:	97 85       	ldd	r25, Z+15	; 0x0f
     f26:	96 13       	cpse	r25, r22
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <UartClass::pins(unsigned char, unsigned char)+0x30>
     f2a:	96 85       	ldd	r25, Z+14	; 0x0e
     f2c:	94 17       	cp	r25, r20
     f2e:	49 f0       	breq	.+18     	; 0xf42 <UartClass::pins(unsigned char, unsigned char)+0x42>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:148
// Public Methods //////////////////////////////////////////////////////////////

// Invoke this function before 'begin' to define the pins used
bool UartClass::pins(uint8_t tx, uint8_t rx)
{
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
     f30:	8f 5f       	subi	r24, 0xFF	; 255
     f32:	54 96       	adiw	r26, 0x14	; 20
     f34:	8c 93       	st	X, r24
     f36:	54 97       	sbiw	r26, 0x14	; 20
     f38:	e7 cf       	rjmp	.-50     	; 0xf08 <UartClass::pins(unsigned char, unsigned char)+0x8>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:156
    {
      // We are good, this set of pins is supported
      return true;
    }
  }
  _pin_set = 0; // Default to standard
     f3a:	54 96       	adiw	r26, 0x14	; 20
     f3c:	1c 92       	st	X, r1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:157
  return false;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:153
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
  {
    if (tx == _hw_set[_pin_set].tx_pin && rx == _hw_set[_pin_set].rx_pin)
    {
      // We are good, this set of pins is supported
      return true;
     f42:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:158
    }
  }
  _pin_set = 0; // Default to standard
  return false;
}
     f44:	08 95       	ret

00000f46 <UartClass::_tx_data_empty_irq()>:
_tx_data_empty_irq():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:89
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void UartClass::_tx_data_empty_irq(void)
{
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	fc 01       	movw	r30, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:91
  // Check if tx buffer already empty.
  if (_tx_buffer_head == _tx_buffer_tail)
     f4c:	90 8d       	ldd	r25, Z+24	; 0x18
     f4e:	81 8d       	ldd	r24, Z+25	; 0x19
     f50:	c4 85       	ldd	r28, Z+12	; 0x0c
     f52:	d5 85       	ldd	r29, Z+13	; 0x0d
     f54:	98 13       	cpse	r25, r24
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <UartClass::_tx_data_empty_irq()+0x1e>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:94
  {
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	8f 7d       	andi	r24, 0xDF	; 223
     f5c:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:122
    {
      CPUINT.LVL1VEC = _prev_lvl1_interrupt_vect;
      _hwserial_dre_interrupt_elevated = 0;
    }
  }
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:100
    return;
  }

  // There must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     f64:	a1 8d       	ldd	r26, Z+25	; 0x19
     f66:	ae 0f       	add	r26, r30
     f68:	bf 2f       	mov	r27, r31
     f6a:	b1 1d       	adc	r27, r1
     f6c:	a3 5a       	subi	r26, 0xA3	; 163
     f6e:	bf 4f       	sbci	r27, 0xFF	; 255
     f70:	2c 91       	ld	r18, X
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:101
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     f72:	81 8d       	ldd	r24, Z+25	; 0x19
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	8f 73       	andi	r24, 0x3F	; 63
     f7a:	99 27       	eor	r25, r25
     f7c:	81 8f       	std	Z+25, r24	; 0x19
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:106

  // clear the TXCIF flag -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  (*_hwserial_module).STATUS = USART_TXCIF_bm;
     f7e:	80 e4       	ldi	r24, 0x40	; 64
     f80:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:108

  (*_hwserial_module).TXDATAL = c;
     f82:	a4 85       	ldd	r26, Z+12	; 0x0c
     f84:	b5 85       	ldd	r27, Z+13	; 0x0d
     f86:	12 96       	adiw	r26, 0x02	; 2
     f88:	2c 93       	st	X, r18
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:110

  if (_tx_buffer_head == _tx_buffer_tail)
     f8a:	90 8d       	ldd	r25, Z+24	; 0x18
     f8c:	81 8d       	ldd	r24, Z+25	; 0x19
     f8e:	98 13       	cpse	r25, r24
     f90:	e6 cf       	rjmp	.-52     	; 0xf5e <UartClass::_tx_data_empty_irq()+0x18>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:113
  {
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     f92:	a4 85       	ldd	r26, Z+12	; 0x0c
     f94:	b5 85       	ldd	r27, Z+13	; 0x0d
     f96:	15 96       	adiw	r26, 0x05	; 5
     f98:	8c 91       	ld	r24, X
     f9a:	15 97       	sbiw	r26, 0x05	; 5
     f9c:	8f 7d       	andi	r24, 0xDF	; 223
     f9e:	15 96       	adiw	r26, 0x05	; 5
     fa0:	8c 93       	st	X, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:116

    //Take the DRE interrupt back no normal priority level if it has been elevated
    if (_hwserial_dre_interrupt_elevated)
     fa2:	83 8d       	ldd	r24, Z+27	; 0x1b
     fa4:	88 23       	and	r24, r24
     fa6:	d9 f2       	breq	.-74     	; 0xf5e <UartClass::_tx_data_empty_irq()+0x18>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:118
    {
      CPUINT.LVL1VEC = _prev_lvl1_interrupt_vect;
     fa8:	84 8d       	ldd	r24, Z+28	; 0x1c
     faa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:119
      _hwserial_dre_interrupt_elevated = 0;
     fae:	13 8e       	std	Z+27, r1	; 0x1b
     fb0:	d6 cf       	rjmp	.-84     	; 0xf5e <UartClass::_tx_data_empty_irq()+0x18>

00000fb2 <UartClass::_poll_tx_data_empty()>:
_poll_tx_data_empty():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:126
  }
}

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void)
{
     fb2:	dc 01       	movw	r26, r24
     fb4:	1c 96       	adiw	r26, 0x0c	; 12
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:127
  if ((!(SREG & CPU_I_bm)) || (!((*_hwserial_module).CTRLA & USART_DREIE_bm)))
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	07 fe       	sbrs	r0, 7
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <UartClass::_poll_tx_data_empty()+0x14>
     fc0:	25 81       	ldd	r18, Z+5	; 0x05
     fc2:	25 fd       	sbrc	r18, 5
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <UartClass::_poll_tx_data_empty()+0x1a>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:135
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.

    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm)
     fc6:	24 81       	ldd	r18, Z+4	; 0x04
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:137
    {
      _tx_data_empty_irq();
     fc8:	25 fd       	sbrc	r18, 5
     fca:	bd cf       	rjmp	.-134    	; 0xf46 <UartClass::_tx_data_empty_irq()>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:141
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
}
     fcc:	08 95       	ret

00000fce <UartClass::write(unsigned char)>:
write():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:336
  // If we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}

size_t UartClass::write(uint8_t c)
{
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:337
  _written = true;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	8d 8b       	std	Y+21, r24	; 0x15
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:343

  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective data rate at high (>
  // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
  if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm))
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	89 8d       	ldd	r24, Y+25	; 0x19
     fe4:	98 13       	cpse	r25, r24
     fe6:	1c c0       	rjmp	.+56     	; 0x1020 <UartClass::write(unsigned char)+0x52>
     fe8:	ac 85       	ldd	r26, Y+12	; 0x0c
     fea:	bd 85       	ldd	r27, Y+13	; 0x0d
     fec:	14 96       	adiw	r26, 0x04	; 4
     fee:	8c 91       	ld	r24, X
     ff0:	14 97       	sbiw	r26, 0x04	; 4
     ff2:	85 ff       	sbrs	r24, 5
     ff4:	15 c0       	rjmp	.+42     	; 0x1020 <UartClass::write(unsigned char)+0x52>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:345
  {
    (*_hwserial_module).TXDATAL = c;
     ff6:	12 96       	adiw	r26, 0x02	; 2
     ff8:	6c 93       	st	X, r22
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:346
    (*_hwserial_module).STATUS = USART_TXCIF_bm;
     ffa:	ac 85       	ldd	r26, Y+12	; 0x0c
     ffc:	bd 85       	ldd	r27, Y+13	; 0x0d
     ffe:	80 e4       	ldi	r24, 0x40	; 64
    1000:	14 96       	adiw	r26, 0x04	; 4
    1002:	8c 93       	st	X, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:350

    // Make sure data register empty interrupt is disabled to avoid
    // that the interrupt handler is called in this situation
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
    1004:	ec 85       	ldd	r30, Y+12	; 0x0c
    1006:	fd 85       	ldd	r31, Y+13	; 0x0d
    1008:	85 81       	ldd	r24, Z+5	; 0x05
    100a:	8f 7d       	andi	r24, 0xDF	; 223
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:380

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    100c:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:383

  return 1;
}
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:357
    return 1;
  }

  //Check if we are inside an ISR already (could be from by a source other than UART),
  // in which case the UART ISRs will be blocked.
  if (CPUINT.STATUS & CPUINT_LVL0EX_bm)
    1020:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f4111>
    1024:	80 ff       	sbrs	r24, 0
    1026:	08 c0       	rjmp	.+16     	; 0x1038 <UartClass::write(unsigned char)+0x6a>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:361
  {
    //Elevate the priority level of the Data Register Empty Interrupt vector
    //and copy whatever vector number that might be in the register already.
    _prev_lvl1_interrupt_vect = CPUINT.LVL1VEC;
    1028:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
    102c:	8c 8f       	std	Y+28, r24	; 0x1c
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:362
    CPUINT.LVL1VEC = _hwserial_dre_interrupt_vect_num;
    102e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1030:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:364

    _hwserial_dre_interrupt_elevated = 1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	8b 8f       	std	Y+27, r24	; 0x1b
    1038:	f6 2e       	mov	r15, r22
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:367
  }

  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    103a:	08 8d       	ldd	r16, Y+24	; 0x18
    103c:	10 e0       	ldi	r17, 0x00	; 0
    103e:	0f 5f       	subi	r16, 0xFF	; 255
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	0f 73       	andi	r16, 0x3F	; 63
    1044:	11 27       	eor	r17, r17
    1046:	e0 2e       	mov	r14, r16
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:371

  //If the output buffer is full, there's nothing for it other than to
  //wait for the interrupt handler to empty it a bit (or emulate interrupts)
  while (i == _tx_buffer_tail)
    1048:	89 8d       	ldd	r24, Y+25	; 0x19
    104a:	8e 11       	cpse	r24, r14
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:373
  {
    _poll_tx_data_empty();
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <UartClass::write(unsigned char)+0x86>
    104e:	ce 01       	movw	r24, r28
    1050:	b0 df       	rcall	.-160    	; 0xfb2 <UartClass::_poll_tx_data_empty()>
    1052:	fa cf       	rjmp	.-12     	; 0x1048 <UartClass::write(unsigned char)+0x7a>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:376
  }

  _tx_buffer[_tx_buffer_head] = c;
    1054:	e8 8d       	ldd	r30, Y+24	; 0x18
    1056:	ec 0f       	add	r30, r28
    1058:	fd 2f       	mov	r31, r29
    105a:	f1 1d       	adc	r31, r1
    105c:	e3 5a       	subi	r30, 0xA3	; 163
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	f0 82       	st	Z, r15
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:377
  _tx_buffer_head = i;
    1062:	08 8f       	std	Y+24, r16	; 0x18
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:380

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    1064:	ec 85       	ldd	r30, Y+12	; 0x0c
    1066:	fd 85       	ldd	r31, Y+13	; 0x0d
    1068:	85 81       	ldd	r24, Z+5	; 0x05
    106a:	80 62       	ori	r24, 0x20	; 32
    106c:	cf cf       	rjmp	.-98     	; 0x100c <UartClass::write(unsigned char)+0x3e>

0000106e <UartClass::flush()>:
flush():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:303
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void UartClass::flush()
{
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:307
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXCIF (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1072:	fc 01       	movw	r30, r24
    1074:	25 89       	ldd	r18, Z+21	; 0x15
    1076:	22 23       	and	r18, r18
    1078:	c1 f0       	breq	.+48     	; 0x10aa <UartClass::flush()+0x3c>
    107a:	ec 01       	movw	r28, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:314
    return;
  }

  //Check if we are inside an ISR already (e.g. connected to a different peripheral then UART), in which case the UART ISRs will not be called.
  //Temporarily elevate the DRE interrupt to allow it to run.
  if (CPUINT.STATUS & CPUINT_LVL0EX_bm)
    107c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f4111>
    1080:	80 ff       	sbrs	r24, 0
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <UartClass::flush()+0x26>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:318
  {
    //Elevate the priority level of the Data Register Empty Interrupt vector
    //and copy whatever vector number that might be in the register already.
    _prev_lvl1_interrupt_vect = CPUINT.LVL1VEC;
    1084:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
    1088:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:319
    CPUINT.LVL1VEC = _hwserial_dre_interrupt_vect_num;
    108a:	82 8d       	ldd	r24, Z+26	; 0x1a
    108c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:321

    _hwserial_dre_interrupt_elevated = 1;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	83 8f       	std	Z+27, r24	; 0x1b
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:325
  }

  // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
  while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm)))
    1094:	ec 85       	ldd	r30, Y+12	; 0x0c
    1096:	fd 85       	ldd	r31, Y+13	; 0x0d
    1098:	85 81       	ldd	r24, Z+5	; 0x05
    109a:	85 fd       	sbrc	r24, 5
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <UartClass::flush()+0x36>
    109e:	84 81       	ldd	r24, Z+4	; 0x04
    10a0:	86 fd       	sbrc	r24, 6
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:329
  {
    // If interrupts are globally disabled or the and DR empty interrupt is disabled,
    // poll the "data register empty" interrupt flag to prevent deadlock
    _poll_tx_data_empty();
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <UartClass::flush()+0x3c>
    10a4:	ce 01       	movw	r24, r28
    10a6:	85 df       	rcall	.-246    	; 0xfb2 <UartClass::_poll_tx_data_empty()>
    10a8:	f5 cf       	rjmp	.-22     	; 0x1094 <UartClass::flush()+0x26>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:333
  }
  // If we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <serialEventRun()>:
serialEventRun():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	89 2b       	or	r24, r25
    10b6:	49 f0       	breq	.+18     	; 0x10ca <serialEventRun()+0x1a>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	89 2b       	or	r24, r25
    10be:	29 f0       	breq	.+10     	; 0x10ca <serialEventRun()+0x1a>
    10c0:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    10c4:	81 11       	cpse	r24, r1
    10c6:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	89 2b       	or	r24, r25
    10d0:	49 f0       	breq	.+18     	; 0x10e4 <serialEventRun()+0x34>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	89 2b       	or	r24, r25
    10d8:	29 f0       	breq	.+10     	; 0x10e4 <serialEventRun()+0x34>
    10da:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    10de:	81 11       	cpse	r24, r1
    10e0:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:72
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	89 2b       	or	r24, r25
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <serialEventRun()+0x44>
    10ec:	e7 de       	rcall	.-562    	; 0xebc <Serial2_available()>
    10ee:	81 11       	cpse	r24, r1
    10f0:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:75
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	89 2b       	or	r24, r25
    10fa:	49 f0       	breq	.+18     	; 0x110e <serialEventRun()+0x5e>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	89 2b       	or	r24, r25
    1102:	29 f0       	breq	.+10     	; 0x110e <serialEventRun()+0x5e>
    1104:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    1108:	81 11       	cpse	r24, r1
    110a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:77
#endif
}
    110e:	08 95       	ret

00001110 <UartClass::operator bool()>:
operator 3():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.h:174
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() { return true; }
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	08 95       	ret

00001114 <pinMode.part.1>:
pinMode.part.1():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:29

#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:31
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	fc 01       	movw	r30, r24
    111c:	ee 54       	subi	r30, 0x4E	; 78
    111e:	f7 44       	sbci	r31, 0x47	; 71
    1120:	20 81       	ld	r18, Z
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:33

  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP))
    1122:	2f 3f       	cpi	r18, 0xFF	; 255
    1124:	69 f0       	breq	.+26     	; 0x1140 <pinMode.part.1+0x2c>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:36
    return;

  PORT_t *port = digitalPinToPortStruct(pin);
    1126:	fc 01       	movw	r30, r24
    1128:	e7 57       	subi	r30, 0x77	; 119
    112a:	f7 44       	sbci	r31, 0x47	; 71
    112c:	a0 81       	ld	r26, Z
    112e:	30 e2       	ldi	r19, 0x20	; 32
    1130:	a3 9f       	mul	r26, r19
    1132:	d0 01       	movw	r26, r0
    1134:	11 24       	eor	r1, r1
    1136:	bc 5f       	subi	r27, 0xFC	; 252
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:40
  if (port == NULL)
    return;

  if (mode == OUTPUT)
    1138:	61 30       	cpi	r22, 0x01	; 1
    113a:	29 f4       	brne	.+10     	; 0x1146 <pinMode.part.1+0x32>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:43
  {
    /* Configure direction as output */
    port->DIRSET = bit_mask;
    113c:	11 96       	adiw	r26, 0x01	; 1
    113e:	2c 93       	st	X, r18
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:48
    port->DIRSET = bit_mask;
  }
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
    1146:	80 5a       	subi	r24, 0xA0	; 160
    1148:	97 44       	sbci	r25, 0x47	; 71
    114a:	ec 01       	movw	r28, r24
    114c:	e8 81       	ld	r30, Y
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:50
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
    114e:	ef 3f       	cpi	r30, 0xFF	; 255
    1150:	81 f0       	breq	.+32     	; 0x1172 <pinMode.part.1+0x5e>
    1152:	cd 01       	movw	r24, r26
    1154:	40 96       	adiw	r24, 0x10	; 16
    1156:	e8 0f       	add	r30, r24
    1158:	f9 2f       	mov	r31, r25
    115a:	f1 1d       	adc	r31, r1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:53

    /* Save state */
    uint8_t status = SREG;
    115c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:54
    cli();
    115e:	f8 94       	cli
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:57

    /* Configure direction as input */
    port->DIRCLR = bit_mask;
    1160:	12 96       	adiw	r26, 0x02	; 2
    1162:	2c 93       	st	X, r18
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:63

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
    1164:	80 81       	ld	r24, Z
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:60

    /* Configure direction as input */
    port->DIRCLR = bit_mask;

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
    1166:	62 30       	cpi	r22, 0x02	; 2
    1168:	39 f4       	brne	.+14     	; 0x1178 <pinMode.part.1+0x64>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:63
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
    116a:	88 60       	ori	r24, 0x08	; 8
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
    116c:	80 83       	st	Z, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:73
    }

    /* Restore state */
    SREG = status;
    116e:	9f bf       	out	0x3f, r25	; 63
    1170:	e7 cf       	rjmp	.-50     	; 0x1140 <pinMode.part.1+0x2c>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:50
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	e0 e0       	ldi	r30, 0x00	; 0
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
    1176:	f2 cf       	rjmp	.-28     	; 0x115c <pinMode.part.1+0x48>
    1178:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
    117a:	f8 cf       	rjmp	.-16     	; 0x116c <pinMode.part.1+0x58>

0000117c <pinMode>:
pinMode():
    117c:	89 32       	cpi	r24, 0x29	; 41
    117e:	08 f4       	brcc	.+2      	; 0x1182 <pinMode+0x6>
    1180:	c9 cf       	rjmp	.-110    	; 0x1114 <pinMode.part.1>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
    1182:	08 95       	ret

00001184 <turnOffPWM.part.0>:
turnOffPWM.part.0():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	fc 01       	movw	r30, r24
    1188:	e9 5c       	subi	r30, 0xC9	; 201
    118a:	f7 44       	sbci	r31, 0x47	; 71
    118c:	e0 81       	ld	r30, Z
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:98
  if (timer == NOT_ON_TIMER)
    118e:	ee 23       	and	r30, r30
    1190:	19 f1       	breq	.+70     	; 0x11d8 <turnOffPWM.part.0+0x54>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:104
    return;

  uint8_t bit_pos;
  TCB_t *timerB;

  switch (timer)
    1192:	e1 30       	cpi	r30, 0x01	; 1
    1194:	21 f0       	breq	.+8      	; 0x119e <turnOffPWM.part.0+0x1a>
    1196:	00 f1       	brcs	.+64     	; 0x11d8 <turnOffPWM.part.0+0x54>
    1198:	e6 30       	cpi	r30, 0x06	; 6
    119a:	a8 f0       	brcs	.+42     	; 0x11c6 <turnOffPWM.part.0+0x42>
    119c:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:109
  {
    /* TCA0 */
    case TIMERA0:
      /* Bit position will give output channel */
      bit_pos = digitalPinToBitPosition(pin);
    119e:	80 5a       	subi	r24, 0xA0	; 160
    11a0:	97 44       	sbci	r25, 0x47	; 71
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 81       	ld	r18, Z
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:112

      /* Disable corresponding channel */
      if (bit_pos >= 3) ++bit_pos; /* Upper 3 bits are shifted by 1 */
    11a6:	23 30       	cpi	r18, 0x03	; 3
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <turnOffPWM.part.0+0x28>
    11aa:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:113
      TCA0.SPLIT.CTRLB &= ~(1 << (TCA_SPLIT_LCMP0EN_bp + bit_pos));
    11ac:	30 91 01 0a 	lds	r19, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <turnOffPWM.part.0+0x34>
    11b6:	88 0f       	add	r24, r24
    11b8:	2a 95       	dec	r18
    11ba:	ea f7       	brpl	.-6      	; 0x11b6 <turnOffPWM.part.0+0x32>
    11bc:	80 95       	com	r24
    11be:	83 23       	and	r24, r19
    11c0:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    11c4:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:123
    case TIMERB0:
    case TIMERB1:
    case TIMERB2:
    case TIMERB3:

      timerB = (TCB_t *)&TCB0 + (timer - TIMERB0);
    11c6:	80 e1       	ldi	r24, 0x10	; 16
    11c8:	e8 9f       	mul	r30, r24
    11ca:	f0 01       	movw	r30, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	e0 5a       	subi	r30, 0xA0	; 160
    11d0:	f5 4f       	sbci	r31, 0xF5	; 245
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:126

      /* Disable TCB compare channel */
      timerB->CTRLB &= ~(TCB_CCMPEN_bm);
    11d2:	81 81       	ldd	r24, Z+1	; 0x01
    11d4:	8f 7e       	andi	r24, 0xEF	; 239
    11d6:	81 83       	std	Z+1, r24	; 0x01
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:132

      break;
    default:
      break;
  }
}
    11d8:	08 95       	ret

000011da <digitalWrite.part.2>:
digitalWrite.part.2():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:134

void digitalWrite(uint8_t pin, uint8_t val)
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:137
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    11e2:	c8 2f       	mov	r28, r24
    11e4:	d0 e0       	ldi	r29, 0x00	; 0
    11e6:	fe 01       	movw	r30, r28
    11e8:	ee 54       	subi	r30, 0x4E	; 78
    11ea:	f7 44       	sbci	r31, 0x47	; 71
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:138
  if (bit_mask == NOT_A_PIN)
    11ec:	00 81       	ld	r16, Z
    11ee:	0f 3f       	cpi	r16, 0xFF	; 255
    11f0:	99 f0       	breq	.+38     	; 0x1218 <digitalWrite.part.2+0x3e>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
    11f2:	16 2f       	mov	r17, r22
turnOffPWM():
    11f4:	89 32       	cpi	r24, 0x29	; 41
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <digitalWrite.part.2+0x20>
    11f8:	c5 df       	rcall	.-118    	; 0x1184 <turnOffPWM.part.0>
digitalWrite.part.2():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:150
  turnOffPWM(pin);

  /* Assuming the direction is already output !! */

  /* Get port */
  PORT_t *port = digitalPinToPortStruct(pin);
    11fa:	fe 01       	movw	r30, r28
    11fc:	e7 57       	subi	r30, 0x77	; 119
    11fe:	f7 44       	sbci	r31, 0x47	; 71
    1200:	e0 81       	ld	r30, Z
    1202:	80 e2       	ldi	r24, 0x20	; 32
    1204:	e8 9f       	mul	r30, r24
    1206:	f0 01       	movw	r30, r0
    1208:	11 24       	eor	r1, r1
    120a:	fc 5f       	subi	r31, 0xFC	; 252
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:153

  /* Output direction */
  if (port->DIR & bit_mask)
    120c:	80 81       	ld	r24, Z
    120e:	80 23       	and	r24, r16
    1210:	51 f0       	breq	.+20     	; 0x1226 <digitalWrite.part.2+0x4c>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:156
  {
    /* Set output to value */
    if (val == LOW)
    1212:	11 11       	cpse	r17, r1
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <digitalWrite.part.2+0x48>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:158
    { /* If LOW */
      port->OUTCLR = bit_mask;
    1216:	06 83       	std	Z+6, r16	; 0x06
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:203
    }

    /* Restore system status */
    SREG = status;
  }
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:167
      port->OUTTGL = bit_mask;
      /* If HIGH OR  > TOGGLE  */
    }
    else
    {
      port->OUTSET = bit_mask;
    1222:	05 83       	std	Z+5, r16	; 0x05
    1224:	f9 cf       	rjmp	.-14     	; 0x1218 <digitalWrite.part.2+0x3e>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:180
    pull up is enabled if this function is called.
    Should we purposely implement this side effect?
    */

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    1226:	c0 5a       	subi	r28, 0xA0	; 160
    1228:	d7 44       	sbci	r29, 0x47	; 71
    122a:	88 81       	ld	r24, Y
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:183

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
    122c:	30 97       	sbiw	r30, 0x00	; 0
    122e:	71 f0       	breq	.+28     	; 0x124c <digitalWrite.part.2+0x72>
    1230:	8f 3f       	cpi	r24, 0xFF	; 255
    1232:	61 f0       	breq	.+24     	; 0x124c <digitalWrite.part.2+0x72>
    1234:	70 96       	adiw	r30, 0x10	; 16
    1236:	e8 0f       	add	r30, r24
    1238:	f1 1d       	adc	r31, r1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:186

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    123a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:187
    cli();
    123c:	f8 94       	cli
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:192

    if (val == LOW)
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    123e:	80 81       	ld	r24, Z
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:189

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    cli();

    if (val == LOW)
    1240:	11 11       	cpse	r17, r1
    1242:	07 c0       	rjmp	.+14     	; 0x1252 <digitalWrite.part.2+0x78>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:192
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    1244:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:197
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
    1246:	80 83       	st	Z, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:201
    }

    /* Restore system status */
    SREG = status;
    1248:	9f bf       	out	0x3f, r25	; 63
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:183

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
    124a:	e6 cf       	rjmp	.-52     	; 0x1218 <digitalWrite.part.2+0x3e>
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	e0 e0       	ldi	r30, 0x00	; 0
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:197
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
    1250:	f4 cf       	rjmp	.-24     	; 0x123a <digitalWrite.part.2+0x60>
    1252:	88 60       	ori	r24, 0x08	; 8
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:137
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    1254:	f8 cf       	rjmp	.-16     	; 0x1246 <digitalWrite.part.2+0x6c>

00001256 <digitalWrite>:
digitalWrite():
    1256:	89 32       	cpi	r24, 0x29	; 41
    1258:	08 f4       	brcc	.+2      	; 0x125c <digitalWrite+0x6>
    125a:	bf cf       	rjmp	.-130    	; 0x11da <digitalWrite.part.2>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:203
    }

    /* Restore system status */
    SREG = status;
  }
}
    125c:	08 95       	ret

0000125e <OneButton::OneButton(int, int) [clone .constprop.32]>:
__base_ctor ():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:15

#include "OneButton.h"

// ----- Initialization and Default Values -----

OneButton::OneButton(int pin, int activeLow)
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
    1268:	16 2f       	mov	r17, r22
    126a:	07 2f       	mov	r16, r23
    126c:	82 e3       	ldi	r24, 0x32	; 50
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:17
{
  pinMode(pin, INPUT);      // sets the MenuPin as input
    1272:	9f 83       	std	Y+7, r25	; 0x07
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	81 2f       	mov	r24, r17
    1278:	81 df       	rcall	.-254    	; 0x117c <pinMode>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:18
  _pin = pin;
    127a:	18 83       	st	Y, r17
    127c:	09 83       	std	Y+1, r16	; 0x01
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:20

  _clickTicks = 600;        // number of millisec that have to pass by before a click is detected.
    127e:	88 e5       	ldi	r24, 0x58	; 88
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	8a 83       	std	Y+2, r24	; 0x02
    1284:	9b 83       	std	Y+3, r25	; 0x03
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:21
  _pressTicks = 1000;       // number of millisec that have to pass by before a long button press is detected.
    1286:	88 ee       	ldi	r24, 0xE8	; 232
    1288:	93 e0       	ldi	r25, 0x03	; 3
    128a:	8c 83       	std	Y+4, r24	; 0x04
    128c:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:23
 
  _state = 0; // starting with state 0: waiting for button to be pressed
    128e:	19 8e       	std	Y+25, r1	; 0x19
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:24
  _isLongPressed = false;  // Keep track of long press state
    1290:	1a 8e       	std	Y+26, r1	; 0x1a
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:28

  if (activeLow) {
    // button connects ground to the pin when pressed.
    _buttonReleased = HIGH; // notPressed
    1292:	1c 86       	std	Y+12, r1	; 0x0c
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:29
    _buttonPressed = LOW;
    129a:	99 87       	std	Y+9, r25	; 0x09
    129c:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:30
    digitalWrite(pin, HIGH);   // turn on pullUp resistor
    129e:	1b 86       	std	Y+11, r1	; 0x0b
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	81 2f       	mov	r24, r17
    12a4:	d8 df       	rcall	.-80     	; 0x1256 <digitalWrite>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:39
    _buttonReleased = LOW;
    _buttonPressed = HIGH;
  } // if


  _doubleClickFunc = NULL;
    12a6:	1f 86       	std	Y+15, r1	; 0x0f
    12a8:	18 8a       	std	Y+16, r1	; 0x10
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:40
  _pressFunc = NULL;
    12aa:	19 8a       	std	Y+17, r1	; 0x11
    12ac:	1a 8a       	std	Y+18, r1	; 0x12
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:41
  _longPressStartFunc = NULL;
    12ae:	1b 8a       	std	Y+19, r1	; 0x13
    12b0:	1c 8a       	std	Y+20, r1	; 0x14
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:42
  _longPressStopFunc = NULL;
    12b2:	1d 8a       	std	Y+21, r1	; 0x15
    12b4:	1e 8a       	std	Y+22, r1	; 0x16
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:43
  _duringLongPressFunc = NULL;
    12b6:	1f 8a       	std	Y+23, r1	; 0x17
    12b8:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:44
} // OneButton
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	08 95       	ret

000012c4 <UartClass::begin(unsigned long, unsigned int)>:
begin():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:180
    return false;
  }
}

void UartClass::begin(unsigned long baud, uint16_t config)
{
    12c4:	af 92       	push	r10
    12c6:	bf 92       	push	r11
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
    12da:	6a 01       	movw	r12, r20
    12dc:	7b 01       	movw	r14, r22
    12de:	a2 2e       	mov	r10, r18
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:183
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_written)
    12e0:	8d 89       	ldd	r24, Y+21	; 0x15
    12e2:	88 23       	and	r24, r24
    12e4:	39 f0       	breq	.+14     	; 0x12f4 <UartClass::begin(unsigned long, unsigned int)+0x30>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:185
  {
    this->end();
    12e6:	e8 81       	ld	r30, Y
    12e8:	f9 81       	ldd	r31, Y+1	; 0x01
    12ea:	06 88       	ldd	r0, Z+22	; 0x16
    12ec:	f7 89       	ldd	r31, Z+23	; 0x17
    12ee:	e0 2d       	mov	r30, r0
    12f0:	ce 01       	movw	r24, r28
    12f2:	09 95       	icall
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:188
  }

  struct UartPinSet *set = &_hw_set[_pin_set];
    12f4:	0c 89       	ldd	r16, Y+20	; 0x14
    12f6:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:193

  int32_t baud_setting = 0;

  //Make sure global interrupts are disabled during initialization
  uint8_t oldSREG = SREG;
    12f8:	bf b6       	in	r11, 0x3f	; 63
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:194
  cli();
    12fa:	f8 94       	cli
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:196

  baud_setting = (((8 * F_CPU) / baud) + 1) / 2;
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e2       	ldi	r23, 0x20	; 32
    1300:	81 ea       	ldi	r24, 0xA1	; 161
    1302:	97 e0       	ldi	r25, 0x07	; 7
    1304:	a7 01       	movw	r20, r14
    1306:	96 01       	movw	r18, r12
    1308:	0e 94 6f 3b 	call	0x76de	; 0x76de <__udivmodsi4>
    130c:	69 01       	movw	r12, r18
    130e:	7a 01       	movw	r14, r20
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	c8 1a       	sub	r12, r24
    1314:	d8 0a       	sbc	r13, r24
    1316:	e8 0a       	sbc	r14, r24
    1318:	f8 0a       	sbc	r15, r24
    131a:	f6 94       	lsr	r15
    131c:	e7 94       	ror	r14
    131e:	d7 94       	ror	r13
    1320:	c7 94       	ror	r12
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:198
  // Disable CLK2X
  (*_hwserial_module).CTRLB &= (~USART_RXMODE_CLK2X_gc);
    1322:	ec 85       	ldd	r30, Y+12	; 0x0c
    1324:	fd 85       	ldd	r31, Y+13	; 0x0d
    1326:	86 81       	ldd	r24, Z+6	; 0x06
    1328:	8d 7f       	andi	r24, 0xFD	; 253
    132a:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:199
  (*_hwserial_module).CTRLB |= USART_RXMODE_NORMAL_gc;
    132c:	ec 85       	ldd	r30, Y+12	; 0x0c
    132e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1330:	86 81       	ldd	r24, Z+6	; 0x06
    1332:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:201

  _written = false;
    1334:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:210
// Use error compensation if internal oscillator is used
#if !defined(USE_EXTERNAL_OSCILLATOR)
#if F_CPU == 20000000L
  sigrow_val = SIGROW.OSC20ERR5V;
#else
  sigrow_val = SIGROW.OSC16ERR5V;
    1336:	a0 91 23 11 	lds	r26, 0x1123	; 0x801123 <__TEXT_REGION_LENGTH__+0x7f5123>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:214
#endif
#endif

  baud_setting += (baud_setting * sigrow_val) / 1024;
    133a:	0a 2e       	mov	r0, r26
    133c:	00 0c       	add	r0, r0
    133e:	bb 0b       	sbc	r27, r27
    1340:	a7 01       	movw	r20, r14
    1342:	96 01       	movw	r18, r12
    1344:	0e 94 c3 3b 	call	0x7786	; 0x7786 <__mulshisi3>
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	34 e0       	ldi	r19, 0x04	; 4
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	0e 94 91 3b 	call	0x7722	; 0x7722 <__divmodsi4>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:217

  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
    1354:	ec 85       	ldd	r30, Y+12	; 0x0c
    1356:	fd 85       	ldd	r31, Y+13	; 0x0d
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:214
#else
  sigrow_val = SIGROW.OSC16ERR5V;
#endif
#endif

  baud_setting += (baud_setting * sigrow_val) / 1024;
    1358:	c2 0e       	add	r12, r18
    135a:	d3 1e       	adc	r13, r19
    135c:	e4 1e       	adc	r14, r20
    135e:	f5 1e       	adc	r15, r21
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:217

  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
    1360:	c0 86       	std	Z+8, r12	; 0x08
    1362:	d1 86       	std	Z+9, r13	; 0x09
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:220

  // Set USART mode of operation
  (*_hwserial_module).CTRLC = config;
    1364:	ec 85       	ldd	r30, Y+12	; 0x0c
    1366:	fd 85       	ldd	r31, Y+13	; 0x0d
    1368:	a7 82       	std	Z+7, r10	; 0x07
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:223

  // Enable transmitter and receiver
  (*_hwserial_module).CTRLB |= (USART_RXEN_bm | USART_TXEN_bm);
    136a:	ec 85       	ldd	r30, Y+12	; 0x0c
    136c:	fd 85       	ldd	r31, Y+13	; 0x0d
    136e:	86 81       	ldd	r24, Z+6	; 0x06
    1370:	80 6c       	ori	r24, 0xC0	; 192
    1372:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:225

  (*_hwserial_module).CTRLA |= USART_RXCIE_bm;
    1374:	ec 85       	ldd	r30, Y+12	; 0x0c
    1376:	fd 85       	ldd	r31, Y+13	; 0x0d
    1378:	85 81       	ldd	r24, Z+5	; 0x05
    137a:	80 68       	ori	r24, 0x80	; 128
    137c:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:228

  // Let PORTMUX point to alternative UART pins as requested
  PORTMUX.USARTROUTEA = set->mux | (PORTMUX.USARTROUTEA & ~_hw_set[1].mux);
    137e:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
    1382:	8b 89       	ldd	r24, Y+19	; 0x13
    1384:	80 95       	com	r24
    1386:	89 23       	and	r24, r25
    1388:	98 01       	movw	r18, r16
    138a:	22 0f       	add	r18, r18
    138c:	33 1f       	adc	r19, r19
    138e:	02 0f       	add	r16, r18
    1390:	13 1f       	adc	r17, r19
    1392:	c0 0f       	add	r28, r16
    1394:	d1 1f       	adc	r29, r17
    1396:	98 89       	ldd	r25, Y+16	; 0x10
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:231

  // Set pin state for swapped UART pins
  pinMode(set->rx_pin, INPUT_PULLUP);
    1398:	89 2b       	or	r24, r25
    139a:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
    139e:	62 e0       	ldi	r22, 0x02	; 2
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:232
  digitalWrite(set->tx_pin, HIGH);
    13a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    13a2:	ec de       	rcall	.-552    	; 0x117c <pinMode>
    13a4:	61 e0       	ldi	r22, 0x01	; 1
    13a6:	8f 85       	ldd	r24, Y+15	; 0x0f
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:233
  pinMode(set->tx_pin, OUTPUT);
    13a8:	56 df       	rcall	.-340    	; 0x1256 <digitalWrite>
    13aa:	61 e0       	ldi	r22, 0x01	; 1
    13ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ae:	e6 de       	rcall	.-564    	; 0x117c <pinMode>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/UART.cpp:237

  // Restore SREG content
  SREG = oldSREG;
}
    13b0:	bf be       	out	0x3f, r11	; 63
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:490

void Bclass :: ALL_LED_OFF()
    13c0:	cf 90       	pop	r12
    13c2:	bf 90       	pop	r11
    13c4:	af 90       	pop	r10
    13c6:	08 95       	ret

000013c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>:
digitalWrite():
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	8a e1       	ldi	r24, 0x1A	; 26
    13cc:	06 df       	rcall	.-500    	; 0x11da <digitalWrite.part.2>
    13ce:	61 e0       	ldi	r22, 0x01	; 1
    13d0:	8d e1       	ldi	r24, 0x1D	; 29
    13d2:	03 df       	rcall	.-506    	; 0x11da <digitalWrite.part.2>
    13d4:	61 e0       	ldi	r22, 0x01	; 1
    13d6:	8c e1       	ldi	r24, 0x1C	; 28
    13d8:	00 df       	rcall	.-512    	; 0x11da <digitalWrite.part.2>
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	8b e1       	ldi	r24, 0x1B	; 27
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:227
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
}

uint8_t digitalRead(uint8_t pin)
    13de:	fd ce       	rjmp	.-518    	; 0x11da <digitalWrite.part.2>

000013e0 <digitalRead.part.3>:
digitalRead.part.3():
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:230
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    13e4:	cf 93       	push	r28
    13e6:	08 2f       	mov	r16, r24
    13e8:	10 e0       	ldi	r17, 0x00	; 0
    13ea:	f8 01       	movw	r30, r16
    13ec:	ee 54       	subi	r30, 0x4E	; 78
    13ee:	f7 44       	sbci	r31, 0x47	; 71
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:231
  if (bit_mask == NOT_A_PIN)
    13f0:	c0 81       	ld	r28, Z
    13f2:	cf 3f       	cpi	r28, 0xFF	; 255
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
    13f4:	81 f0       	breq	.+32     	; 0x1416 <digitalRead.part.3+0x36>
turnOffPWM():
    13f6:	89 32       	cpi	r24, 0x29	; 41
    13f8:	08 f4       	brcc	.+2      	; 0x13fc <digitalRead.part.3+0x1c>
    13fa:	c4 de       	rcall	.-632    	; 0x1184 <turnOffPWM.part.0>
digitalRead.part.3():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:239
  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  turnOffPWM(pin);

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);
    13fc:	f8 01       	movw	r30, r16
    13fe:	e7 57       	subi	r30, 0x77	; 119
    1400:	f7 44       	sbci	r31, 0x47	; 71
    1402:	e0 81       	ld	r30, Z
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	e8 9f       	mul	r30, r24
    1408:	f0 01       	movw	r30, r0
    140a:	11 24       	eor	r1, r1
    140c:	fc 5f       	subi	r31, 0xFC	; 252
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:242

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask)
    140e:	80 85       	ldd	r24, Z+8	; 0x08
    1410:	c8 23       	and	r28, r24
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	09 f4       	brne	.+2      	; 0x1418 <digitalRead.part.3+0x38>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:232
uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if (bit_mask == NOT_A_PIN)
    return LOW;
    1416:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:248
    return HIGH;
  else
    return LOW;

  return LOW;
}
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <micros>:
micros():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:103
{
  uint32_t m;
  uint16_t t;

  /* Save current state and disable interrupts */
  uint8_t status = SREG;
    1420:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:104
  cli();
    1422:	f8 94       	cli
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:107

  /* Get current number of millis (i.e. overflows) and timer count */
  m = timer_millis;
    1424:	20 91 45 28 	lds	r18, 0x2845	; 0x802845 <timer_millis>
    1428:	30 91 46 28 	lds	r19, 0x2846	; 0x802846 <timer_millis+0x1>
    142c:	40 91 47 28 	lds	r20, 0x2847	; 0x802847 <timer_millis+0x2>
    1430:	50 91 48 28 	lds	r21, 0x2848	; 0x802848 <timer_millis+0x3>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:108
  t = _timer->CNT;
    1434:	e0 91 aa 0a 	lds	r30, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
    1438:	f0 91 ab 0a 	lds	r31, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:112

  /* If the timer overflow flag is raised, we just missed it,
  increment to account for it, & read new ticks */
  if (_timer->INTFLAGS & TCB_CAPT_bm)
    143c:	90 91 a6 0a 	lds	r25, 0x0AA6	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
    1440:	90 ff       	sbrs	r25, 0
    1442:	08 c0       	rjmp	.+16     	; 0x1454 <micros+0x34>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:114
  {
    m++;
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	4f 4f       	sbci	r20, 0xFF	; 255
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:115
    t = _timer->CNT;
    144c:	e0 91 aa 0a 	lds	r30, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
    1450:	f0 91 ab 0a 	lds	r31, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:119
  }

  // Restore SREG
  SREG = status;
    1454:	8f bf       	out	0x3f, r24	; 63
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:125

#if (F_CPU == 20000000L)
  t = t >> 4;
  return m * 1000 + (t - (t >> 2) + (t >> 4) - (t >> 6));
#elif (F_CPU == 16000000L)
  return m * 1000 + (t >> 4);
    1456:	a8 ee       	ldi	r26, 0xE8	; 232
    1458:	b3 e0       	ldi	r27, 0x03	; 3
    145a:	0e 94 b9 3b 	call	0x7772	; 0x7772 <__muluhisi3>
    145e:	24 e0       	ldi	r18, 0x04	; 4
    1460:	f6 95       	lsr	r31
    1462:	e7 95       	ror	r30
    1464:	2a 95       	dec	r18
    1466:	e1 f7       	brne	.-8      	; 0x1460 <micros+0x40>
    1468:	6e 0f       	add	r22, r30
    146a:	7f 1f       	adc	r23, r31
    146c:	81 1d       	adc	r24, r1
    146e:	91 1d       	adc	r25, r1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:143
#elif (F_CPU == 1000000L)
  return m * 1000 + t;
#else
  return 0;
#endif
}
    1470:	08 95       	ret

00001472 <millis>:
millis():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:87
{
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer_millis)
  uint8_t status = SREG;
    1472:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:88
  cli();
    1474:	f8 94       	cli
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:90

  m = timer_millis;
    1476:	60 91 45 28 	lds	r22, 0x2845	; 0x802845 <timer_millis>
    147a:	70 91 46 28 	lds	r23, 0x2846	; 0x802846 <timer_millis+0x1>
    147e:	80 91 47 28 	lds	r24, 0x2847	; 0x802847 <timer_millis+0x2>
    1482:	90 91 48 28 	lds	r25, 0x2848	; 0x802848 <timer_millis+0x3>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:92

  SREG = status;
    1486:	2f bf       	out	0x3f, r18	; 63
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:95

  return m;
}
    1488:	08 95       	ret

0000148a <Bclass::PID_callingg() [clone .constprop.44]>:
PID_callingg():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:113
{
   myPID.Compute();  
}


void Bclass ::PID_callingg()
    148a:	4f 92       	push	r4
    148c:	5f 92       	push	r5
    148e:	6f 92       	push	r6
    1490:	7f 92       	push	r7
    1492:	8f 92       	push	r8
    1494:	9f 92       	push	r9
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	2c 97       	sbiw	r28, 0x0c	; 12
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <TEMP_DEG>
    14b4:	90 91 13 28 	lds	r25, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    14b8:	a0 91 14 28 	lds	r26, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    14bc:	b0 91 15 28 	lds	r27, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	9e 83       	std	Y+6, r25	; 0x06
    14c4:	af 83       	std	Y+7, r26	; 0x07
    14c6:	b8 87       	std	Y+8, r27	; 0x08
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:115
{
  if(!LONG_PRESS)    PID_INPUT = TEMP_DEG;
    14c8:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
    14cc:	81 11       	cpse	r24, r1
    14ce:	cc c1       	rjmp	.+920    	; 0x1868 <__DATA_REGION_LENGTH__+0x68>
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	af 81       	ldd	r26, Y+7	; 0x07
    14d6:	b8 85       	ldd	r27, Y+8	; 0x08
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:116
  else               PID_INPUT = TEMP_DEG_RAW;
    14d8:	80 93 3c 2a 	sts	0x2A3C, r24	; 0x802a3c <PID_INPUT>
    14dc:	90 93 3d 2a 	sts	0x2A3D, r25	; 0x802a3d <PID_INPUT+0x1>
    14e0:	a0 93 3e 2a 	sts	0x2A3E, r26	; 0x802a3e <PID_INPUT+0x2>
    14e4:	b0 93 3f 2a 	sts	0x2A3F, r27	; 0x802a3f <PID_INPUT+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:129
//  else                                     myPID.SetTunings(consKp, consKi, consKd); 
//  
//  if((PID_SETPOINT - PID_INPUT) > 1)       myPID.SetTunings(Kp, Ki, Kd);

   
    if( PID_SETPOINT >= 0  &&  PID_SETPOINT <= 160 ) {Kp=15, Ki=0.050, Kd=80;}  //Kp=15, Ki=0.040, Kd=80;
    14e8:	c0 90 34 2a 	lds	r12, 0x2A34	; 0x802a34 <PID_SETPOINT>
    14ec:	d0 90 35 2a 	lds	r13, 0x2A35	; 0x802a35 <PID_SETPOINT+0x1>
    14f0:	e0 90 36 2a 	lds	r14, 0x2A36	; 0x802a36 <PID_SETPOINT+0x2>
    14f4:	f0 90 37 2a 	lds	r15, 0x2A37	; 0x802a37 <PID_SETPOINT+0x3>
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	c7 01       	movw	r24, r14
    1500:	b6 01       	movw	r22, r12
    1502:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    1506:	87 fd       	sbrc	r24, 7
    1508:	b8 c1       	rjmp	.+880    	; 0x187a <__DATA_REGION_LENGTH__+0x7a>
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e2       	ldi	r20, 0x20	; 32
    1510:	53 e4       	ldi	r21, 0x43	; 67
    1512:	c7 01       	movw	r24, r14
    1514:	b6 01       	movw	r22, r12
    1516:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    151a:	18 16       	cp	r1, r24
    151c:	0c f4       	brge	.+2      	; 0x1520 <Bclass::PID_callingg() [clone .constprop.44]+0x96>
    151e:	ad c1       	rjmp	.+858    	; 0x187a <__DATA_REGION_LENGTH__+0x7a>
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e7       	ldi	r26, 0x70	; 112
    1526:	b1 e4       	ldi	r27, 0x41	; 65
    1528:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <Kp>
    152c:	90 93 17 28 	sts	0x2817, r25	; 0x802817 <Kp+0x1>
    1530:	a0 93 18 28 	sts	0x2818, r26	; 0x802818 <Kp+0x2>
    1534:	b0 93 19 28 	sts	0x2819, r27	; 0x802819 <Kp+0x3>
    1538:	8d ec       	ldi	r24, 0xCD	; 205
    153a:	9c ec       	ldi	r25, 0xCC	; 204
    153c:	ac e4       	ldi	r26, 0x4C	; 76
    153e:	bd e3       	ldi	r27, 0x3D	; 61
    1540:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <Ki>
    1544:	90 93 1b 28 	sts	0x281B, r25	; 0x80281b <Ki+0x1>
    1548:	a0 93 1c 28 	sts	0x281C, r26	; 0x80281c <Ki+0x2>
    154c:	b0 93 1d 28 	sts	0x281D, r27	; 0x80281d <Ki+0x3>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 ea       	ldi	r26, 0xA0	; 160
    1556:	b2 e4       	ldi	r27, 0x42	; 66
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:131
    else if(PID_SETPOINT > 160 && PID_SETPOINT < 220 ) {Kp=30, Ki=0.07, Kd=100;}  //{Kp=70, Ki=0.07, Kd=100;}
    else if(PID_SETPOINT >= 220 && PID_SETPOINT < 320 ) {Kp=60, Ki=0.05, Kd=100;}   //{Kp=50, Ki=0.40, Kd=100;}  it good when error is less than 20
    1558:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <Kd>
    155c:	90 93 1f 28 	sts	0x281F, r25	; 0x80281f <Kd+0x1>
    1560:	a0 93 20 28 	sts	0x2820, r26	; 0x802820 <Kd+0x2>
    1564:	b0 93 21 28 	sts	0x2821, r27	; 0x802821 <Kd+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:140
//      else {Kp=15, Ki=0.01, Kd=100;}
//    }
//    else Kp=15, Ki=0.024, Kd=80;

    
    myPID.SetTunings(Kp, Ki, Kd); 
    1568:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <Kp>
    156c:	90 91 17 28 	lds	r25, 0x2817	; 0x802817 <Kp+0x1>
    1570:	a0 91 18 28 	lds	r26, 0x2818	; 0x802818 <Kp+0x2>
    1574:	b0 91 19 28 	lds	r27, 0x2819	; 0x802819 <Kp+0x3>
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	ab 83       	std	Y+3, r26	; 0x03
    157e:	bc 83       	std	Y+4, r27	; 0x04
SetTunings():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	a9 01       	movw	r20, r18
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    158e:	87 fd       	sbrc	r24, 7
    1590:	c2 c0       	rjmp	.+388    	; 0x1716 <Bclass::PID_callingg() [clone .constprop.44]+0x28c>
PID_callingg():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:140
    1592:	40 90 1a 28 	lds	r4, 0x281A	; 0x80281a <Ki>
    1596:	50 90 1b 28 	lds	r5, 0x281B	; 0x80281b <Ki+0x1>
    159a:	60 90 1c 28 	lds	r6, 0x281C	; 0x80281c <Ki+0x2>
    159e:	70 90 1d 28 	lds	r7, 0x281D	; 0x80281d <Ki+0x3>
SetTunings():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:104
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	c3 01       	movw	r24, r6
    15aa:	b2 01       	movw	r22, r4
    15ac:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    15b0:	87 fd       	sbrc	r24, 7
    15b2:	b1 c0       	rjmp	.+354    	; 0x1716 <Bclass::PID_callingg() [clone .constprop.44]+0x28c>
PID_callingg():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:140
    15b4:	80 90 1e 28 	lds	r8, 0x281E	; 0x80281e <Kd>
    15b8:	90 90 1f 28 	lds	r9, 0x281F	; 0x80281f <Kd+0x1>
    15bc:	a0 90 20 28 	lds	r10, 0x2820	; 0x802820 <Kd+0x2>
    15c0:	b0 90 21 28 	lds	r11, 0x2821	; 0x802821 <Kd+0x3>
SetTunings():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:104
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	a9 01       	movw	r20, r18
    15ca:	c5 01       	movw	r24, r10
    15cc:	b4 01       	movw	r22, r8
    15ce:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    15d2:	87 fd       	sbrc	r24, 7
    15d4:	a0 c0       	rjmp	.+320    	; 0x1716 <Bclass::PID_callingg() [clone .constprop.44]+0x28c>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	20 91 5a 2a 	lds	r18, 0x2A5A	; 0x802a5a <myPID+0x1a>
    15dc:	30 91 5b 2a 	lds	r19, 0x2A5B	; 0x802a5b <myPID+0x1b>
    15e0:	21 30       	cpi	r18, 0x01	; 1
    15e2:	31 05       	cpc	r19, r1
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <Bclass::PID_callingg() [clone .constprop.44]+0x15e>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	80 93 7b 2a 	sts	0x2A7B, r24	; 0x802a7b <myPID+0x3b>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	ab 81       	ldd	r26, Y+3	; 0x03
    15f2:	bc 81       	ldd	r27, Y+4	; 0x04
    15f4:	80 93 40 2a 	sts	0x2A40, r24	; 0x802a40 <myPID>
    15f8:	90 93 41 2a 	sts	0x2A41, r25	; 0x802a41 <myPID+0x1>
    15fc:	a0 93 42 2a 	sts	0x2A42, r26	; 0x802a42 <myPID+0x2>
    1600:	b0 93 43 2a 	sts	0x2A43, r27	; 0x802a43 <myPID+0x3>
    1604:	40 92 44 2a 	sts	0x2A44, r4	; 0x802a44 <myPID+0x4>
    1608:	50 92 45 2a 	sts	0x2A45, r5	; 0x802a45 <myPID+0x5>
    160c:	60 92 46 2a 	sts	0x2A46, r6	; 0x802a46 <myPID+0x6>
    1610:	70 92 47 2a 	sts	0x2A47, r7	; 0x802a47 <myPID+0x7>
    1614:	80 92 48 2a 	sts	0x2A48, r8	; 0x802a48 <myPID+0x8>
    1618:	90 92 49 2a 	sts	0x2A49, r9	; 0x802a49 <myPID+0x9>
    161c:	a0 92 4a 2a 	sts	0x2A4A, r10	; 0x802a4a <myPID+0xa>
    1620:	b0 92 4b 2a 	sts	0x2A4B, r11	; 0x802a4b <myPID+0xb>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    1624:	60 91 6e 2a 	lds	r22, 0x2A6E	; 0x802a6e <myPID+0x2e>
    1628:	70 91 6f 2a 	lds	r23, 0x2A6F	; 0x802a6f <myPID+0x2f>
    162c:	80 91 70 2a 	lds	r24, 0x2A70	; 0x802a70 <myPID+0x30>
    1630:	90 91 71 2a 	lds	r25, 0x2A71	; 0x802a71 <myPID+0x31>
    1634:	0e 94 2f 3a 	call	0x745e	; 0x745e <__floatunsisf>
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a e7       	ldi	r20, 0x7A	; 122
    163e:	54 e4       	ldi	r21, 0x44	; 68
    1640:	0e 94 96 39 	call	0x732c	; 0x732c <__divsf3>
    1644:	69 87       	std	Y+9, r22	; 0x09
    1646:	7a 87       	std	Y+10, r23	; 0x0a
    1648:	8b 87       	std	Y+11, r24	; 0x0b
    164a:	9c 87       	std	Y+12, r25	; 0x0c
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:112
   kp = Kp;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	ab 81       	ldd	r26, Y+3	; 0x03
    1652:	bc 81       	ldd	r27, Y+4	; 0x04
    1654:	80 93 4c 2a 	sts	0x2A4C, r24	; 0x802a4c <myPID+0xc>
    1658:	90 93 4d 2a 	sts	0x2A4D, r25	; 0x802a4d <myPID+0xd>
    165c:	a0 93 4e 2a 	sts	0x2A4E, r26	; 0x802a4e <myPID+0xe>
    1660:	b0 93 4f 2a 	sts	0x2A4F, r27	; 0x802a4f <myPID+0xf>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    1664:	29 85       	ldd	r18, Y+9	; 0x09
    1666:	3a 85       	ldd	r19, Y+10	; 0x0a
    1668:	4b 85       	ldd	r20, Y+11	; 0x0b
    166a:	5c 85       	ldd	r21, Y+12	; 0x0c
    166c:	c3 01       	movw	r24, r6
    166e:	b2 01       	movw	r22, r4
    1670:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1674:	2b 01       	movw	r4, r22
    1676:	3c 01       	movw	r6, r24
    1678:	40 92 50 2a 	sts	0x2A50, r4	; 0x802a50 <myPID+0x10>
    167c:	50 92 51 2a 	sts	0x2A51, r5	; 0x802a51 <myPID+0x11>
    1680:	60 92 52 2a 	sts	0x2A52, r6	; 0x802a52 <myPID+0x12>
    1684:	70 92 53 2a 	sts	0x2A53, r7	; 0x802a53 <myPID+0x13>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    1688:	29 85       	ldd	r18, Y+9	; 0x09
    168a:	3a 85       	ldd	r19, Y+10	; 0x0a
    168c:	4b 85       	ldd	r20, Y+11	; 0x0b
    168e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1690:	c5 01       	movw	r24, r10
    1692:	b4 01       	movw	r22, r8
    1694:	0e 94 96 39 	call	0x732c	; 0x732c <__divsf3>
    1698:	4b 01       	movw	r8, r22
    169a:	5c 01       	movw	r10, r24
    169c:	80 92 54 2a 	sts	0x2A54, r8	; 0x802a54 <myPID+0x14>
    16a0:	90 92 55 2a 	sts	0x2A55, r9	; 0x802a55 <myPID+0x15>
    16a4:	a0 92 56 2a 	sts	0x2A56, r10	; 0x802a56 <myPID+0x16>
    16a8:	b0 92 57 2a 	sts	0x2A57, r11	; 0x802a57 <myPID+0x17>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:116

  if(controllerDirection ==REVERSE)
    16ac:	80 91 58 2a 	lds	r24, 0x2A58	; 0x802a58 <myPID+0x18>
    16b0:	90 91 59 2a 	lds	r25, 0x2A59	; 0x802a59 <myPID+0x19>
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	79 f5       	brne	.+94     	; 0x1716 <Bclass::PID_callingg() [clone .constprop.44]+0x28c>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:118
   {
      kp = (0 - kp);
    16b8:	29 81       	ldd	r18, Y+1	; 0x01
    16ba:	3a 81       	ldd	r19, Y+2	; 0x02
    16bc:	4b 81       	ldd	r20, Y+3	; 0x03
    16be:	5c 81       	ldd	r21, Y+4	; 0x04
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	cb 01       	movw	r24, r22
    16c6:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    16ca:	60 93 4c 2a 	sts	0x2A4C, r22	; 0x802a4c <myPID+0xc>
    16ce:	70 93 4d 2a 	sts	0x2A4D, r23	; 0x802a4d <myPID+0xd>
    16d2:	80 93 4e 2a 	sts	0x2A4E, r24	; 0x802a4e <myPID+0xe>
    16d6:	90 93 4f 2a 	sts	0x2A4F, r25	; 0x802a4f <myPID+0xf>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:119
      ki = (0 - ki);
    16da:	a3 01       	movw	r20, r6
    16dc:	92 01       	movw	r18, r4
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	cb 01       	movw	r24, r22
    16e4:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    16e8:	60 93 50 2a 	sts	0x2A50, r22	; 0x802a50 <myPID+0x10>
    16ec:	70 93 51 2a 	sts	0x2A51, r23	; 0x802a51 <myPID+0x11>
    16f0:	80 93 52 2a 	sts	0x2A52, r24	; 0x802a52 <myPID+0x12>
    16f4:	90 93 53 2a 	sts	0x2A53, r25	; 0x802a53 <myPID+0x13>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:120
      kd = (0 - kd);
    16f8:	a5 01       	movw	r20, r10
    16fa:	94 01       	movw	r18, r8
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	cb 01       	movw	r24, r22
    1702:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    1706:	60 93 54 2a 	sts	0x2A54, r22	; 0x802a54 <myPID+0x14>
    170a:	70 93 55 2a 	sts	0x2A55, r23	; 0x802a55 <myPID+0x15>
    170e:	80 93 56 2a 	sts	0x2A56, r24	; 0x802a56 <myPID+0x16>
    1712:	90 93 57 2a 	sts	0x2A57, r25	; 0x802a57 <myPID+0x17>
PID_callingg():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:143
    
    PID_OUTPUT1 = PID_OUTPUT;
    if ( PID_SETPOINT - TEMP_DEG < 20 )  //!RESUME_SET_TEMP || RESUME_SET_TEMP > 0 && PID_SETPOINT - TEMP_DEG > 20
    1716:	2d 81       	ldd	r18, Y+5	; 0x05
    1718:	3e 81       	ldd	r19, Y+6	; 0x06
    171a:	4f 81       	ldd	r20, Y+7	; 0x07
    171c:	58 85       	ldd	r21, Y+8	; 0x08
    171e:	c7 01       	movw	r24, r14
    1720:	b6 01       	movw	r22, r12
    1722:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    1726:	4b 01       	movw	r8, r22
    1728:	5c 01       	movw	r10, r24
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 ea       	ldi	r20, 0xA0	; 160
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1736:	87 ff       	sbrs	r24, 7
    1738:	e0 c1       	rjmp	.+960    	; 0x1afa <__DATA_REGION_LENGTH__+0x2fa>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:145
    {                                          
    if(PID_SETPOINT >= 30  && PID_SETPOINT <= 160)
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 ef       	ldi	r20, 0xF0	; 240
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	c7 01       	movw	r24, r14
    1744:	b6 01       	movw	r22, r12
    1746:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    174a:	87 fd       	sbrc	r24, 7
    174c:	30 c1       	rjmp	.+608    	; 0x19ae <__DATA_REGION_LENGTH__+0x1ae>
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	53 e4       	ldi	r21, 0x43	; 67
    1756:	c7 01       	movw	r24, r14
    1758:	b6 01       	movw	r22, r12
    175a:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    175e:	18 16       	cp	r1, r24
    1760:	0c f4       	brge	.+2      	; 0x1764 <Bclass::PID_callingg() [clone .constprop.44]+0x2da>
    1762:	25 c1       	rjmp	.+586    	; 0x19ae <__DATA_REGION_LENGTH__+0x1ae>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:147
    {
      if((PID_SETPOINT - (PID_INPUT)) > 8 && Flag==0)  {WINDOW_SIZE = 1000; Flag++;}    
    1764:	20 91 3c 2a 	lds	r18, 0x2A3C	; 0x802a3c <PID_INPUT>
    1768:	30 91 3d 2a 	lds	r19, 0x2A3D	; 0x802a3d <PID_INPUT+0x1>
    176c:	40 91 3e 2a 	lds	r20, 0x2A3E	; 0x802a3e <PID_INPUT+0x2>
    1770:	50 91 3f 2a 	lds	r21, 0x2A3F	; 0x802a3f <PID_INPUT+0x3>
    1774:	c7 01       	movw	r24, r14
    1776:	b6 01       	movw	r22, r12
    1778:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    177c:	6b 01       	movw	r12, r22
    177e:	7c 01       	movw	r14, r24
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    178c:	18 16       	cp	r1, r24
    178e:	0c f0       	brlt	.+2      	; 0x1792 <Bclass::PID_callingg() [clone .constprop.44]+0x308>
    1790:	ca c0       	rjmp	.+404    	; 0x1926 <__DATA_REGION_LENGTH__+0x126>
    1792:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <Flag>
    1796:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <Flag+0x1>
    179a:	89 2b       	or	r24, r25
    179c:	09 f0       	breq	.+2      	; 0x17a0 <Bclass::PID_callingg() [clone .constprop.44]+0x316>
    179e:	c3 c0       	rjmp	.+390    	; 0x1926 <__DATA_REGION_LENGTH__+0x126>
    17a0:	88 ee       	ldi	r24, 0xE8	; 232
    17a2:	93 e0       	ldi	r25, 0x03	; 3
    17a4:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <WINDOW_SIZE>
    17a8:	90 93 0d 28 	sts	0x280D, r25	; 0x80280d <WINDOW_SIZE+0x1>
    17ac:	81 e0       	ldi	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:148
      else if((PID_SETPOINT - (PID_INPUT)) <= 6 && Flag==1)  {WINDOW_SIZE = 1200; Flag++;} //1200
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	80 93 53 29 	sts	0x2953, r24	; 0x802953 <Flag>
    17b4:	90 93 54 29 	sts	0x2954, r25	; 0x802954 <Flag+0x1>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:182
//          {
//            if(PID_SETPOINT - TEMP_DEG  >= 10) WINDOW_SIZE = 1000;
//            else WINDOW_SIZE = 1300;
//          }
                         
  if (millis() - WINDOW_START_TIME > WINDOW_SIZE)
    17b8:	5c de       	rcall	.-840    	; 0x1472 <millis>
    17ba:	6b 01       	movw	r12, r22
    17bc:	7c 01       	movw	r14, r24
    17be:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <WINDOW_START_TIME>
    17c2:	90 91 50 29 	lds	r25, 0x2950	; 0x802950 <WINDOW_START_TIME+0x1>
    17c6:	a0 91 51 29 	lds	r26, 0x2951	; 0x802951 <WINDOW_START_TIME+0x2>
    17ca:	b0 91 52 29 	lds	r27, 0x2952	; 0x802952 <WINDOW_START_TIME+0x3>
    17ce:	40 91 0c 28 	lds	r20, 0x280C	; 0x80280c <WINDOW_SIZE>
    17d2:	50 91 0d 28 	lds	r21, 0x280D	; 0x80280d <WINDOW_SIZE+0x1>
    17d6:	05 2e       	mov	r0, r21
    17d8:	00 0c       	add	r0, r0
    17da:	66 0b       	sbc	r22, r22
    17dc:	77 0b       	sbc	r23, r23
    17de:	c8 1a       	sub	r12, r24
    17e0:	d9 0a       	sbc	r13, r25
    17e2:	ea 0a       	sbc	r14, r26
    17e4:	fb 0a       	sbc	r15, r27
    17e6:	4c 15       	cp	r20, r12
    17e8:	5d 05       	cpc	r21, r13
    17ea:	6e 05       	cpc	r22, r14
    17ec:	7f 05       	cpc	r23, r15
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:184
  { 
    WINDOW_START_TIME += WINDOW_SIZE;
    17ee:	60 f4       	brcc	.+24     	; 0x1808 <__DATA_REGION_LENGTH__+0x8>
    17f0:	84 0f       	add	r24, r20
    17f2:	95 1f       	adc	r25, r21
    17f4:	a6 1f       	adc	r26, r22
    17f6:	b7 1f       	adc	r27, r23
    17f8:	80 93 4f 29 	sts	0x294F, r24	; 0x80294f <WINDOW_START_TIME>
    17fc:	90 93 50 29 	sts	0x2950, r25	; 0x802950 <WINDOW_START_TIME+0x1>
    1800:	a0 93 51 29 	sts	0x2951, r26	; 0x802951 <WINDOW_START_TIME+0x2>
    1804:	b0 93 52 29 	sts	0x2952, r27	; 0x802952 <WINDOW_START_TIME+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:187
  }
  
  if (PID_OUTPUT < millis() - WINDOW_START_TIME)      {digitalWrite(HEATER, LOW);}
    1808:	34 de       	rcall	.-920    	; 0x1472 <millis>
    180a:	c0 90 4f 29 	lds	r12, 0x294F	; 0x80294f <WINDOW_START_TIME>
    180e:	d0 90 50 29 	lds	r13, 0x2950	; 0x802950 <WINDOW_START_TIME+0x1>
    1812:	e0 90 51 29 	lds	r14, 0x2951	; 0x802951 <WINDOW_START_TIME+0x2>
    1816:	f0 90 52 29 	lds	r15, 0x2952	; 0x802952 <WINDOW_START_TIME+0x3>
    181a:	6c 19       	sub	r22, r12
    181c:	7d 09       	sbc	r23, r13
    181e:	8e 09       	sbc	r24, r14
    1820:	9f 09       	sbc	r25, r15
    1822:	0e 94 2f 3a 	call	0x745e	; 0x745e <__floatunsisf>
    1826:	20 91 38 2a 	lds	r18, 0x2A38	; 0x802a38 <PID_OUTPUT>
    182a:	30 91 39 2a 	lds	r19, 0x2A39	; 0x802a39 <PID_OUTPUT+0x1>
    182e:	40 91 3a 2a 	lds	r20, 0x2A3A	; 0x802a3a <PID_OUTPUT+0x2>
    1832:	50 91 3b 2a 	lds	r21, 0x2A3B	; 0x802a3b <PID_OUTPUT+0x3>
    1836:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    183a:	18 16       	cp	r1, r24
    183c:	0c f0       	brlt	.+2      	; 0x1840 <__DATA_REGION_LENGTH__+0x40>
    183e:	6e c1       	rjmp	.+732    	; 0x1b1c <__DATA_REGION_LENGTH__+0x31c>
digitalWrite():
    1840:	60 e0       	ldi	r22, 0x00	; 0
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:193
  else  
  {
    if(PID_INPUT >= (float(PID_SETPOINT) + 0.1))      {digitalWrite(HEATER, LOW);}
    else                                              {digitalWrite(HEATER, HIGH);}
  }
}
    1842:	88 e1       	ldi	r24, 0x18	; 24
PID_callingg():
    1844:	2c 96       	adiw	r28, 0x0c	; 12
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	7f 90       	pop	r7
    1860:	6f 90       	pop	r6
    1862:	5f 90       	pop	r5
    1864:	4f 90       	pop	r4
digitalWrite():
    1866:	b9 cc       	rjmp	.-1678   	; 0x11da <digitalWrite.part.2>
PID_callingg():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:116


void Bclass ::PID_callingg()
{
  if(!LONG_PRESS)    PID_INPUT = TEMP_DEG;
  else               PID_INPUT = TEMP_DEG_RAW;
    1868:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <TEMP_DEG_RAW>
    186c:	90 91 0f 28 	lds	r25, 0x280F	; 0x80280f <TEMP_DEG_RAW+0x1>
    1870:	a0 91 10 28 	lds	r26, 0x2810	; 0x802810 <TEMP_DEG_RAW+0x2>
    1874:	b0 91 11 28 	lds	r27, 0x2811	; 0x802811 <TEMP_DEG_RAW+0x3>
    1878:	2f ce       	rjmp	.-930    	; 0x14d8 <Bclass::PID_callingg() [clone .constprop.44]+0x4e>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:130
//  
//  if((PID_SETPOINT - PID_INPUT) > 1)       myPID.SetTunings(Kp, Ki, Kd);

   
    if( PID_SETPOINT >= 0  &&  PID_SETPOINT <= 160 ) {Kp=15, Ki=0.050, Kd=80;}  //Kp=15, Ki=0.040, Kd=80;
    else if(PID_SETPOINT > 160 && PID_SETPOINT < 220 ) {Kp=30, Ki=0.07, Kd=100;}  //{Kp=70, Ki=0.07, Kd=100;}
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	53 e4       	ldi	r21, 0x43	; 67
    1882:	c7 01       	movw	r24, r14
    1884:	b6 01       	movw	r22, r12
    1886:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    188a:	18 16       	cp	r1, r24
    188c:	3c f5       	brge	.+78     	; 0x18dc <__DATA_REGION_LENGTH__+0xdc>
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	4c e5       	ldi	r20, 0x5C	; 92
    1894:	53 e4       	ldi	r21, 0x43	; 67
    1896:	c7 01       	movw	r24, r14
    1898:	b6 01       	movw	r22, r12
    189a:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    189e:	87 ff       	sbrs	r24, 7
    18a0:	1d c0       	rjmp	.+58     	; 0x18dc <__DATA_REGION_LENGTH__+0xdc>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 ef       	ldi	r26, 0xF0	; 240
    18a8:	b1 e4       	ldi	r27, 0x41	; 65
    18aa:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <Kp>
    18ae:	90 93 17 28 	sts	0x2817, r25	; 0x802817 <Kp+0x1>
    18b2:	a0 93 18 28 	sts	0x2818, r26	; 0x802818 <Kp+0x2>
    18b6:	b0 93 19 28 	sts	0x2819, r27	; 0x802819 <Kp+0x3>
    18ba:	89 e2       	ldi	r24, 0x29	; 41
    18bc:	9c e5       	ldi	r25, 0x5C	; 92
    18be:	af e8       	ldi	r26, 0x8F	; 143
    18c0:	bd e3       	ldi	r27, 0x3D	; 61
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:131
    else if(PID_SETPOINT >= 220 && PID_SETPOINT < 320 ) {Kp=60, Ki=0.05, Kd=100;}   //{Kp=50, Ki=0.40, Kd=100;}  it good when error is less than 20
    18c2:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <Ki>
    18c6:	90 93 1b 28 	sts	0x281B, r25	; 0x80281b <Ki+0x1>
    18ca:	a0 93 1c 28 	sts	0x281C, r26	; 0x80281c <Ki+0x2>
    18ce:	b0 93 1d 28 	sts	0x281D, r27	; 0x80281d <Ki+0x3>
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	a8 ec       	ldi	r26, 0xC8	; 200
    18d8:	b2 e4       	ldi	r27, 0x42	; 66
    18da:	3e ce       	rjmp	.-900    	; 0x1558 <Bclass::PID_callingg() [clone .constprop.44]+0xce>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4c e5       	ldi	r20, 0x5C	; 92
    18e2:	53 e4       	ldi	r21, 0x43	; 67
    18e4:	c7 01       	movw	r24, r14
    18e6:	b6 01       	movw	r22, r12
    18e8:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    18ec:	87 fd       	sbrc	r24, 7
    18ee:	3c ce       	rjmp	.-904    	; 0x1568 <Bclass::PID_callingg() [clone .constprop.44]+0xde>
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 ea       	ldi	r20, 0xA0	; 160
    18f6:	53 e4       	ldi	r21, 0x43	; 67
    18f8:	c7 01       	movw	r24, r14
    18fa:	b6 01       	movw	r22, r12
    18fc:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1900:	87 ff       	sbrs	r24, 7
    1902:	32 ce       	rjmp	.-924    	; 0x1568 <Bclass::PID_callingg() [clone .constprop.44]+0xde>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e7       	ldi	r26, 0x70	; 112
    190a:	b2 e4       	ldi	r27, 0x42	; 66
    190c:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <Kp>
    1910:	90 93 17 28 	sts	0x2817, r25	; 0x802817 <Kp+0x1>
    1914:	a0 93 18 28 	sts	0x2818, r26	; 0x802818 <Kp+0x2>
    1918:	b0 93 19 28 	sts	0x2819, r27	; 0x802819 <Kp+0x3>
    191c:	8d ec       	ldi	r24, 0xCD	; 205
    191e:	9c ec       	ldi	r25, 0xCC	; 204
    1920:	ac e4       	ldi	r26, 0x4C	; 76
    1922:	bd e3       	ldi	r27, 0x3D	; 61
    1924:	ce cf       	rjmp	.-100    	; 0x18c2 <__DATA_REGION_LENGTH__+0xc2>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:148
    if ( PID_SETPOINT - TEMP_DEG < 20 )  //!RESUME_SET_TEMP || RESUME_SET_TEMP > 0 && PID_SETPOINT - TEMP_DEG > 20
    {                                          
    if(PID_SETPOINT >= 30  && PID_SETPOINT <= 160)
    {
      if((PID_SETPOINT - (PID_INPUT)) > 8 && Flag==0)  {WINDOW_SIZE = 1000; Flag++;}    
      else if((PID_SETPOINT - (PID_INPUT)) <= 6 && Flag==1)  {WINDOW_SIZE = 1200; Flag++;} //1200
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 ec       	ldi	r20, 0xC0	; 192
    192c:	50 e4       	ldi	r21, 0x40	; 64
    192e:	c7 01       	movw	r24, r14
    1930:	b6 01       	movw	r22, r12
    1932:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1936:	18 16       	cp	r1, r24
    1938:	7c f0       	brlt	.+30     	; 0x1958 <__DATA_REGION_LENGTH__+0x158>
    193a:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <Flag>
    193e:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <Flag+0x1>
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	49 f4       	brne	.+18     	; 0x1958 <__DATA_REGION_LENGTH__+0x158>
    1946:	80 eb       	ldi	r24, 0xB0	; 176
    1948:	94 e0       	ldi	r25, 0x04	; 4
    194a:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <WINDOW_SIZE>
    194e:	90 93 0d 28 	sts	0x280D, r25	; 0x80280d <WINDOW_SIZE+0x1>
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	2c cf       	rjmp	.-424    	; 0x17b0 <Bclass::PID_callingg() [clone .constprop.44]+0x326>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:149
      else if((PID_SETPOINT - (PID_INPUT)) <= 3 && Flag==2)  {WINDOW_SIZE = 1400; Flag++;} //1600
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e4       	ldi	r20, 0x40	; 64
    195e:	50 e4       	ldi	r21, 0x40	; 64
    1960:	c7 01       	movw	r24, r14
    1962:	b6 01       	movw	r22, r12
    1964:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1968:	18 16       	cp	r1, r24
    196a:	7c f0       	brlt	.+30     	; 0x198a <__DATA_REGION_LENGTH__+0x18a>
    196c:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <Flag>
    1970:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <Flag+0x1>
    1974:	02 97       	sbiw	r24, 0x02	; 2
    1976:	49 f4       	brne	.+18     	; 0x198a <__DATA_REGION_LENGTH__+0x18a>
    1978:	88 e7       	ldi	r24, 0x78	; 120
    197a:	95 e0       	ldi	r25, 0x05	; 5
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:156
    }
    else if(PID_SETPOINT > 160  && PID_SETPOINT < 230)
    {
      if((PID_SETPOINT - (PID_INPUT)) > 8 && Flag==0)  {WINDOW_SIZE = 1000; Flag++;}    
      else if((PID_SETPOINT - (PID_INPUT)) <= 8 && Flag==1)  {WINDOW_SIZE = 1550; Flag++;}//1550   //1600 future value 
      else if((PID_SETPOINT - (PID_INPUT)) <= 4 && Flag==2)  {WINDOW_SIZE = 1750; Flag++;}//1750   //1850 future value 
    197c:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <WINDOW_SIZE>
    1980:	90 93 0d 28 	sts	0x280D, r25	; 0x80280d <WINDOW_SIZE+0x1>
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	13 cf       	rjmp	.-474    	; 0x17b0 <Bclass::PID_callingg() [clone .constprop.44]+0x326>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:150
    if(PID_SETPOINT >= 30  && PID_SETPOINT <= 160)
    {
      if((PID_SETPOINT - (PID_INPUT)) > 8 && Flag==0)  {WINDOW_SIZE = 1000; Flag++;}    
      else if((PID_SETPOINT - (PID_INPUT)) <= 6 && Flag==1)  {WINDOW_SIZE = 1200; Flag++;} //1200
      else if((PID_SETPOINT - (PID_INPUT)) <= 3 && Flag==2)  {WINDOW_SIZE = 1400; Flag++;} //1600
      else if((PID_SETPOINT - (PID_INPUT)) >= 2 && Flag==3)  {WINDOW_SIZE = 1000; Flag=0;Flag++;} 
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e4       	ldi	r21, 0x40	; 64
    1992:	c7 01       	movw	r24, r14
    1994:	b6 01       	movw	r22, r12
    1996:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    199a:	87 fd       	sbrc	r24, 7
    199c:	0d cf       	rjmp	.-486    	; 0x17b8 <Bclass::PID_callingg() [clone .constprop.44]+0x32e>
    199e:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <Flag>
    19a2:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <Flag+0x1>
    19a6:	03 97       	sbiw	r24, 0x03	; 3
    19a8:	09 f4       	brne	.+2      	; 0x19ac <__DATA_REGION_LENGTH__+0x1ac>
    19aa:	fa ce       	rjmp	.-524    	; 0x17a0 <Bclass::PID_callingg() [clone .constprop.44]+0x316>
    19ac:	05 cf       	rjmp	.-502    	; 0x17b8 <Bclass::PID_callingg() [clone .constprop.44]+0x32e>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:152
    }
    else if(PID_SETPOINT > 160  && PID_SETPOINT < 230)
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e2       	ldi	r20, 0x20	; 32
    19b4:	53 e4       	ldi	r21, 0x43	; 67
    19b6:	c7 01       	movw	r24, r14
    19b8:	b6 01       	movw	r22, r12
    19ba:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    19be:	18 16       	cp	r1, r24
    19c0:	0c f0       	brlt	.+2      	; 0x19c4 <__DATA_REGION_LENGTH__+0x1c4>
    19c2:	4f c0       	rjmp	.+158    	; 0x1a62 <__DATA_REGION_LENGTH__+0x262>
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	46 e6       	ldi	r20, 0x66	; 102
    19ca:	53 e4       	ldi	r21, 0x43	; 67
    19cc:	c7 01       	movw	r24, r14
    19ce:	b6 01       	movw	r22, r12
    19d0:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    19d4:	87 ff       	sbrs	r24, 7
    19d6:	45 c0       	rjmp	.+138    	; 0x1a62 <__DATA_REGION_LENGTH__+0x262>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:154
    {
      if((PID_SETPOINT - (PID_INPUT)) > 8 && Flag==0)  {WINDOW_SIZE = 1000; Flag++;}    
    19d8:	20 91 3c 2a 	lds	r18, 0x2A3C	; 0x802a3c <PID_INPUT>
    19dc:	30 91 3d 2a 	lds	r19, 0x2A3D	; 0x802a3d <PID_INPUT+0x1>
    19e0:	40 91 3e 2a 	lds	r20, 0x2A3E	; 0x802a3e <PID_INPUT+0x2>
    19e4:	50 91 3f 2a 	lds	r21, 0x2A3F	; 0x802a3f <PID_INPUT+0x3>
    19e8:	c7 01       	movw	r24, r14
    19ea:	b6 01       	movw	r22, r12
    19ec:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    19f0:	6b 01       	movw	r12, r22
    19f2:	7c 01       	movw	r14, r24
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	3c f4       	brge	.+14     	; 0x1a12 <__DATA_REGION_LENGTH__+0x212>
    1a04:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <Flag>
    1a08:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <Flag+0x1>
    1a0c:	89 2b       	or	r24, r25
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <__DATA_REGION_LENGTH__+0x212>
    1a10:	c7 ce       	rjmp	.-626    	; 0x17a0 <Bclass::PID_callingg() [clone .constprop.44]+0x316>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:155
      else if((PID_SETPOINT - (PID_INPUT)) <= 8 && Flag==1)  {WINDOW_SIZE = 1550; Flag++;}//1550   //1600 future value 
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	51 e4       	ldi	r21, 0x41	; 65
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	4c f0       	brlt	.+18     	; 0x1a38 <__DATA_REGION_LENGTH__+0x238>
    1a26:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <Flag>
    1a2a:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <Flag+0x1>
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	19 f4       	brne	.+6      	; 0x1a38 <__DATA_REGION_LENGTH__+0x238>
    1a32:	8e e0       	ldi	r24, 0x0E	; 14
    1a34:	96 e0       	ldi	r25, 0x06	; 6
    1a36:	89 cf       	rjmp	.-238    	; 0x194a <__DATA_REGION_LENGTH__+0x14a>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:156
      else if((PID_SETPOINT - (PID_INPUT)) <= 4 && Flag==2)  {WINDOW_SIZE = 1750; Flag++;}//1750   //1850 future value 
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e8       	ldi	r20, 0x80	; 128
    1a3e:	50 e4       	ldi	r21, 0x40	; 64
    1a40:	c7 01       	movw	r24, r14
    1a42:	b6 01       	movw	r22, r12
    1a44:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1a48:	18 16       	cp	r1, r24
    1a4a:	0c f4       	brge	.+2      	; 0x1a4e <__DATA_REGION_LENGTH__+0x24e>
    1a4c:	51 c0       	rjmp	.+162    	; 0x1af0 <__DATA_REGION_LENGTH__+0x2f0>
    1a4e:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <Flag>
    1a52:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <Flag+0x1>
    1a56:	02 97       	sbiw	r24, 0x02	; 2
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <__DATA_REGION_LENGTH__+0x25c>
    1a5a:	4a c0       	rjmp	.+148    	; 0x1af0 <__DATA_REGION_LENGTH__+0x2f0>
    1a5c:	86 ed       	ldi	r24, 0xD6	; 214
    1a5e:	96 e0       	ldi	r25, 0x06	; 6
    1a60:	8d cf       	rjmp	.-230    	; 0x197c <__DATA_REGION_LENGTH__+0x17c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:166
//      if((PID_SETPOINT - (PID_INPUT)) > 7 && Flag==0)  {WINDOW_SIZE = 1000; Flag++;}    
//      else if((PID_SETPOINT - (PID_INPUT)) <= 7 && Flag==1)  {WINDOW_SIZE = 1600; Flag++;}   //1200
//      else if((PID_SETPOINT - (PID_INPUT)) <= 5 && Flag==2)  {WINDOW_SIZE = 1800; Flag++;}  //1400
//      else if((PID_SETPOINT - (PID_INPUT)) >= 3 && Flag==3)  {WINDOW_SIZE = 1000; Flag=0;Flag++;} 
//    }
    else if(PID_SETPOINT >= 230  && PID_SETPOINT < 320)
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	46 e6       	ldi	r20, 0x66	; 102
    1a68:	53 e4       	ldi	r21, 0x43	; 67
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	b6 01       	movw	r22, r12
    1a6e:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    1a72:	87 fd       	sbrc	r24, 7
    1a74:	a1 ce       	rjmp	.-702    	; 0x17b8 <Bclass::PID_callingg() [clone .constprop.44]+0x32e>
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 ea       	ldi	r20, 0xA0	; 160
    1a7c:	53 e4       	ldi	r21, 0x43	; 67
    1a7e:	c7 01       	movw	r24, r14
    1a80:	b6 01       	movw	r22, r12
    1a82:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1a86:	87 ff       	sbrs	r24, 7
    1a88:	97 ce       	rjmp	.-722    	; 0x17b8 <Bclass::PID_callingg() [clone .constprop.44]+0x32e>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:168
    {
     if((PID_SETPOINT - (PID_INPUT)) > 7 && Flag==0)  {WINDOW_SIZE = 1000; Flag++;}    
    1a8a:	20 91 3c 2a 	lds	r18, 0x2A3C	; 0x802a3c <PID_INPUT>
    1a8e:	30 91 3d 2a 	lds	r19, 0x2A3D	; 0x802a3d <PID_INPUT+0x1>
    1a92:	40 91 3e 2a 	lds	r20, 0x2A3E	; 0x802a3e <PID_INPUT+0x2>
    1a96:	50 91 3f 2a 	lds	r21, 0x2A3F	; 0x802a3f <PID_INPUT+0x3>
    1a9a:	c7 01       	movw	r24, r14
    1a9c:	b6 01       	movw	r22, r12
    1a9e:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    1aa2:	6b 01       	movw	r12, r22
    1aa4:	7c 01       	movw	r14, r24
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 ee       	ldi	r20, 0xE0	; 224
    1aac:	50 e4       	ldi	r21, 0x40	; 64
    1aae:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	3c f4       	brge	.+14     	; 0x1ac4 <__DATA_REGION_LENGTH__+0x2c4>
    1ab6:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <Flag>
    1aba:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <Flag+0x1>
    1abe:	89 2b       	or	r24, r25
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <__DATA_REGION_LENGTH__+0x2c4>
    1ac2:	6e ce       	rjmp	.-804    	; 0x17a0 <Bclass::PID_callingg() [clone .constprop.44]+0x316>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:169
     else if((PID_SETPOINT - (PID_INPUT)) <= 4 && Flag==1)  {WINDOW_SIZE = 1550; Flag++;}  //1500
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	50 e4       	ldi	r21, 0x40	; 64
    1acc:	c7 01       	movw	r24, r14
    1ace:	b6 01       	movw	r22, r12
    1ad0:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	3c f0       	brlt	.+14     	; 0x1ae6 <__DATA_REGION_LENGTH__+0x2e6>
    1ad8:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <Flag>
    1adc:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <Flag+0x1>
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <__DATA_REGION_LENGTH__+0x2e6>
    1ae4:	a6 cf       	rjmp	.-180    	; 0x1a32 <__DATA_REGION_LENGTH__+0x232>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:170
     else if((PID_SETPOINT - (PID_INPUT)) <= 2 && Flag==2)  {WINDOW_SIZE = 1750; Flag++;}  //1650
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e4       	ldi	r21, 0x40	; 64
    1aee:	a8 cf       	rjmp	.-176    	; 0x1a40 <__DATA_REGION_LENGTH__+0x240>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:171
     else if((PID_SETPOINT - (PID_INPUT)) >= 3 && Flag==3)  {WINDOW_SIZE = 1000; Flag=0;Flag++;} 
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e4       	ldi	r20, 0x40	; 64
    1af6:	50 e4       	ldi	r21, 0x40	; 64
    1af8:	4c cf       	rjmp	.-360    	; 0x1992 <__DATA_REGION_LENGTH__+0x192>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:174
    }
    } 
    else if( PID_SETPOINT - TEMP_DEG  >= 20 ) WINDOW_SIZE = 1000;  
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 ea       	ldi	r20, 0xA0	; 160
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	c5 01       	movw	r24, r10
    1b04:	b4 01       	movw	r22, r8
    1b06:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    1b0a:	87 fd       	sbrc	r24, 7
    1b0c:	55 ce       	rjmp	.-854    	; 0x17b8 <Bclass::PID_callingg() [clone .constprop.44]+0x32e>
    1b0e:	88 ee       	ldi	r24, 0xE8	; 232
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <WINDOW_SIZE>
    1b16:	90 93 0d 28 	sts	0x280D, r25	; 0x80280d <WINDOW_SIZE+0x1>
    1b1a:	4e ce       	rjmp	.-868    	; 0x17b8 <Bclass::PID_callingg() [clone .constprop.44]+0x32e>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Butn.cpp:190
  }
  
  if (PID_OUTPUT < millis() - WINDOW_START_TIME)      {digitalWrite(HEATER, LOW);}
  else  
  {
    if(PID_INPUT >= (float(PID_SETPOINT) + 0.1))      {digitalWrite(HEATER, LOW);}
    1b1c:	2d ec       	ldi	r18, 0xCD	; 205
    1b1e:	3c ec       	ldi	r19, 0xCC	; 204
    1b20:	4c ec       	ldi	r20, 0xCC	; 204
    1b22:	5d e3       	ldi	r21, 0x3D	; 61
    1b24:	60 91 34 2a 	lds	r22, 0x2A34	; 0x802a34 <PID_SETPOINT>
    1b28:	70 91 35 2a 	lds	r23, 0x2A35	; 0x802a35 <PID_SETPOINT+0x1>
    1b2c:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <PID_SETPOINT+0x2>
    1b30:	90 91 37 2a 	lds	r25, 0x2A37	; 0x802a37 <PID_SETPOINT+0x3>
    1b34:	0e 94 2e 39 	call	0x725c	; 0x725c <__addsf3>
    1b38:	20 91 3c 2a 	lds	r18, 0x2A3C	; 0x802a3c <PID_INPUT>
    1b3c:	30 91 3d 2a 	lds	r19, 0x2A3D	; 0x802a3d <PID_INPUT+0x1>
    1b40:	40 91 3e 2a 	lds	r20, 0x2A3E	; 0x802a3e <PID_INPUT+0x2>
    1b44:	50 91 3f 2a 	lds	r21, 0x2A3F	; 0x802a3f <PID_INPUT+0x3>
    1b48:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	0c f0       	brlt	.+2      	; 0x1b52 <__DATA_REGION_LENGTH__+0x352>
    1b50:	77 ce       	rjmp	.-786    	; 0x1840 <__DATA_REGION_LENGTH__+0x40>
digitalWrite():
    1b52:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:71
	else diffTime = micros() - lastTime;
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
    1b54:	76 ce       	rjmp	.-788    	; 0x1842 <__DATA_REGION_LENGTH__+0x42>

00001b56 <Ticker::update()>:
update():
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:76
	if (tick()) callback();
	}

bool Ticker::tick() {
	if (!enabled)	return false;
    1b5c:	df 93       	push	r29
tick():
    1b5e:	fc 01       	movw	r30, r24
    1b60:	20 81       	ld	r18, Z
    1b62:	22 23       	and	r18, r18
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <Ticker::update()+0x12>
    1b66:	50 c0       	rjmp	.+160    	; 0x1c08 <Ticker::update()+0xb2>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:77
	if (resolution == MILLIS) {
    1b68:	ec 01       	movw	r28, r24
    1b6a:	81 85       	ldd	r24, Z+9	; 0x09
    1b6c:	92 85       	ldd	r25, Z+10	; 0x0a
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:78
		if ((millis() - lastTime) >= timer) {
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	b9 f5       	brne	.+110    	; 0x1be0 <Ticker::update()+0x8a>
    1b72:	7f dc       	rcall	.-1794   	; 0x1472 <millis>
    1b74:	0b 89       	ldd	r16, Y+19	; 0x13
    1b76:	1c 89       	ldd	r17, Y+20	; 0x14
    1b78:	2d 89       	ldd	r18, Y+21	; 0x15
    1b7a:	3e 89       	ldd	r19, Y+22	; 0x16
    1b7c:	60 1b       	sub	r22, r16
    1b7e:	71 0b       	sbc	r23, r17
    1b80:	82 0b       	sbc	r24, r18
    1b82:	93 0b       	sbc	r25, r19
    1b84:	09 81       	ldd	r16, Y+1	; 0x01
    1b86:	1a 81       	ldd	r17, Y+2	; 0x02
    1b88:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8c:	60 17       	cp	r22, r16
    1b8e:	71 07       	cpc	r23, r17
    1b90:	82 07       	cpc	r24, r18
    1b92:	93 07       	cpc	r25, r19
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:79
			lastTime = millis();
    1b94:	c8 f1       	brcs	.+114    	; 0x1c08 <Ticker::update()+0xb2>
    1b96:	6d dc       	rcall	.-1830   	; 0x1472 <millis>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:87
	  	return true;
			}
		}
	else {
		if ((micros() - lastTime) >= timer) {
			lastTime = micros();
    1b98:	6b 8b       	std	Y+19, r22	; 0x13
    1b9a:	7c 8b       	std	Y+20, r23	; 0x14
    1b9c:	8d 8b       	std	Y+21, r24	; 0x15
    1b9e:	9e 8b       	std	Y+22, r25	; 0x16
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:88
			if (repeat - counts == 1) enabled = false;
    1ba0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ba2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ba4:	ad 85       	ldd	r26, Y+13	; 0x0d
    1ba6:	be 85       	ldd	r27, Y+14	; 0x0e
    1ba8:	4d 81       	ldd	r20, Y+5	; 0x05
    1baa:	5e 81       	ldd	r21, Y+6	; 0x06
    1bac:	6f 81       	ldd	r22, Y+7	; 0x07
    1bae:	78 85       	ldd	r23, Y+8	; 0x08
    1bb0:	48 1b       	sub	r20, r24
    1bb2:	59 0b       	sbc	r21, r25
    1bb4:	6a 0b       	sbc	r22, r26
    1bb6:	7b 0b       	sbc	r23, r27
    1bb8:	41 30       	cpi	r20, 0x01	; 1
    1bba:	51 05       	cpc	r21, r1
    1bbc:	61 05       	cpc	r22, r1
    1bbe:	71 05       	cpc	r23, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <Ticker::update()+0x6e>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:89
			counts++;
    1bc2:	18 82       	st	Y, r1
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	a1 1d       	adc	r26, r1
    1bc8:	b1 1d       	adc	r27, r1
    1bca:	8b 87       	std	Y+11, r24	; 0x0b
    1bcc:	9c 87       	std	Y+12, r25	; 0x0c
    1bce:	ad 87       	std	Y+13, r26	; 0x0d
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:72
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
    1bd0:	be 87       	std	Y+14, r27	; 0x0e
update():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:73
	}
    1bd2:	e9 89       	ldd	r30, Y+17	; 0x11
    1bd4:	fa 89       	ldd	r31, Y+18	; 0x12
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:72
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
    1bda:	1f 91       	pop	r17
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:86
			counts++;				
	  	return true;
			}
		}
	else {
		if ((micros() - lastTime) >= timer) {
    1bdc:	0f 91       	pop	r16
    1bde:	09 94       	ijmp
tick():
    1be0:	1f dc       	rcall	.-1986   	; 0x1420 <micros>
    1be2:	0b 89       	ldd	r16, Y+19	; 0x13
    1be4:	1c 89       	ldd	r17, Y+20	; 0x14
    1be6:	2d 89       	ldd	r18, Y+21	; 0x15
    1be8:	3e 89       	ldd	r19, Y+22	; 0x16
    1bea:	60 1b       	sub	r22, r16
    1bec:	71 0b       	sbc	r23, r17
    1bee:	82 0b       	sbc	r24, r18
    1bf0:	93 0b       	sbc	r25, r19
    1bf2:	09 81       	ldd	r16, Y+1	; 0x01
    1bf4:	1a 81       	ldd	r17, Y+2	; 0x02
    1bf6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfa:	60 17       	cp	r22, r16
    1bfc:	71 07       	cpc	r23, r17
    1bfe:	82 07       	cpc	r24, r18
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:87
			lastTime = micros();
    1c00:	93 07       	cpc	r25, r19
    1c02:	10 f0       	brcs	.+4      	; 0x1c08 <Ticker::update()+0xb2>
    1c04:	0d dc       	rcall	.-2022   	; 0x1420 <micros>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:73
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
	}
    1c06:	c8 cf       	rjmp	.-112    	; 0x1b98 <Ticker::update()+0x42>
update():
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:40
	counts = 0;
	}

Ticker::~Ticker() {}

void Ticker::start() {
    1c10:	08 95       	ret

00001c12 <Ticker::start()>:
start():
    1c12:	cf 93       	push	r28
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:41
	if (callback == NULL) return;
    1c14:	df 93       	push	r29
    1c16:	fc 01       	movw	r30, r24
    1c18:	21 89       	ldd	r18, Z+17	; 0x11
    1c1a:	32 89       	ldd	r19, Z+18	; 0x12
    1c1c:	23 2b       	or	r18, r19
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:42
	if (resolution == MILLIS) lastTime = millis();
    1c1e:	a1 f0       	breq	.+40     	; 0x1c48 <Ticker::start()+0x36>
    1c20:	ec 01       	movw	r28, r24
    1c22:	81 85       	ldd	r24, Z+9	; 0x09
    1c24:	92 85       	ldd	r25, Z+10	; 0x0a
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	91 f4       	brne	.+36     	; 0x1c4e <Ticker::start()+0x3c>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:43
	else lastTime = micros();
    1c2a:	23 dc       	rcall	.-1978   	; 0x1472 <millis>
    1c2c:	6b 8b       	std	Y+19, r22	; 0x13
    1c2e:	7c 8b       	std	Y+20, r23	; 0x14
    1c30:	8d 8b       	std	Y+21, r24	; 0x15
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:44
	enabled = true;
    1c32:	9e 8b       	std	Y+22, r25	; 0x16
    1c34:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:45
	counts = 0;
    1c36:	88 83       	st	Y, r24
    1c38:	1b 86       	std	Y+11, r1	; 0x0b
    1c3a:	1c 86       	std	Y+12, r1	; 0x0c
    1c3c:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:46
	status = RUNNING;
    1c3e:	1e 86       	std	Y+14, r1	; 0x0e
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	8f 87       	std	Y+15, r24	; 0x0f
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:47
	}
    1c46:	98 8b       	std	Y+16, r25	; 0x10
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:43
Ticker::~Ticker() {}

void Ticker::start() {
	if (callback == NULL) return;
	if (resolution == MILLIS) lastTime = millis();
	else lastTime = micros();
    1c4c:	08 95       	ret
    1c4e:	e8 db       	rcall	.-2096   	; 0x1420 <micros>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:325
  }
}

void Bclass :: BUZZ_INTERVAL(int i)
{
  BUZZ.interval(i);
    1c50:	ed cf       	rjmp	.-38     	; 0x1c2c <Ticker::start()+0x1a>

00001c52 <Bclass::BUZZ_INTERVAL(int) [clone .constprop.25]>:
BUZZ_INTERVAL():
    1c52:	dc 01       	movw	r26, r24
    1c54:	bc 01       	movw	r22, r24
    1c56:	99 0f       	add	r25, r25
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:97
		}
	return false;
	}

void Ticker::interval(uint32_t timer) {
	if (resolution == MICROS) timer = timer * 1000;
    1c58:	88 0b       	sbc	r24, r24
    1c5a:	99 0b       	sbc	r25, r25
interval():
    1c5c:	20 91 d9 2b 	lds	r18, 0x2BD9	; 0x802bd9 <BUZZ+0x9>
    1c60:	30 91 da 2b 	lds	r19, 0x2BDA	; 0x802bda <BUZZ+0xa>
    1c64:	23 2b       	or	r18, r19
    1c66:	21 f4       	brne	.+8      	; 0x1c70 <Bclass::BUZZ_INTERVAL(int) [clone .constprop.25]+0x1e>
    1c68:	28 ee       	ldi	r18, 0xE8	; 232
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:98
	this->timer = timer;
    1c6a:	33 e0       	ldi	r19, 0x03	; 3
    1c6c:	0e 94 b3 3b 	call	0x7766	; 0x7766 <__usmulhisi3>
    1c70:	60 93 d1 2b 	sts	0x2BD1, r22	; 0x802bd1 <BUZZ+0x1>
    1c74:	70 93 d2 2b 	sts	0x2BD2, r23	; 0x802bd2 <BUZZ+0x2>
    1c78:	80 93 d3 2b 	sts	0x2BD3, r24	; 0x802bd3 <BUZZ+0x3>
    1c7c:	90 93 d4 2b 	sts	0x2BD4, r25	; 0x802bd4 <BUZZ+0x4>
digitalWrite():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:327
  digitalWrite(BUZZER, HIGH);
  BUZZ.start();
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	85 e1       	ldi	r24, 0x15	; 21
    1c84:	aa da       	rcall	.-2732   	; 0x11da <digitalWrite.part.2>
BUZZ_INTERVAL():
    1c86:	80 ed       	ldi	r24, 0xD0	; 208
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:104
bool OneButton::isLongPressed(){
  return _isLongPressed;
}

void OneButton::tick(void)
{
    1c88:	9b e2       	ldi	r25, 0x2B	; 43
    1c8a:	c3 cf       	rjmp	.-122    	; 0x1c12 <Ticker::start()>

00001c8c <OneButton::tick()>:
tick():
    1c8c:	cf 92       	push	r12
    1c8e:	df 92       	push	r13
    1c90:	ef 92       	push	r14
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:106
  // Detect the input information 
  int buttonLevel = digitalRead(_pin); // current button signal.
    1c9a:	df 93       	push	r29
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:230
}

uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    1c9c:	ec 01       	movw	r28, r24
    1c9e:	88 81       	ld	r24, Y
digitalRead():
    1ca0:	89 32       	cpi	r24, 0x29	; 41
    1ca2:	f8 f4       	brcc	.+62     	; 0x1ce2 <OneButton::tick()+0x56>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:106
    1ca4:	9d db       	rcall	.-2246   	; 0x13e0 <digitalRead.part.3>
tick():
    1ca6:	08 2f       	mov	r16, r24
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:107
  unsigned long now = millis(); // current (relative) time in msecs.
    1ca8:	10 e0       	ldi	r17, 0x00	; 0
    1caa:	e3 db       	rcall	.-2106   	; 0x1472 <millis>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:110

  // Implementation of the state machine
  if (_state == 0) { // waiting for menu pin being pressed.
    1cac:	29 8d       	ldd	r18, Y+25	; 0x19
    1cae:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1cb0:	21 15       	cp	r18, r1
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	c1 f4       	brne	.+48     	; 0x1ce6 <OneButton::tick()+0x5a>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:111
    if (buttonLevel == _buttonPressed) {
    1cb6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cb8:	3b 85       	ldd	r19, Y+11	; 0x0b
    1cba:	20 17       	cp	r18, r16
    1cbc:	31 07       	cpc	r19, r17
    1cbe:	41 f4       	brne	.+16     	; 0x1cd0 <OneButton::tick()+0x44>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:112
      _state = 1; // step to state 1
    1cc0:	21 e0       	ldi	r18, 0x01	; 1
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	29 8f       	std	Y+25, r18	; 0x19
    1cc6:	3a 8f       	std	Y+26, r19	; 0x1a
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:113
      _startTime = now; // remember starting time
    1cc8:	6b 8f       	std	Y+27, r22	; 0x1b
    1cca:	7c 8f       	std	Y+28, r23	; 0x1c
    1ccc:	8d 8f       	std	Y+29, r24	; 0x1d
    1cce:	9e 8f       	std	Y+30, r25	; 0x1e
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:166
	  _isLongPressed = true; // Keep track of long press state
	  if (_duringLongPressFunc) _duringLongPressFunc();
    } // if  

  } // if  
} // OneButton.tick()
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring_digital.c:232
  if (bit_mask == NOT_A_PIN)
    return LOW;
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	e0 cf       	rjmp	.-64     	; 0x1ca6 <OneButton::tick()+0x1a>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:116
    if (buttonLevel == _buttonPressed) {
      _state = 1; // step to state 1
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    1ce6:	21 30       	cpi	r18, 0x01	; 1
    1ce8:	31 05       	cpc	r19, r1
    1cea:	09 f0       	breq	.+2      	; 0x1cee <OneButton::tick()+0x62>
    1cec:	51 c0       	rjmp	.+162    	; 0x1d90 <OneButton::tick()+0x104>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:118

    if ((buttonLevel == _buttonReleased) && ((unsigned long)(now - _startTime) < _debounceTicks)) {
    1cee:	28 85       	ldd	r18, Y+8	; 0x08
    1cf0:	39 85       	ldd	r19, Y+9	; 0x09
    1cf2:	20 17       	cp	r18, r16
    1cf4:	31 07       	cpc	r19, r17
    1cf6:	e9 f4       	brne	.+58     	; 0x1d32 <OneButton::tick()+0xa6>
    1cf8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1cfa:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1cfc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1cfe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1d00:	ab 01       	movw	r20, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	40 1b       	sub	r20, r16
    1d06:	51 0b       	sbc	r21, r17
    1d08:	62 0b       	sbc	r22, r18
    1d0a:	73 0b       	sbc	r23, r19
    1d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d10:	09 2e       	mov	r0, r25
    1d12:	00 0c       	add	r0, r0
    1d14:	aa 0b       	sbc	r26, r26
    1d16:	bb 0b       	sbc	r27, r27
    1d18:	48 17       	cp	r20, r24
    1d1a:	59 07       	cpc	r21, r25
    1d1c:	6a 07       	cpc	r22, r26
    1d1e:	7b 07       	cpc	r23, r27
    1d20:	18 f4       	brcc	.+6      	; 0x1d28 <OneButton::tick()+0x9c>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:121
      // button was released to quickly so I assume some debouncing.
	  // go back to state 0 without calling a function.
      _state = 0;
    1d22:	19 8e       	std	Y+25, r1	; 0x19
    1d24:	1a 8e       	std	Y+26, r1	; 0x1a
    1d26:	d4 cf       	rjmp	.-88     	; 0x1cd0 <OneButton::tick()+0x44>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:124

    } else if (buttonLevel == _buttonReleased) {
      _state = 2; // step to state 2
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:131
    } else if ((buttonLevel == _buttonPressed) && ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true;  // Keep track of long press state
      if (_pressFunc) _pressFunc();
	  if (_longPressStartFunc) _longPressStartFunc();
	  if (_duringLongPressFunc) _duringLongPressFunc();
      _state = 6; // step to state 6
    1d2c:	89 8f       	std	Y+25, r24	; 0x19
    1d2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d30:	cf cf       	rjmp	.-98     	; 0x1cd0 <OneButton::tick()+0x44>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:126
      _state = 0;

    } else if (buttonLevel == _buttonReleased) {
      _state = 2; // step to state 2

    } else if ((buttonLevel == _buttonPressed) && ((unsigned long)(now - _startTime) > _pressTicks)) {
    1d32:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d34:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d36:	20 17       	cp	r18, r16
    1d38:	31 07       	cpc	r19, r17
    1d3a:	51 f6       	brne	.-108    	; 0x1cd0 <OneButton::tick()+0x44>
    1d3c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d3e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1d40:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1d42:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1d44:	ab 01       	movw	r20, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	40 1b       	sub	r20, r16
    1d4a:	51 0b       	sbc	r21, r17
    1d4c:	62 0b       	sbc	r22, r18
    1d4e:	73 0b       	sbc	r23, r19
    1d50:	8c 81       	ldd	r24, Y+4	; 0x04
    1d52:	9d 81       	ldd	r25, Y+5	; 0x05
    1d54:	09 2e       	mov	r0, r25
    1d56:	00 0c       	add	r0, r0
    1d58:	aa 0b       	sbc	r26, r26
    1d5a:	bb 0b       	sbc	r27, r27
    1d5c:	84 17       	cp	r24, r20
    1d5e:	95 07       	cpc	r25, r21
    1d60:	a6 07       	cpc	r26, r22
    1d62:	b7 07       	cpc	r27, r23
    1d64:	08 f0       	brcs	.+2      	; 0x1d68 <OneButton::tick()+0xdc>
    1d66:	b4 cf       	rjmp	.-152    	; 0x1cd0 <OneButton::tick()+0x44>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:127
      _isLongPressed = true;  // Keep track of long press state
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	8c 87       	std	Y+12, r24	; 0x0c
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:128
      if (_pressFunc) _pressFunc();
    1d6c:	e9 89       	ldd	r30, Y+17	; 0x11
    1d6e:	fa 89       	ldd	r31, Y+18	; 0x12
    1d70:	30 97       	sbiw	r30, 0x00	; 0
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <OneButton::tick()+0xea>
    1d74:	09 95       	icall
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:129
	  if (_longPressStartFunc) _longPressStartFunc();
    1d76:	eb 89       	ldd	r30, Y+19	; 0x13
    1d78:	fc 89       	ldd	r31, Y+20	; 0x14
    1d7a:	30 97       	sbiw	r30, 0x00	; 0
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <OneButton::tick()+0xf4>
    1d7e:	09 95       	icall
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:130
	  if (_duringLongPressFunc) _duringLongPressFunc();
    1d80:	ef 89       	ldd	r30, Y+23	; 0x17
    1d82:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d84:	30 97       	sbiw	r30, 0x00	; 0
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <OneButton::tick()+0xfe>
    1d88:	09 95       	icall
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:131
      _state = 6; // step to state 6
    1d8a:	86 e0       	ldi	r24, 0x06	; 6
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	ce cf       	rjmp	.-100    	; 0x1d2c <OneButton::tick()+0xa0>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:137
      
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) { // waiting for menu pin being pressed the second time or timeout.
    1d90:	22 30       	cpi	r18, 0x02	; 2
    1d92:	31 05       	cpc	r19, r1
    1d94:	19 f5       	brne	.+70     	; 0x1ddc <OneButton::tick()+0x150>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:138
    if ((unsigned long)(now - _startTime) > _clickTicks) {
    1d96:	cb 8c       	ldd	r12, Y+27	; 0x1b
    1d98:	dc 8c       	ldd	r13, Y+28	; 0x1c
    1d9a:	ed 8c       	ldd	r14, Y+29	; 0x1d
    1d9c:	fe 8c       	ldd	r15, Y+30	; 0x1e
    1d9e:	6c 19       	sub	r22, r12
    1da0:	7d 09       	sbc	r23, r13
    1da2:	8e 09       	sbc	r24, r14
    1da4:	9f 09       	sbc	r25, r15
    1da6:	ca 80       	ldd	r12, Y+2	; 0x02
    1da8:	db 80       	ldd	r13, Y+3	; 0x03
    1daa:	0d 2c       	mov	r0, r13
    1dac:	00 0c       	add	r0, r0
    1dae:	ee 08       	sbc	r14, r14
    1db0:	ff 08       	sbc	r15, r15
    1db2:	c6 16       	cp	r12, r22
    1db4:	d7 06       	cpc	r13, r23
    1db6:	e8 06       	cpc	r14, r24
    1db8:	f9 06       	cpc	r15, r25
    1dba:	38 f4       	brcc	.+14     	; 0x1dca <OneButton::tick()+0x13e>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:140
      // this was only a single short click
      if (_clickFunc) _clickFunc();
    1dbc:	ed 85       	ldd	r30, Y+13	; 0x0d
    1dbe:	fe 85       	ldd	r31, Y+14	; 0x0e
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:157
    } // if

  } else if (_state == 6) { // waiting for menu pin being release after long press.
    if (buttonLevel == _buttonReleased) {
	  _isLongPressed = false;  // Keep track of long press state
	  if(_longPressStopFunc) _longPressStopFunc();
    1dc0:	30 97       	sbiw	r30, 0x00	; 0
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <OneButton::tick()+0x13a>
    1dc4:	ae cf       	rjmp	.-164    	; 0x1d22 <OneButton::tick()+0x96>
    1dc6:	09 95       	icall
    1dc8:	ac cf       	rjmp	.-168    	; 0x1d22 <OneButton::tick()+0x96>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:143
    if ((unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc) _clickFunc();
      _state = 0; // restart.

    } else if (buttonLevel == _buttonPressed) {
    1dca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dce:	80 17       	cp	r24, r16
    1dd0:	91 07       	cpc	r25, r17
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <OneButton::tick()+0x14a>
    1dd4:	7d cf       	rjmp	.-262    	; 0x1cd0 <OneButton::tick()+0x44>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:144
      _state = 3; // step to state 3
    1dd6:	83 e0       	ldi	r24, 0x03	; 3
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a8 cf       	rjmp	.-176    	; 0x1d2c <OneButton::tick()+0xa0>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:147
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    1ddc:	23 30       	cpi	r18, 0x03	; 3
    1dde:	31 05       	cpc	r19, r1
    1de0:	49 f4       	brne	.+18     	; 0x1df4 <OneButton::tick()+0x168>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:148
    if (buttonLevel == _buttonReleased) {
    1de2:	88 85       	ldd	r24, Y+8	; 0x08
    1de4:	99 85       	ldd	r25, Y+9	; 0x09
    1de6:	80 17       	cp	r24, r16
    1de8:	91 07       	cpc	r25, r17
    1dea:	09 f0       	breq	.+2      	; 0x1dee <OneButton::tick()+0x162>
    1dec:	71 cf       	rjmp	.-286    	; 0x1cd0 <OneButton::tick()+0x44>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:150
      // this was a 2 click sequence.
      if (_doubleClickFunc) _doubleClickFunc();
    1dee:	ef 85       	ldd	r30, Y+15	; 0x0f
    1df0:	f8 89       	ldd	r31, Y+16	; 0x10
    1df2:	e6 cf       	rjmp	.-52     	; 0x1dc0 <OneButton::tick()+0x134>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:154
      _state = 0; // restart.
    } // if

  } else if (_state == 6) { // waiting for menu pin being release after long press.
    1df4:	26 30       	cpi	r18, 0x06	; 6
    1df6:	31 05       	cpc	r19, r1
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <OneButton::tick()+0x170>
    1dfa:	6a cf       	rjmp	.-300    	; 0x1cd0 <OneButton::tick()+0x44>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:155
    if (buttonLevel == _buttonReleased) {
    1dfc:	88 85       	ldd	r24, Y+8	; 0x08
    1dfe:	99 85       	ldd	r25, Y+9	; 0x09
    1e00:	80 17       	cp	r24, r16
    1e02:	91 07       	cpc	r25, r17
    1e04:	21 f4       	brne	.+8      	; 0x1e0e <OneButton::tick()+0x182>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:156
	  _isLongPressed = false;  // Keep track of long press state
    1e06:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:157
	  if(_longPressStopFunc) _longPressStopFunc();
    1e08:	ed 89       	ldd	r30, Y+21	; 0x15
    1e0a:	fe 89       	ldd	r31, Y+22	; 0x16
    1e0c:	d9 cf       	rjmp	.-78     	; 0x1dc0 <OneButton::tick()+0x134>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:161
      _state = 0; // restart.
    } else {
	  // button is being long pressed
	  _isLongPressed = true; // Keep track of long press state
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	8c 87       	std	Y+12, r24	; 0x0c
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:162
	  if (_duringLongPressFunc) _duringLongPressFunc();
    1e12:	ef 89       	ldd	r30, Y+23	; 0x17
    1e14:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e16:	30 97       	sbiw	r30, 0x00	; 0
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <OneButton::tick()+0x190>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:166
    } // if  

  } // if  
} // OneButton.tick()
    1e1a:	5a cf       	rjmp	.-332    	; 0x1cd0 <OneButton::tick()+0x44>
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:162
	  if(_longPressStopFunc) _longPressStopFunc();
      _state = 0; // restart.
    } else {
	  // button is being long pressed
	  _isLongPressed = true; // Keep track of long press state
	  if (_duringLongPressFunc) _duringLongPressFunc();
    1e28:	df 90       	pop	r13
    1e2a:	cf 90       	pop	r12
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:119
    //  Serial2.print("TEMP_DEG_RAW2 :");
    //  Serial2.println(TEMP_DEG_RAW2);
}

byte spiread(void) 
{
    1e2c:	09 94       	ijmp

00001e2e <Thermocouple_TEMP_Conversion()>:
_Z28Thermocouple_TEMP_Conversionv():
    1e2e:	08 95       	ret

00001e30 <spiread()>:
spiread():
    1e30:	cf 92       	push	r12
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:121
  int i;
  byte d = 0;
    1e38:	1f 93       	push	r17
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:123

  for (i = 7; i >= 0; i--) 
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:325
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__(
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
    1e40:	c7 e0       	ldi	r28, 0x07	; 7
    1e42:	d0 e0       	ldi	r29, 0x00	; 0
delayMicroseconds():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:130
    digitalWrite(SCLK, LOW);
    delayMicroseconds(10);
    if (digitalRead(MISO))
    {
      // set the bit to 0 no matter what
      d |= (1 << i);
    1e44:	83 e2       	ldi	r24, 0x23	; 35
    1e46:	e8 2e       	mov	r14, r24
    1e48:	f1 2c       	mov	r15, r1
spiread():
    1e4a:	cc 24       	eor	r12, r12
    1e4c:	c3 94       	inc	r12
    1e4e:	d1 2c       	mov	r13, r1
digitalWrite():
    1e50:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:325
    1e52:	80 e1       	ldi	r24, 0x10	; 16
    1e54:	c2 d9       	rcall	.-3196   	; 0x11da <digitalWrite.part.2>
delayMicroseconds():
    1e56:	c7 01       	movw	r24, r14
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <spiread()+0x28>
digitalRead():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:127

  for (i = 7; i >= 0; i--) 
  {
    digitalWrite(SCLK, LOW);
    delayMicroseconds(10);
    if (digitalRead(MISO))
    1e5c:	8f e0       	ldi	r24, 0x0F	; 15
    1e5e:	c0 da       	rcall	.-2688   	; 0x13e0 <digitalRead.part.3>
spiread():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:130
    {
      // set the bit to 0 no matter what
      d |= (1 << i);
    1e60:	88 23       	and	r24, r24
    1e62:	39 f0       	breq	.+14     	; 0x1e72 <spiread()+0x42>
    1e64:	c6 01       	movw	r24, r12
    1e66:	0c 2e       	mov	r0, r28
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <spiread()+0x3c>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	0a 94       	dec	r0
    1e6e:	ea f7       	brpl	.-6      	; 0x1e6a <spiread()+0x3a>
    1e70:	18 2b       	or	r17, r24
digitalWrite():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:325
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	80 e1       	ldi	r24, 0x10	; 16
    1e76:	b1 d9       	rcall	.-3230   	; 0x11da <digitalWrite.part.2>
delayMicroseconds():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:123
byte spiread(void) 
{
  int i;
  byte d = 0;

  for (i = 7; i >= 0; i--) 
    1e78:	c7 01       	movw	r24, r14
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:136
    }
    digitalWrite(SCLK, HIGH);
    delayMicroseconds(10);
  }
  return d;
}
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <spiread()+0x4a>
spiread():
    1e7e:	21 97       	sbiw	r28, 0x01	; 1
    1e80:	38 f7       	brcc	.-50     	; 0x1e50 <spiread()+0x20>
    1e82:	81 2f       	mov	r24, r17
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	1f 91       	pop	r17
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:66
  TEMP_Conversion.start();
  Intial_time_for_ktype_read_ticker.start();
}

float Selection_Of_Thermocouple(uint8_t ChipSelectionPin) //(uint8_t )
{
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	08 95       	ret

00001e94 <Selection_Of_Thermocouple(unsigned char)>:
Selection_Of_Thermocouple():
    1e94:	1f 93       	push	r17
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:69
  uint16_t v;

  digitalWrite(ChipSelectionPin, LOW);
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	18 2f       	mov	r17, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\cores\coreX-corefiles/wiring.c:325
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	db d9       	rcall	.-3146   	; 0x1256 <digitalWrite>
delayMicroseconds():
    1ea0:	83 e2       	ldi	r24, 0x23	; 35
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:72
  delayMicroseconds(10);

  v = spiread();
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <Selection_Of_Thermocouple(unsigned char)+0x10>
Selection_Of_Thermocouple():
    1ea8:	c3 df       	rcall	.-122    	; 0x1e30 <spiread()>
    1eaa:	c8 2f       	mov	r28, r24
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:73
  v <<= 8;
    1eac:	d0 e0       	ldi	r29, 0x00	; 0
    1eae:	dc 2f       	mov	r29, r28
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:74
  v |= spiread();
    1eb0:	cc 27       	eor	r28, r28
    1eb2:	be df       	rcall	.-132    	; 0x1e30 <spiread()>
    1eb4:	c8 2b       	or	r28, r24
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:76

  digitalWrite(ChipSelectionPin, HIGH);
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	81 2f       	mov	r24, r17
    1eba:	cd d9       	rcall	.-3174   	; 0x1256 <digitalWrite>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:78

  if (v & 0x4) 
    1ebc:	c2 fd       	sbrc	r28, 2
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <Selection_Of_Thermocouple(unsigned char)+0x54>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:85
    // uh oh, no thermocouple attached!
//    return NAN;
     return 0;
  }

  v >>= 3;
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	d6 95       	lsr	r29
    1ec4:	c7 95       	ror	r28
    1ec6:	8a 95       	dec	r24
    1ec8:	e1 f7       	brne	.-8      	; 0x1ec2 <Selection_Of_Thermocouple(unsigned char)+0x2e>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:87

  return v * 0.25;
    1eca:	be 01       	movw	r22, r28
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	0e 94 2f 3a 	call	0x745e	; 0x745e <__floatunsisf>
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5e e3       	ldi	r21, 0x3E	; 62
    1edc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:90
   

}
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:82

  if (v & 0x4) 
  {
    // uh oh, no thermocouple attached!
//    return NAN;
     return 0;
    1ee6:	08 95       	ret
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	cb 01       	movw	r24, r22
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:100
  Intial_time_for_ktype_read_ticker.update();
  // TEMP_Conversion.update();
}

void READ_THERMOCOUPLE()
{
    1eee:	f8 cf       	rjmp	.-16     	; 0x1ee0 <Selection_Of_Thermocouple(unsigned char)+0x4c>

00001ef0 <READ_THERMOCOUPLE()>:
READ_THERMOCOUPLE():
    1ef0:	8f 92       	push	r8
    1ef2:	9f 92       	push	r9
    1ef4:	af 92       	push	r10
    1ef6:	bf 92       	push	r11
    1ef8:	cf 92       	push	r12
    1efa:	df 92       	push	r13
    1efc:	ef 92       	push	r14
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:101
    TEMP_DEG_RAW1  = Selection_Of_Thermocouple(CS1);   
    1efe:	ff 92       	push	r15
    1f00:	83 e0       	ldi	r24, 0x03	; 3
    1f02:	c8 df       	rcall	.-112    	; 0x1e94 <Selection_Of_Thermocouple(unsigned char)>
    1f04:	4b 01       	movw	r8, r22
    1f06:	5c 01       	movw	r10, r24
    1f08:	80 92 02 29 	sts	0x2902, r8	; 0x802902 <TEMP_DEG_RAW1>
    1f0c:	90 92 03 29 	sts	0x2903, r9	; 0x802903 <TEMP_DEG_RAW1+0x1>
    1f10:	a0 92 04 29 	sts	0x2904, r10	; 0x802904 <TEMP_DEG_RAW1+0x2>
    1f14:	b0 92 05 29 	sts	0x2905, r11	; 0x802905 <TEMP_DEG_RAW1+0x3>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:102
    TEMP_DEG_RAW2  = Selection_Of_Thermocouple(CS2);
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	bc df       	rcall	.-136    	; 0x1e94 <Selection_Of_Thermocouple(unsigned char)>
    1f1c:	6b 01       	movw	r12, r22
    1f1e:	7c 01       	movw	r14, r24
    1f20:	c0 92 fe 28 	sts	0x28FE, r12	; 0x8028fe <TEMP_DEG_RAW2>
    1f24:	d0 92 ff 28 	sts	0x28FF, r13	; 0x8028ff <TEMP_DEG_RAW2+0x1>
    1f28:	e0 92 00 29 	sts	0x2900, r14	; 0x802900 <TEMP_DEG_RAW2+0x2>
    1f2c:	f0 92 01 29 	sts	0x2901, r15	; 0x802901 <TEMP_DEG_RAW2+0x3>
    1f30:	20 e0       	ldi	r18, 0x00	; 0
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:103
    if(((TEMP_DEG_RAW1==0) && (TEMP_DEG_RAW2==0))  && Intial_time_for_ktype_read_FLAG==1)  //&& Intial_time_for_ktype_read_FLAG==1
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	a9 01       	movw	r20, r18
    1f36:	c5 01       	movw	r24, r10
    1f38:	b4 01       	movw	r22, r8
    1f3a:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1f3e:	81 11       	cpse	r24, r1
    1f40:	19 c0       	rjmp	.+50     	; 0x1f74 <READ_THERMOCOUPLE()+0x84>
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	a9 01       	movw	r20, r18
    1f48:	c7 01       	movw	r24, r14
    1f4a:	b6 01       	movw	r22, r12
    1f4c:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    1f50:	81 11       	cpse	r24, r1
    1f52:	10 c0       	rjmp	.+32     	; 0x1f74 <READ_THERMOCOUPLE()+0x84>
    1f54:	80 91 43 28 	lds	r24, 0x2843	; 0x802843 <Intial_time_for_ktype_read_FLAG>
    1f58:	88 23       	and	r24, r24
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <READ_THERMOCOUPLE()+0x72>
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:105
    {
      Probe_error_flag=1;
    1f5e:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <Probe_error_flag>
    1f62:	ff 90       	pop	r15
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:116
    //  Serial2.print("TEMP_DEG_RAW1 :");
    //  Serial2.println(TEMP_DEG_RAW1);

    //  Serial2.print("TEMP_DEG_RAW2 :");
    //  Serial2.println(TEMP_DEG_RAW2);
}
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	bf 90       	pop	r11
    1f6c:	af 90       	pop	r10
    1f6e:	9f 90       	pop	r9
    1f70:	8f 90       	pop	r8
    1f72:	08 95       	ret
    1f74:	20 e0       	ldi	r18, 0x00	; 0
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:107
    TEMP_DEG_RAW2  = Selection_Of_Thermocouple(CS2);
    if(((TEMP_DEG_RAW1==0) && (TEMP_DEG_RAW2==0))  && Intial_time_for_ktype_read_FLAG==1)  //&& Intial_time_for_ktype_read_FLAG==1
    {
      Probe_error_flag=1;
    }
    else if(((TEMP_DEG_RAW1>0) || (TEMP_DEG_RAW2>0)) && Intial_time_for_ktype_read_FLAG==1)  // && Intial_time_for_ktype_read_FLAG==1
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	a9 01       	movw	r20, r18
    1f7a:	c5 01       	movw	r24, r10
    1f7c:	b4 01       	movw	r22, r8
    1f7e:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f0       	brlt	.+18     	; 0x1f98 <READ_THERMOCOUPLE()+0xa8>
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	a9 01       	movw	r20, r18
    1f8c:	c7 01       	movw	r24, r14
    1f8e:	b6 01       	movw	r22, r12
    1f90:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	2c f7       	brge	.-54     	; 0x1f62 <READ_THERMOCOUPLE()+0x72>
    1f98:	80 91 43 28 	lds	r24, 0x2843	; 0x802843 <Intial_time_for_ktype_read_FLAG>
    1f9c:	88 23       	and	r24, r24
    1f9e:	09 f3       	breq	.-62     	; 0x1f62 <READ_THERMOCOUPLE()+0x72>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/K_type.cpp:109
    {
      Probe_error_flag=0;
    1fa0:	10 92 70 28 	sts	0x2870, r1	; 0x802870 <Probe_error_flag>
    1fa4:	de cf       	rjmp	.-68     	; 0x1f62 <READ_THERMOCOUPLE()+0x72>

00001fa6 <RTD_TEMP_CAL()>:
_Z12RTD_TEMP_CALv():
    1fa6:	08 95       	ret

00001fa8 <RESET_STOP()>:
_Z10RESET_STOPv():
    1fa8:	08 95       	ret

00001faa <RESET_CLICK()>:
RESET_CLICK():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:772
  //  INC_LONGPRESS_START=0;
}

void RESET_CLICK()
{
  if (checkTempRaised == 0)
    1faa:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
    1fae:	81 11       	cpse	r24, r1
    1fb0:	5c c0       	rjmp	.+184    	; 0x206a <RESET_CLICK()+0xc0>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:776
  {
    // EEPROM.get(0, TIME_SOCK_OR_TOTAL);
    // EEPROM.write(0, TIME_SOCK_OR_TOTAL);
    if (LONG_PRESS )
    1fb2:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
    1fb6:	88 23       	and	r24, r24
    1fb8:	11 f1       	breq	.+68     	; 0x1ffe <RESET_CLICK()+0x54>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:778
    {
      if ( SELECTION_PARAMETER == blank  || SELECTION_PARAMETER == Cal2LowTemp_Enter_Maintain || SELECTION_PARAMETER == Cal2HighTemp_Enter_Maintain )  SELECTION_PARAMETER--;
    1fba:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <SELECTION_PARAMETER>
    1fbe:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
    1fc2:	85 30       	cpi	r24, 0x05	; 5
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	29 f0       	breq	.+10     	; 0x1fd2 <RESET_CLICK()+0x28>
    1fc8:	9c 01       	movw	r18, r24
    1fca:	2d 7f       	andi	r18, 0xFD	; 253
    1fcc:	29 30       	cpi	r18, 0x09	; 9
    1fce:	31 05       	cpc	r19, r1
    1fd0:	41 f4       	brne	.+16     	; 0x1fe2 <RESET_CLICK()+0x38>
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <SELECTION_PARAMETER>
    1fd8:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <SELECTION_PARAMETER+0x1>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:798
      {
        RATE_OF_HEATING = 0;
        CHECK_RATE_OF_HEATING = 1;
      }
    }
    Butn.BUZZ_INTERVAL(50);
    1fdc:	82 e3       	ldi	r24, 0x32	; 50
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	38 ce       	rjmp	.-912    	; 0x1c52 <Bclass::BUZZ_INTERVAL(int) [clone .constprop.25]>
    1fe2:	28 30       	cpi	r18, 0x08	; 8
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:781
    if (LONG_PRESS )
    {
      if ( SELECTION_PARAMETER == blank  || SELECTION_PARAMETER == Cal2LowTemp_Enter_Maintain || SELECTION_PARAMETER == Cal2HighTemp_Enter_Maintain )  SELECTION_PARAMETER--;
      else
      {
        if (SELECTION_PARAMETER == Cal2LowTemp_Enter_Heat || SELECTION_PARAMETER == Cal2HighTemp_Enter_Heat )  MODE_BUT_SINGLE_PRESS_IN_SETTINGS = 1;
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	21 f4       	brne	.+8      	; 0x1ff0 <RESET_CLICK()+0x46>
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    1fee:	f6 cf       	rjmp	.-20     	; 0x1fdc <RESET_CLICK()+0x32>
    1ff0:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:784
        else
        {
          if (MODE_BUT_SINGLE_PRESS_IN_SETTINGS)    MODE_BUT_SINGLE_PRESS_IN_SETTINGS = 0;
    1ff4:	88 23       	and	r24, r24
    1ff6:	91 f3       	breq	.-28     	; 0x1fdc <RESET_CLICK()+0x32>
    1ff8:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    1ffc:	ef cf       	rjmp	.-34     	; 0x1fdc <RESET_CLICK()+0x32>
    1ffe:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:790
        }
      }
    }
    if (!LONG_PRESS )
    {
      if (ENTER_BUT >= 0 && ENTER_BUT <= 4)  ENTER_BUT--;
    2002:	85 30       	cpi	r24, 0x05	; 5
    2004:	18 f4       	brcc	.+6      	; 0x200c <RESET_CLICK()+0x62>
    2006:	81 50       	subi	r24, 0x01	; 1
    2008:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
    200c:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:791
      if (ENTER_BUT == 2 ) ENTER_BUT--;                       //THIS LINE ADDED BY ME
    2010:	82 30       	cpi	r24, 0x02	; 2
    2012:	19 f4       	brne	.+6      	; 0x201a <RESET_CLICK()+0x70>
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
    201a:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:792
      if ( ENTER_BUT == 5   &&  RATE_OF_HEATING >= 1  && CHECK_RATE_OF_HEATING == 1  && !Energy_Mode)
    201e:	85 30       	cpi	r24, 0x05	; 5
    2020:	e9 f6       	brne	.-70     	; 0x1fdc <RESET_CLICK()+0x32>
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	60 91 8f 28 	lds	r22, 0x288F	; 0x80288f <RATE_OF_HEATING>
    202e:	70 91 90 28 	lds	r23, 0x2890	; 0x802890 <RATE_OF_HEATING+0x1>
    2032:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <RATE_OF_HEATING+0x2>
    2036:	90 91 92 28 	lds	r25, 0x2892	; 0x802892 <RATE_OF_HEATING+0x3>
    203a:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    203e:	87 fd       	sbrc	r24, 7
    2040:	cd cf       	rjmp	.-102    	; 0x1fdc <RESET_CLICK()+0x32>
    2042:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <CHECK_RATE_OF_HEATING>
    2046:	88 23       	and	r24, r24
    2048:	49 f2       	breq	.-110    	; 0x1fdc <RESET_CLICK()+0x32>
    204a:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    204e:	81 11       	cpse	r24, r1
    2050:	c5 cf       	rjmp	.-118    	; 0x1fdc <RESET_CLICK()+0x32>
    2052:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <RATE_OF_HEATING>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:794
      {
        RATE_OF_HEATING = 0;
    2056:	10 92 90 28 	sts	0x2890, r1	; 0x802890 <RATE_OF_HEATING+0x1>
    205a:	10 92 91 28 	sts	0x2891, r1	; 0x802891 <RATE_OF_HEATING+0x2>
    205e:	10 92 92 28 	sts	0x2892, r1	; 0x802892 <RATE_OF_HEATING+0x3>
    2062:	81 e0       	ldi	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:795
        CHECK_RATE_OF_HEATING = 1;
    2064:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <CHECK_RATE_OF_HEATING>
    2068:	b9 cf       	rjmp	.-142    	; 0x1fdc <RESET_CLICK()+0x32>
    206a:	08 95       	ret

0000206c <DEC_LONGPRESS()>:
DEC_LONGPRESS():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:800
      }
    }
    Butn.BUZZ_INTERVAL(50);
  }
}
    206c:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:734

}

void DEC_LONGPRESS()
{
  if (checkTempRaised == 0)
    2070:	81 11       	cpse	r24, r1
    2072:	1e c0       	rjmp	.+60     	; 0x20b0 <DEC_LONGPRESS()+0x44>
    2074:	81 e0       	ldi	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:736
  {
    BLINK_STATS = 1;
    2076:	80 93 ce 28 	sts	0x28CE, r24	; 0x8028ce <BLINK_STATS>
    207a:	20 91 41 28 	lds	r18, 0x2841	; 0x802841 <fast_inc>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:737
    fast_inc++;
    207e:	30 91 42 28 	lds	r19, 0x2842	; 0x802842 <fast_inc+0x1>
    2082:	2f 5f       	subi	r18, 0xFF	; 255
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	20 93 41 28 	sts	0x2841, r18	; 0x802841 <fast_inc>
    208a:	30 93 42 28 	sts	0x2842, r19	; 0x802842 <fast_inc+0x1>
    208e:	80 91 40 28 	lds	r24, 0x2840	; 0x802840 <INC5>
    2092:	8f 5f       	subi	r24, 0xFF	; 255
    2094:	80 93 40 28 	sts	0x2840, r24	; 0x802840 <INC5>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:740
    if (fast_inc < 600)
    {
      INC5++;
    2098:	28 35       	cpi	r18, 0x58	; 88
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:738
{
  if (checkTempRaised == 0)
  {
    BLINK_STATS = 1;
    fast_inc++;
    if (fast_inc < 600)
    209a:	32 40       	sbci	r19, 0x02	; 2
    209c:	3c f4       	brge	.+14     	; 0x20ac <DEC_LONGPRESS()+0x40>
    209e:	89 31       	cpi	r24, 0x19	; 25
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:741
    {
      INC5++;
      if (INC5 >= 25)
    20a0:	3c f0       	brlt	.+14     	; 0x20b0 <DEC_LONGPRESS()+0x44>
    20a2:	0e 94 9e 03 	call	0x73c	; 0x73c <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:743
      {
        Butn.SET_CHANGE_DOWN();
    20a6:	10 92 40 28 	sts	0x2840, r1	; 0x802840 <INC5>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:744
        INC5 = 0;
    20aa:	08 95       	ret
    20ac:	8a 30       	cpi	r24, 0x0A	; 10
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:750
      }
    }
    else
    {
      INC5++;
      if (INC5 >= 10)
    20ae:	cc f7       	brge	.-14     	; 0x20a2 <DEC_LONGPRESS()+0x36>
    20b0:	08 95       	ret

000020b2 <DEC_LONG_PRESS_START()>:
_Z20DEC_LONG_PRESS_STARTv():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:757
        Butn.SET_CHANGE_DOWN();
        INC5 = 0;
      }
    }
  }
}
    20b2:	08 95       	ret

000020b4 <INC_CLICK()>:
INC_CLICK():
    20b4:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:702
  }
}

void INC_CLICK()   //DEC_CLICK()
{
  if (checkTempRaised == 0)
    20b8:	81 11       	cpse	r24, r1
    20ba:	61 c0       	rjmp	.+194    	; 0x217e <INC_CLICK()+0xca>
    20bc:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:704
  {
    if (LONG_PRESS && !MODE_BUT_SINGLE_PRESS_IN_SETTINGS )   //SET_LONG_VALUE[SELECTION_PARAMETER]
    20c0:	88 23       	and	r24, r24
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <INC_CLICK()+0x12>
    20c4:	5a c0       	rjmp	.+180    	; 0x217a <INC_CLICK()+0xc6>
    20c6:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    20ca:	81 11       	cpse	r24, r1
    20cc:	56 c0       	rjmp	.+172    	; 0x217a <INC_CLICK()+0xc6>
    20ce:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <SELECTION_PARAMETER>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:707
    {

      if ( SELECTION_PARAMETER == Time_Mode )                                      SELECTION_PARAMETER = Auto_Resume_Enable;  //if ( SELECTION_PARAMETER == 0 &&  VENT_VALUE_SET == 1 )             SELECTION_PARAMETER = 15;
    20d2:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	39 f4       	brne	.+14     	; 0x20e8 <INC_CLICK()+0x34>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <SELECTION_PARAMETER>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:708
      else if ( SELECTION_PARAMETER == Auto_Resume_Enable )                             SELECTION_PARAMETER = Safe_Value_ON_OFF;
    20e2:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <SELECTION_PARAMETER+0x1>
    20e6:	08 95       	ret
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	91 05       	cpc	r25, r1
    20ec:	19 f4       	brne	.+6      	; 0x20f4 <INC_CLICK()+0x40>
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	f5 cf       	rjmp	.-22     	; 0x20de <INC_CLICK()+0x2a>
    20f4:	82 30       	cpi	r24, 0x02	; 2
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:709
      else if ( SELECTION_PARAMETER == Safe_Value_ON_OFF  && SAFE_VALUE_SET_DEG)   SELECTION_PARAMETER = SafeValue;
    20f6:	91 05       	cpc	r25, r1
    20f8:	39 f4       	brne	.+14     	; 0x2108 <INC_CLICK()+0x54>
    20fa:	20 91 0d 29 	lds	r18, 0x290D	; 0x80290d <SAFE_VALUE_SET_DEG>
    20fe:	22 23       	and	r18, r18
    2100:	f9 f0       	breq	.+62     	; 0x2140 <INC_CLICK()+0x8c>
    2102:	81 e1       	ldi	r24, 0x11	; 17
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	eb cf       	rjmp	.-42     	; 0x20de <INC_CLICK()+0x2a>
    2108:	81 31       	cpi	r24, 0x11	; 17
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:710
      else if ( SELECTION_PARAMETER == SafeValue )                                 SELECTION_PARAMETER = Calibration_Selection;
    210a:	91 05       	cpc	r25, r1
    210c:	19 f4       	brne	.+6      	; 0x2114 <INC_CLICK()+0x60>
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	e5 cf       	rjmp	.-54     	; 0x20de <INC_CLICK()+0x2a>
    2114:	83 30       	cpi	r24, 0x03	; 3
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:711
      else if ( SELECTION_PARAMETER == Calibration_Selection )                     SELECTION_PARAMETER = OnePointCalibration;
    2116:	91 05       	cpc	r25, r1
    2118:	19 f4       	brne	.+6      	; 0x2120 <INC_CLICK()+0x6c>
    211a:	84 e0       	ldi	r24, 0x04	; 4
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	df cf       	rjmp	.-66     	; 0x20de <INC_CLICK()+0x2a>
    2120:	84 30       	cpi	r24, 0x04	; 4
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:712
      else if ( SELECTION_PARAMETER == OnePointCalibration )                       SELECTION_PARAMETER = Cal2LowTemp_Set_Display;
    2122:	91 05       	cpc	r25, r1
    2124:	19 f4       	brne	.+6      	; 0x212c <INC_CLICK()+0x78>
    2126:	86 e0       	ldi	r24, 0x06	; 6
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	d9 cf       	rjmp	.-78     	; 0x20de <INC_CLICK()+0x2a>
    212c:	20 91 cd 28 	lds	r18, 0x28CD	; 0x8028cd <CAL2_START>
    2130:	86 30       	cpi	r24, 0x06	; 6
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:713
      else if (SELECTION_PARAMETER == Cal2LowTemp_Set_Display &&  CAL2_START )     SELECTION_PARAMETER = Cal2LowTemp_Enter_Heat;
    2132:	91 05       	cpc	r25, r1
    2134:	29 f4       	brne	.+10     	; 0x2140 <INC_CLICK()+0x8c>
    2136:	22 23       	and	r18, r18
    2138:	19 f0       	breq	.+6      	; 0x2140 <INC_CLICK()+0x8c>
    213a:	88 e0       	ldi	r24, 0x08	; 8
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	cf cf       	rjmp	.-98     	; 0x20de <INC_CLICK()+0x2a>
    2140:	20 91 cd 28 	lds	r18, 0x28CD	; 0x8028cd <CAL2_START>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:714
      else if (CAL2_START == 0 && SELECTION_PARAMETER >= Cal2LowTemp_Set_Display && SELECTION_PARAMETER <= Cal2_Complete_Display  )
    2144:	21 11       	cpse	r18, r1
    2146:	09 c0       	rjmp	.+18     	; 0x215a <INC_CLICK()+0xa6>
    2148:	86 30       	cpi	r24, 0x06	; 6
    214a:	91 05       	cpc	r25, r1
    214c:	a4 f0       	brlt	.+40     	; 0x2176 <INC_CLICK()+0xc2>
    214e:	8d 30       	cpi	r24, 0x0D	; 13
    2150:	91 05       	cpc	r25, r1
    2152:	1c f4       	brge	.+6      	; 0x215a <INC_CLICK()+0xa6>
    2154:	8d e0       	ldi	r24, 0x0D	; 13
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:715
        SELECTION_PARAMETER = Energy_Mode_Selection;
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	c2 cf       	rjmp	.-124    	; 0x20de <INC_CLICK()+0x2a>
    215a:	8d 30       	cpi	r24, 0x0D	; 13
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:717

      else if (SELECTION_PARAMETER == Energy_Mode_Selection )                       SELECTION_PARAMETER = FactoryAndSure_Reset; //0;   17 on both place
    215c:	91 05       	cpc	r25, r1
    215e:	19 f4       	brne	.+6      	; 0x2166 <INC_CLICK()+0xb2>
    2160:	8e e0       	ldi	r24, 0x0E	; 14
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	bc cf       	rjmp	.-136    	; 0x20de <INC_CLICK()+0x2a>
    2166:	8e 30       	cpi	r24, 0x0E	; 14
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:718
      else if (SELECTION_PARAMETER == FactoryAndSure_Reset )                        SELECTION_PARAMETER = Time_Mode;           //0;   17 on both place
    2168:	91 05       	cpc	r25, r1
    216a:	29 f4       	brne	.+10     	; 0x2176 <INC_CLICK()+0xc2>
    216c:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <SELECTION_PARAMETER>
    2170:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <SELECTION_PARAMETER+0x1>
    2174:	08 95       	ret
    2176:	01 96       	adiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:719
      else                                                                         SELECTION_PARAMETER++;
    2178:	b2 cf       	rjmp	.-156    	; 0x20de <INC_CLICK()+0x2a>
    217a:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <Bclass::SET_CHANGE_UP() [clone .constprop.43]>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:722
      //    if (SELECTION_PARAMETER > 17)  SELECTION_PARAMETER = 17;
    }
    if (!LONG_PRESS  || (LONG_PRESS && MODE_BUT_SINGLE_PRESS_IN_SETTINGS ))       Butn.SET_CHANGE_UP();
    217e:	08 95       	ret

00002180 <INC_LONGPRESS()>:
INC_LONGPRESS():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:725

  }
}
    2180:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:666
  //  INC_LONGPRESS_START = millis();
}

void INC_LONGPRESS()
{
  if (checkTempRaised == 0)
    2184:	81 11       	cpse	r24, r1
    2186:	1e c0       	rjmp	.+60     	; 0x21c4 <INC_LONGPRESS()+0x44>
    2188:	81 e0       	ldi	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:668
  {
    BLINK_STATS = 1;
    218a:	80 93 ce 28 	sts	0x28CE, r24	; 0x8028ce <BLINK_STATS>
    218e:	20 91 41 28 	lds	r18, 0x2841	; 0x802841 <fast_inc>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:669
    fast_inc++;
    2192:	30 91 42 28 	lds	r19, 0x2842	; 0x802842 <fast_inc+0x1>
    2196:	2f 5f       	subi	r18, 0xFF	; 255
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	20 93 41 28 	sts	0x2841, r18	; 0x802841 <fast_inc>
    219e:	30 93 42 28 	sts	0x2842, r19	; 0x802842 <fast_inc+0x1>
    21a2:	80 91 40 28 	lds	r24, 0x2840	; 0x802840 <INC5>
    21a6:	8f 5f       	subi	r24, 0xFF	; 255
    21a8:	80 93 40 28 	sts	0x2840, r24	; 0x802840 <INC5>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:672
    if (fast_inc < 600)
    {
      INC5++;
    21ac:	28 35       	cpi	r18, 0x58	; 88
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:670
{
  if (checkTempRaised == 0)
  {
    BLINK_STATS = 1;
    fast_inc++;
    if (fast_inc < 600)
    21ae:	32 40       	sbci	r19, 0x02	; 2
    21b0:	3c f4       	brge	.+14     	; 0x21c0 <INC_LONGPRESS()+0x40>
    21b2:	89 31       	cpi	r24, 0x19	; 25
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:673
    {
      INC5++;
      if (INC5 >= 25)
    21b4:	3c f0       	brlt	.+14     	; 0x21c4 <INC_LONGPRESS()+0x44>
    21b6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Bclass::SET_CHANGE_UP() [clone .constprop.43]>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:675
      {
        Butn.SET_CHANGE_UP();
    21ba:	10 92 40 28 	sts	0x2840, r1	; 0x802840 <INC5>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:676
        INC5 = 0;
    21be:	08 95       	ret
    21c0:	8a 30       	cpi	r24, 0x0A	; 10
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:682
      }
    }
    else
    {
      INC5++;
      if (INC5 >= 10)
    21c2:	cc f7       	brge	.-14     	; 0x21b6 <INC_LONGPRESS()+0x36>
    21c4:	08 95       	ret

000021c6 <INC_LONG_PRESS_START()>:
_Z20INC_LONG_PRESS_STARTv():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:689
        Butn.SET_CHANGE_UP();
        INC5 = 0;
      }
    }
  }
}
    21c6:	08 95       	ret

000021c8 <DEC_CLICK()>:
DEC_CLICK():
    21c8:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:619
  }
}

void DEC_CLICK()    //INC_CLICK()
{
  if (checkTempRaised == 0)
    21cc:	81 11       	cpse	r24, r1
    21ce:	53 c0       	rjmp	.+166    	; 0x2276 <DEC_CLICK()+0xae>
    21d0:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:621
  {
    if (LONG_PRESS && !MODE_BUT_SINGLE_PRESS_IN_SETTINGS )    // Auto_Resume_Enable
    21d4:	88 23       	and	r24, r24
    21d6:	09 f4       	brne	.+2      	; 0x21da <DEC_CLICK()+0x12>
    21d8:	4c c0       	rjmp	.+152    	; 0x2272 <DEC_CLICK()+0xaa>
    21da:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    21de:	81 11       	cpse	r24, r1
    21e0:	48 c0       	rjmp	.+144    	; 0x2272 <DEC_CLICK()+0xaa>
    21e2:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <SELECTION_PARAMETER>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:624
    {

      if      ( SELECTION_PARAMETER == Time_Mode )                  SELECTION_PARAMETER = FactoryAndSure_Reset;
    21e6:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	39 f4       	brne	.+14     	; 0x21fc <DEC_CLICK()+0x34>
    21ee:	8e e0       	ldi	r24, 0x0E	; 14
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <SELECTION_PARAMETER>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:625
      else if ( SELECTION_PARAMETER == FactoryAndSure_Reset )       SELECTION_PARAMETER = Energy_Mode_Selection;
    21f6:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <SELECTION_PARAMETER+0x1>
    21fa:	08 95       	ret
    21fc:	8e 30       	cpi	r24, 0x0E	; 14
    21fe:	91 05       	cpc	r25, r1
    2200:	19 f4       	brne	.+6      	; 0x2208 <DEC_CLICK()+0x40>
    2202:	8d e0       	ldi	r24, 0x0D	; 13
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	f5 cf       	rjmp	.-22     	; 0x21f2 <DEC_CLICK()+0x2a>
    2208:	8d 30       	cpi	r24, 0x0D	; 13
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:626
      else if ( SELECTION_PARAMETER == Energy_Mode_Selection )      SELECTION_PARAMETER = Cal2LowTemp_Set_Display;
    220a:	91 05       	cpc	r25, r1
    220c:	19 f4       	brne	.+6      	; 0x2214 <DEC_CLICK()+0x4c>
    220e:	86 e0       	ldi	r24, 0x06	; 6
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	ef cf       	rjmp	.-34     	; 0x21f2 <DEC_CLICK()+0x2a>
    2214:	87 30       	cpi	r24, 0x07	; 7
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:627
      else if ( SELECTION_PARAMETER == Cal2HighTemp_Set_Display)    SELECTION_PARAMETER = Cal2LowTemp_Set_Display;
    2216:	91 05       	cpc	r25, r1
    2218:	d1 f3       	breq	.-12     	; 0x220e <DEC_CLICK()+0x46>
    221a:	86 30       	cpi	r24, 0x06	; 6
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:628
      else if ( SELECTION_PARAMETER == Cal2LowTemp_Set_Display )    SELECTION_PARAMETER = OnePointCalibration;
    221c:	91 05       	cpc	r25, r1
    221e:	19 f4       	brne	.+6      	; 0x2226 <DEC_CLICK()+0x5e>
    2220:	84 e0       	ldi	r24, 0x04	; 4
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	e6 cf       	rjmp	.-52     	; 0x21f2 <DEC_CLICK()+0x2a>
    2226:	84 30       	cpi	r24, 0x04	; 4
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:629
      else if ( SELECTION_PARAMETER == OnePointCalibration   )      SELECTION_PARAMETER = Calibration_Selection;
    2228:	91 05       	cpc	r25, r1
    222a:	19 f4       	brne	.+6      	; 0x2232 <DEC_CLICK()+0x6a>
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	e0 cf       	rjmp	.-64     	; 0x21f2 <DEC_CLICK()+0x2a>
    2232:	81 31       	cpi	r24, 0x11	; 17
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:630
      else if ( SELECTION_PARAMETER == SafeValue )                  SELECTION_PARAMETER = Safe_Value_ON_OFF;
    2234:	91 05       	cpc	r25, r1
    2236:	19 f4       	brne	.+6      	; 0x223e <DEC_CLICK()+0x76>
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	da cf       	rjmp	.-76     	; 0x21f2 <DEC_CLICK()+0x2a>
    223e:	82 30       	cpi	r24, 0x02	; 2
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:631
      else if ( SELECTION_PARAMETER == Safe_Value_ON_OFF )          SELECTION_PARAMETER = Auto_Resume_Enable;
    2240:	91 05       	cpc	r25, r1
    2242:	19 f4       	brne	.+6      	; 0x224a <DEC_CLICK()+0x82>
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	d4 cf       	rjmp	.-88     	; 0x21f2 <DEC_CLICK()+0x2a>
    224a:	81 30       	cpi	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:632
      else if ( SELECTION_PARAMETER == Auto_Resume_Enable )         SELECTION_PARAMETER = Time_Mode;
    224c:	91 05       	cpc	r25, r1
    224e:	29 f4       	brne	.+10     	; 0x225a <DEC_CLICK()+0x92>
    2250:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <SELECTION_PARAMETER>
    2254:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <SELECTION_PARAMETER+0x1>
    2258:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:633
      else if ( SELECTION_PARAMETER == Calibration_Selection && SAFE_VALUE_SET_DEG)
    225a:	83 30       	cpi	r24, 0x03	; 3
    225c:	91 05       	cpc	r25, r1
    225e:	39 f4       	brne	.+14     	; 0x226e <DEC_CLICK()+0xa6>
    2260:	20 91 0d 29 	lds	r18, 0x290D	; 0x80290d <SAFE_VALUE_SET_DEG>
    2264:	22 23       	and	r18, r18
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:634
        SELECTION_PARAMETER = SafeValue;
    2266:	19 f0       	breq	.+6      	; 0x226e <DEC_CLICK()+0xa6>
    2268:	81 e1       	ldi	r24, 0x11	; 17
    226a:	90 e0       	ldi	r25, 0x00	; 0
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:635
      else                                                          SELECTION_PARAMETER--;
    226c:	c2 cf       	rjmp	.-124    	; 0x21f2 <DEC_CLICK()+0x2a>
    226e:	01 97       	sbiw	r24, 0x01	; 1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:654
        else                                             SELECTION_PARAMETER--;

        if (SELECTION_PARAMETER < Time_Mode) SELECTION_PARAMETER = Time_Mode;
      */
    }
    if (!LONG_PRESS  || (LONG_PRESS && MODE_BUT_SINGLE_PRESS_IN_SETTINGS ))    Butn.SET_CHANGE_DOWN();
    2270:	c0 cf       	rjmp	.-128    	; 0x21f2 <DEC_CLICK()+0x2a>
    2272:	0c 94 9e 03 	jmp	0x73c	; 0x73c <Bclass::SET_CHANGE_DOWN() [clone .constprop.42]>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:600
  //  digitalWrite(BUZZER, LOW);
}

void MODE_LONG_PRESS_START()
{
  if (checkTempRaised == 0)
    2276:	08 95       	ret

00002278 <MODE_LONG_PRESS_START()>:
MODE_LONG_PRESS_START():
    2278:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
    227c:	81 11       	cpse	r24, r1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:604
  {

    //  EEPROM.write(0, TIME_SOCK_OR_TOTAL);
    if (!ENTER_BUT)  //mode single press incriment
    227e:	16 c0       	rjmp	.+44     	; 0x22ac <MODE_LONG_PRESS_START()+0x34>
    2280:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    2284:	81 11       	cpse	r24, r1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:606
    {
      if (!LONG_PRESS )
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <MODE_LONG_PRESS_START()+0x2e>
    2288:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
    228c:	81 11       	cpse	r24, r1
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:608
      {
        i = 350;
    228e:	0b c0       	rjmp	.+22     	; 0x22a6 <MODE_LONG_PRESS_START()+0x2e>
    2290:	8e e5       	ldi	r24, 0x5E	; 94
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    2298:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:609
        LONG_PRESS = 1;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	80 93 55 29 	sts	0x2955, r24	; 0x802955 <LONG_PRESS>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:610
        RST_BUTT = 1;
    22a2:	80 93 be 28 	sts	0x28BE, r24	; 0x8028be <RST_BUTT>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:613
      }
    }
    Butn.BUZZ_INTERVAL(200);
    22a6:	88 ec       	ldi	r24, 0xC8	; 200
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	d3 cc       	rjmp	.-1626   	; 0x1c52 <Bclass::BUZZ_INTERVAL(int) [clone .constprop.25]>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:615
  }
}
    22ac:	08 95       	ret

000022ae <MODE_LONG_PRESS_STOP()>:
_Z20MODE_LONG_PRESS_STOPv():
    22ae:	08 95       	ret

000022b0 <STOP_BUZZER1()>:
STOP_BUZZER1():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:349
  BUZZ_TICK1.start();
}

void STOP_BUZZER1()
{
  BUZZ_TICK2.start();
    22b0:	89 e4       	ldi	r24, 0x49	; 73
    22b2:	9b e2       	ldi	r25, 0x2B	; 43
    22b4:	ae dc       	rcall	.-1700   	; 0x1c12 <Ticker::start()>
digitalWrite():
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	85 e1       	ldi	r24, 0x15	; 21
    22ba:	0c 94 ed 08 	jmp	0x11da	; 0x11da <digitalWrite.part.2>

000022be <STOP_BUZZER2()>:
    22be:	60 e0       	ldi	r22, 0x00	; 0
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:331
  digitalWrite(BUZZER, HIGH);
  BUZZ.start();
}

void STOP_BUZZER2()
{
    22c0:	85 e1       	ldi	r24, 0x15	; 21
    22c2:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
STOP_BUZZER2():
    22c6:	80 91 8e 28 	lds	r24, 0x288E	; 0x80288e <REPETATION_FLAG>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:333
  digitalWrite(BUZZER, LOW);
  if (REPETATION_FLAG) FOR_REP++;
    22ca:	88 23       	and	r24, r24
    22cc:	49 f0       	breq	.+18     	; 0x22e0 <STOP_BUZZER2()+0x22>
    22ce:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <FOR_REP>
    22d2:	90 91 98 28 	lds	r25, 0x2898	; 0x802898 <FOR_REP+0x1>
    22d6:	01 96       	adiw	r24, 0x01	; 1
    22d8:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <FOR_REP>
    22dc:	90 93 98 28 	sts	0x2898, r25	; 0x802898 <FOR_REP+0x1>
    22e0:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <FOR_REP2>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:334
  FOR_REP2++;
    22e4:	90 91 96 28 	lds	r25, 0x2896	; 0x802896 <FOR_REP2+0x1>
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	80 93 95 28 	sts	0x2895, r24	; 0x802895 <FOR_REP2>
    22ee:	90 93 96 28 	sts	0x2896, r25	; 0x802896 <FOR_REP2+0x1>
    22f2:	08 95       	ret

000022f4 <CHANGE_FLAG()>:
CHANGE_FLAG():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:335
}
    22f4:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <CHANGE1>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:316
  if (EXECUTE_PID_LOOP) Butn.PID_RUN();
}

void CHANGE_FLAG()
{
  if (CHANGE1)
    22f8:	88 23       	and	r24, r24
    22fa:	51 f0       	breq	.+20     	; 0x2310 <CHANGE_FLAG()+0x1c>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:318
  {
    if (TIMER_LED_BLINK) TIMER_LED_BLINK = 0;
    22fc:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <TIMER_LED_BLINK>
    2300:	88 23       	and	r24, r24
    2302:	19 f0       	breq	.+6      	; 0x230a <CHANGE_FLAG()+0x16>
    2304:	10 92 4d 28 	sts	0x284D, r1	; 0x80284d <TIMER_LED_BLINK>
    2308:	08 95       	ret
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:319
    else                TIMER_LED_BLINK = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <TIMER_LED_BLINK>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:321
  }
}
    2310:	08 95       	ret

00002312 <PID_LOOP()>:
PID_LOOP():
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:310
  led.DISPLAY_NUMBER1();
  led.DISPLAY_NUMBER2();
}

void PID_LOOP()
{
    2312:	3f 92       	push	r3
    2314:	4f 92       	push	r4
    2316:	5f 92       	push	r5
    2318:	6f 92       	push	r6
    231a:	7f 92       	push	r7
    231c:	8f 92       	push	r8
    231e:	9f 92       	push	r9
    2320:	af 92       	push	r10
    2322:	bf 92       	push	r11
    2324:	cf 92       	push	r12
    2326:	df 92       	push	r13
    2328:	ef 92       	push	r14
    232a:	ff 92       	push	r15
    232c:	0f 93       	push	r16
    232e:	1f 93       	push	r17
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	2e 97       	sbiw	r28, 0x0e	; 14
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	de bf       	out	0x3e, r29	; 62
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:311
  if (EXECUTE_PID_LOOP) Butn.PID_RUN();
    233e:	80 91 bd 28 	lds	r24, 0x28BD	; 0x8028bd <EXECUTE_PID_LOOP>
    2342:	88 23       	and	r24, r24
    2344:	09 f4       	brne	.+2      	; 0x2348 <PID_LOOP()+0x36>
    2346:	2e c1       	rjmp	.+604    	; 0x25a4 <PID_LOOP()+0x292>
Compute():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:60
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute()
{
   if(!inAuto) return false;
    2348:	80 91 7a 2a 	lds	r24, 0x2A7A	; 0x802a7a <myPID+0x3a>
    234c:	88 23       	and	r24, r24
    234e:	09 f4       	brne	.+2      	; 0x2352 <PID_LOOP()+0x40>
    2350:	29 c1       	rjmp	.+594    	; 0x25a4 <PID_LOOP()+0x292>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:61
   unsigned long now = millis();
    2352:	8f d8       	rcall	.-3810   	; 0x1472 <millis>
    2354:	6d 83       	std	Y+5, r22	; 0x05
    2356:	7e 83       	std	Y+6, r23	; 0x06
    2358:	8f 83       	std	Y+7, r24	; 0x07
    235a:	98 87       	std	Y+8, r25	; 0x08
    235c:	80 91 62 2a 	lds	r24, 0x2A62	; 0x802a62 <myPID+0x22>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:62
   unsigned long timeChange = (now - lastTime);
    2360:	90 91 63 2a 	lds	r25, 0x2A63	; 0x802a63 <myPID+0x23>
    2364:	a0 91 64 2a 	lds	r26, 0x2A64	; 0x802a64 <myPID+0x24>
    2368:	b0 91 65 2a 	lds	r27, 0x2A65	; 0x802a65 <myPID+0x25>
    236c:	4d 81       	ldd	r20, Y+5	; 0x05
    236e:	5e 81       	ldd	r21, Y+6	; 0x06
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	48 1b       	sub	r20, r24
    2376:	59 0b       	sbc	r21, r25
    2378:	6a 0b       	sbc	r22, r26
    237a:	7b 0b       	sbc	r23, r27
    237c:	80 91 6e 2a 	lds	r24, 0x2A6E	; 0x802a6e <myPID+0x2e>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:63
   if(timeChange>=SampleTime)
    2380:	90 91 6f 2a 	lds	r25, 0x2A6F	; 0x802a6f <myPID+0x2f>
    2384:	a0 91 70 2a 	lds	r26, 0x2A70	; 0x802a70 <myPID+0x30>
    2388:	b0 91 71 2a 	lds	r27, 0x2A71	; 0x802a71 <myPID+0x31>
    238c:	48 17       	cp	r20, r24
    238e:	59 07       	cpc	r21, r25
    2390:	6a 07       	cpc	r22, r26
    2392:	7b 07       	cpc	r23, r27
    2394:	08 f4       	brcc	.+2      	; 0x2398 <PID_LOOP()+0x86>
    2396:	06 c1       	rjmp	.+524    	; 0x25a4 <PID_LOOP()+0x292>
    2398:	e0 91 5c 2a 	lds	r30, 0x2A5C	; 0x802a5c <myPID+0x1c>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:66
   {
      /*Compute all the working error variables*/
      double input = *myInput;
    239c:	f0 91 5d 2a 	lds	r31, 0x2A5D	; 0x802a5d <myPID+0x1d>
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
    23a4:	a2 81       	ldd	r26, Z+2	; 0x02
    23a6:	b3 81       	ldd	r27, Z+3	; 0x03
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	ab 83       	std	Y+3, r26	; 0x03
    23ae:	bc 83       	std	Y+4, r27	; 0x04
    23b0:	e0 91 60 2a 	lds	r30, 0x2A60	; 0x802a60 <myPID+0x20>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:67
      double error = *mySetpoint - input;
    23b4:	f0 91 61 2a 	lds	r31, 0x2A61	; 0x802a61 <myPID+0x21>
    23b8:	9c 01       	movw	r18, r24
    23ba:	ad 01       	movw	r20, r26
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    23c8:	4b 01       	movw	r8, r22
    23ca:	5c 01       	movw	r10, r24
    23cc:	20 91 6a 2a 	lds	r18, 0x2A6A	; 0x802a6a <myPID+0x2a>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:68
      double dInput = (input - lastInput);
    23d0:	30 91 6b 2a 	lds	r19, 0x2A6B	; 0x802a6b <myPID+0x2b>
    23d4:	40 91 6c 2a 	lds	r20, 0x2A6C	; 0x802a6c <myPID+0x2c>
    23d8:	50 91 6d 2a 	lds	r21, 0x2A6D	; 0x802a6d <myPID+0x2d>
    23dc:	69 81       	ldd	r22, Y+1	; 0x01
    23de:	7a 81       	ldd	r23, Y+2	; 0x02
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    23e8:	6b 01       	movw	r12, r22
    23ea:	7c 01       	movw	r14, r24
    23ec:	20 91 50 2a 	lds	r18, 0x2A50	; 0x802a50 <myPID+0x10>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:69
      outputSum+= (ki * error);
    23f0:	30 91 51 2a 	lds	r19, 0x2A51	; 0x802a51 <myPID+0x11>
    23f4:	40 91 52 2a 	lds	r20, 0x2A52	; 0x802a52 <myPID+0x12>
    23f8:	50 91 53 2a 	lds	r21, 0x2A53	; 0x802a53 <myPID+0x13>
    23fc:	c5 01       	movw	r24, r10
    23fe:	b4 01       	movw	r22, r8
    2400:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    2404:	20 91 66 2a 	lds	r18, 0x2A66	; 0x802a66 <myPID+0x26>
    2408:	30 91 67 2a 	lds	r19, 0x2A67	; 0x802a67 <myPID+0x27>
    240c:	40 91 68 2a 	lds	r20, 0x2A68	; 0x802a68 <myPID+0x28>
    2410:	50 91 69 2a 	lds	r21, 0x2A69	; 0x802a69 <myPID+0x29>
    2414:	0e 94 2e 39 	call	0x725c	; 0x725c <__addsf3>
    2418:	2b 01       	movw	r4, r22
    241a:	3c 01       	movw	r6, r24
    241c:	40 92 66 2a 	sts	0x2A66, r4	; 0x802a66 <myPID+0x26>
    2420:	50 92 67 2a 	sts	0x2A67, r5	; 0x802a67 <myPID+0x27>
    2424:	60 92 68 2a 	sts	0x2A68, r6	; 0x802a68 <myPID+0x28>
    2428:	70 92 69 2a 	sts	0x2A69, r7	; 0x802a69 <myPID+0x29>
    242c:	30 90 7b 2a 	lds	r3, 0x2A7B	; 0x802a7b <myPID+0x3b>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:72

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
    2430:	31 10       	cpse	r3, r1
    2432:	1a c0       	rjmp	.+52     	; 0x2468 <PID_LOOP()+0x156>
    2434:	20 91 4c 2a 	lds	r18, 0x2A4C	; 0x802a4c <myPID+0xc>
    2438:	30 91 4d 2a 	lds	r19, 0x2A4D	; 0x802a4d <myPID+0xd>
    243c:	40 91 4e 2a 	lds	r20, 0x2A4E	; 0x802a4e <myPID+0xe>
    2440:	50 91 4f 2a 	lds	r21, 0x2A4F	; 0x802a4f <myPID+0xf>
    2444:	c7 01       	movw	r24, r14
    2446:	b6 01       	movw	r22, r12
    2448:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    244c:	9b 01       	movw	r18, r22
    244e:	ac 01       	movw	r20, r24
    2450:	c3 01       	movw	r24, r6
    2452:	b2 01       	movw	r22, r4
    2454:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    2458:	60 93 66 2a 	sts	0x2A66, r22	; 0x802a66 <myPID+0x26>
    245c:	70 93 67 2a 	sts	0x2A67, r23	; 0x802a67 <myPID+0x27>
    2460:	80 93 68 2a 	sts	0x2A68, r24	; 0x802a68 <myPID+0x28>
    2464:	90 93 69 2a 	sts	0x2A69, r25	; 0x802a69 <myPID+0x29>
    2468:	40 90 66 2a 	lds	r4, 0x2A66	; 0x802a66 <myPID+0x26>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:74

      if(outputSum > outMax) outputSum= outMax;
    246c:	50 90 67 2a 	lds	r5, 0x2A67	; 0x802a67 <myPID+0x27>
    2470:	60 90 68 2a 	lds	r6, 0x2A68	; 0x802a68 <myPID+0x28>
    2474:	70 90 69 2a 	lds	r7, 0x2A69	; 0x802a69 <myPID+0x29>
    2478:	10 91 76 2a 	lds	r17, 0x2A76	; 0x802a76 <myPID+0x36>
    247c:	90 91 77 2a 	lds	r25, 0x2A77	; 0x802a77 <myPID+0x37>
    2480:	9e 87       	std	Y+14, r25	; 0x0e
    2482:	a0 91 78 2a 	lds	r26, 0x2A78	; 0x802a78 <myPID+0x38>
    2486:	ad 87       	std	Y+13, r26	; 0x0d
    2488:	00 91 79 2a 	lds	r16, 0x2A79	; 0x802a79 <myPID+0x39>
    248c:	21 2f       	mov	r18, r17
    248e:	39 2f       	mov	r19, r25
    2490:	4a 2f       	mov	r20, r26
    2492:	50 2f       	mov	r21, r16
    2494:	c3 01       	movw	r24, r6
    2496:	b2 01       	movw	r22, r4
    2498:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    249c:	18 16       	cp	r1, r24
    249e:	0c f0       	brlt	.+2      	; 0x24a2 <PID_LOOP()+0x190>
    24a0:	96 c0       	rjmp	.+300    	; 0x25ce <PID_LOOP()+0x2bc>
    24a2:	81 2f       	mov	r24, r17
    24a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a6:	ad 85       	ldd	r26, Y+13	; 0x0d
    24a8:	b0 2f       	mov	r27, r16
    24aa:	80 93 66 2a 	sts	0x2A66, r24	; 0x802a66 <myPID+0x26>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:75
      else if(outputSum < outMin) outputSum= outMin;
    24ae:	90 93 67 2a 	sts	0x2A67, r25	; 0x802a67 <myPID+0x27>
    24b2:	a0 93 68 2a 	sts	0x2A68, r26	; 0x802a68 <myPID+0x28>
    24b6:	b0 93 69 2a 	sts	0x2A69, r27	; 0x802a69 <myPID+0x29>
    24ba:	33 20       	and	r3, r3
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:79

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <PID_LOOP()+0x1ae>
    24be:	a0 c0       	rjmp	.+320    	; 0x2600 <PID_LOOP()+0x2ee>
    24c0:	20 91 4c 2a 	lds	r18, 0x2A4C	; 0x802a4c <myPID+0xc>
    24c4:	30 91 4d 2a 	lds	r19, 0x2A4D	; 0x802a4d <myPID+0xd>
    24c8:	40 91 4e 2a 	lds	r20, 0x2A4E	; 0x802a4e <myPID+0xe>
    24cc:	50 91 4f 2a 	lds	r21, 0x2A4F	; 0x802a4f <myPID+0xf>
    24d0:	c5 01       	movw	r24, r10
    24d2:	b4 01       	movw	r22, r8
    24d4:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    24d8:	4b 01       	movw	r8, r22
    24da:	5c 01       	movw	r10, r24
    24dc:	20 91 54 2a 	lds	r18, 0x2A54	; 0x802a54 <myPID+0x14>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:83
      else output = 0;

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    24e0:	30 91 55 2a 	lds	r19, 0x2A55	; 0x802a55 <myPID+0x15>
    24e4:	40 91 56 2a 	lds	r20, 0x2A56	; 0x802a56 <myPID+0x16>
    24e8:	50 91 57 2a 	lds	r21, 0x2A57	; 0x802a57 <myPID+0x17>
    24ec:	c7 01       	movw	r24, r14
    24ee:	b6 01       	movw	r22, r12
    24f0:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    24f4:	9b 01       	movw	r18, r22
    24f6:	ac 01       	movw	r20, r24
    24f8:	60 91 66 2a 	lds	r22, 0x2A66	; 0x802a66 <myPID+0x26>
    24fc:	70 91 67 2a 	lds	r23, 0x2A67	; 0x802a67 <myPID+0x27>
    2500:	80 91 68 2a 	lds	r24, 0x2A68	; 0x802a68 <myPID+0x28>
    2504:	90 91 69 2a 	lds	r25, 0x2A69	; 0x802a69 <myPID+0x29>
    2508:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    250c:	a5 01       	movw	r20, r10
    250e:	94 01       	movw	r18, r8
    2510:	0e 94 2e 39 	call	0x725c	; 0x725c <__addsf3>
    2514:	6b 01       	movw	r12, r22
    2516:	7c 01       	movw	r14, r24
    2518:	9b 01       	movw	r18, r22
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:85
	  
	    if(output > outMax) output = outMax;
    251a:	ac 01       	movw	r20, r24
    251c:	61 2f       	mov	r22, r17
    251e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	90 2f       	mov	r25, r16
    2524:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    2528:	87 fd       	sbrc	r24, 7
    252a:	18 c0       	rjmp	.+48     	; 0x255c <PID_LOOP()+0x24a>
    252c:	10 91 72 2a 	lds	r17, 0x2A72	; 0x802a72 <myPID+0x32>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:86
      else if(output < outMin) output = outMin;
    2530:	90 91 73 2a 	lds	r25, 0x2A73	; 0x802a73 <myPID+0x33>
    2534:	9e 87       	std	Y+14, r25	; 0x0e
    2536:	a0 91 74 2a 	lds	r26, 0x2A74	; 0x802a74 <myPID+0x34>
    253a:	ad 87       	std	Y+13, r26	; 0x0d
    253c:	00 91 75 2a 	lds	r16, 0x2A75	; 0x802a75 <myPID+0x35>
    2540:	21 2f       	mov	r18, r17
    2542:	39 2f       	mov	r19, r25
    2544:	4a 2f       	mov	r20, r26
    2546:	50 2f       	mov	r21, r16
    2548:	b6 01       	movw	r22, r12
    254a:	c7 01       	movw	r24, r14
    254c:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    2550:	87 fd       	sbrc	r24, 7
    2552:	04 c0       	rjmp	.+8      	; 0x255c <PID_LOOP()+0x24a>
PID_LOOP():
    2554:	1c 2d       	mov	r17, r12
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:83
	   double output;
      if(pOnE) output = kp * error;
      else output = 0;

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    2556:	de 86       	std	Y+14, r13	; 0x0e
    2558:	ed 86       	std	Y+13, r14	; 0x0d
    255a:	0f 2d       	mov	r16, r15
Compute():
    255c:	e0 91 5e 2a 	lds	r30, 0x2A5E	; 0x802a5e <myPID+0x1e>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:87
	  
	    if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	    *myOutput = output;
    2560:	f0 91 5f 2a 	lds	r31, 0x2A5F	; 0x802a5f <myPID+0x1f>
    2564:	81 2f       	mov	r24, r17
    2566:	9e 85       	ldd	r25, Y+14	; 0x0e
    2568:	ad 85       	ldd	r26, Y+13	; 0x0d
    256a:	b0 2f       	mov	r27, r16
    256c:	80 83       	st	Z, r24
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	a2 83       	std	Z+2, r26	; 0x02
    2572:	b3 83       	std	Z+3, r27	; 0x03
    2574:	89 81       	ldd	r24, Y+1	; 0x01
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:90

      /*Remember some variables for next time*/
      lastInput = input;
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	ab 81       	ldd	r26, Y+3	; 0x03
    257a:	bc 81       	ldd	r27, Y+4	; 0x04
    257c:	80 93 6a 2a 	sts	0x2A6A, r24	; 0x802a6a <myPID+0x2a>
    2580:	90 93 6b 2a 	sts	0x2A6B, r25	; 0x802a6b <myPID+0x2b>
    2584:	a0 93 6c 2a 	sts	0x2A6C, r26	; 0x802a6c <myPID+0x2c>
    2588:	b0 93 6d 2a 	sts	0x2A6D, r27	; 0x802a6d <myPID+0x2d>
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:91
      lastTime = now;
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	af 81       	ldd	r26, Y+7	; 0x07
    2592:	b8 85       	ldd	r27, Y+8	; 0x08
    2594:	80 93 62 2a 	sts	0x2A62, r24	; 0x802a62 <myPID+0x22>
    2598:	90 93 63 2a 	sts	0x2A63, r25	; 0x802a63 <myPID+0x23>
    259c:	a0 93 64 2a 	sts	0x2A64, r26	; 0x802a64 <myPID+0x24>
    25a0:	b0 93 65 2a 	sts	0x2A65, r27	; 0x802a65 <myPID+0x25>
PID_LOOP():
    25a4:	2e 96       	adiw	r28, 0x0e	; 14
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:312
}
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	1f 91       	pop	r17
    25b0:	0f 91       	pop	r16
    25b2:	ff 90       	pop	r15
    25b4:	ef 90       	pop	r14
    25b6:	df 90       	pop	r13
    25b8:	cf 90       	pop	r12
    25ba:	bf 90       	pop	r11
    25bc:	af 90       	pop	r10
    25be:	9f 90       	pop	r9
    25c0:	8f 90       	pop	r8
    25c2:	7f 90       	pop	r7
    25c4:	6f 90       	pop	r6
    25c6:	5f 90       	pop	r5
    25c8:	4f 90       	pop	r4
    25ca:	3f 90       	pop	r3
    25cc:	08 95       	ret
Compute():
    25ce:	80 91 72 2a 	lds	r24, 0x2A72	; 0x802a72 <myPID+0x32>
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:75

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;

      if(outputSum > outMax) outputSum= outMax;
      else if(outputSum < outMin) outputSum= outMin;
    25d2:	90 91 73 2a 	lds	r25, 0x2A73	; 0x802a73 <myPID+0x33>
    25d6:	a0 91 74 2a 	lds	r26, 0x2A74	; 0x802a74 <myPID+0x34>
    25da:	b0 91 75 2a 	lds	r27, 0x2A75	; 0x802a75 <myPID+0x35>
    25de:	89 87       	std	Y+9, r24	; 0x09
    25e0:	9a 87       	std	Y+10, r25	; 0x0a
    25e2:	ab 87       	std	Y+11, r26	; 0x0b
    25e4:	bc 87       	std	Y+12, r27	; 0x0c
    25e6:	9c 01       	movw	r18, r24
    25e8:	ad 01       	movw	r20, r26
    25ea:	c3 01       	movw	r24, r6
    25ec:	b2 01       	movw	r22, r4
    25ee:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    25f2:	87 ff       	sbrs	r24, 7
    25f4:	62 cf       	rjmp	.-316    	; 0x24ba <PID_LOOP()+0x1a8>
    25f6:	89 85       	ldd	r24, Y+9	; 0x09
    25f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    25fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    25fe:	55 cf       	rjmp	.-342    	; 0x24aa <PID_LOOP()+0x198>
PID_LOOP():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:80

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
      else output = 0;
    2600:	81 2c       	mov	r8, r1
    2602:	91 2c       	mov	r9, r1
    2604:	54 01       	movw	r10, r8
    2606:	6a cf       	rjmp	.-300    	; 0x24dc <PID_LOOP()+0x1ca>

00002608 <STOP_BUZZER()>:
stop():
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:59
	enabled = true;
	status = RUNNING;
	}

void Ticker::stop() {
	enabled = false;
    2608:	e0 ed       	ldi	r30, 0xD0	; 208
    260a:	fb e2       	ldi	r31, 0x2B	; 43
    260c:	10 82       	st	Z, r1
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:60
	counts = 0;
    260e:	13 86       	std	Z+11, r1	; 0x0b
    2610:	14 86       	std	Z+12, r1	; 0x0c
    2612:	15 86       	std	Z+13, r1	; 0x0d
    2614:	16 86       	std	Z+14, r1	; 0x0e
C:\Users\Kishor.Mandlik\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:61
	status = STOPPED;
    2616:	17 86       	std	Z+15, r1	; 0x0f
    2618:	10 8a       	std	Z+16, r1	; 0x10
digitalWrite():
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	85 e1       	ldi	r24, 0x15	; 21
    261e:	0c 94 ed 08 	jmp	0x11da	; 0x11da <digitalWrite.part.2>

00002622 <EERef::operator*() const>:
operator*():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:52
{
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
    2622:	fc 01       	movw	r30, r24
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	fc 01       	movw	r30, r24
    262a:	ff 27       	eor	r31, r31
    262c:	90 fd       	sbrc	r25, 0
    262e:	06 c0       	rjmp	.+12     	; 0x263c <EERef::operator*() const+0x1a>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	94 e1       	ldi	r25, 0x14	; 20
    2634:	e8 2b       	or	r30, r24
    2636:	f9 2b       	or	r31, r25
    2638:	80 81       	ld	r24, Z
    263a:	08 95       	ret
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:130

struct EEPROMClass
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
    2640:	f9 cf       	rjmp	.-14     	; 0x2634 <EERef::operator*() const+0x12>

00002642 <EEPROMClass::read(int) [clone .isra.0]>:
_ZN11EEPROMClass4readEi.isra.5():
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	00 d0       	rcall	.+0      	; 0x2648 <EEPROMClass::read(int) [clone .isra.0]+0x6>
    2648:	cd b7       	in	r28, 0x3d	; 61
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:49
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    264a:	de b7       	in	r29, 0x3e	; 62
_ZN5EERefC2Ei():
    264c:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:53

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    264e:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    2650:	ce 01       	movw	r24, r28
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	e6 df       	rcall	.-52     	; 0x2622 <EERef::operator*() const>
_ZN11EEPROMClass4readEi.isra.5():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:130

struct EEPROMClass
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	08 95       	ret

00002660 <long& EEPROMClass::get<long>(int, long&) [clone .isra.14]>:
_ZN11EEPROMClass3getIlEERT_iS2_.isra.14():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:141
  EEPtr end() { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
  uint16_t length() { return EEPROM_SIZE; }

  //Functionality to 'get' and 'put' objects to and from EEPROM.
  template <typename T>
  T &get(int idx, T &t)
    2660:	af 92       	push	r10
    2662:	bf 92       	push	r11
    2664:	cf 92       	push	r12
    2666:	df 92       	push	r13
    2668:	ef 92       	push	r14
    266a:	ff 92       	push	r15
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	00 d0       	rcall	.+0      	; 0x2676 <long& EEPROMClass::get<long>(int, long&) [clone .isra.14]+0x16>
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	8b 01       	movw	r16, r22
    267c:	6b 01       	movw	r12, r22
    267e:	24 e0       	ldi	r18, 0x04	; 4
    2680:	c2 0e       	add	r12, r18
    2682:	d1 1c       	adc	r13, r1
    2684:	7b 01       	movw	r14, r22
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:145
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    2686:	5c 01       	movw	r10, r24
    2688:	a6 1a       	sub	r10, r22
    268a:	b7 0a       	sbc	r11, r23
    268c:	c5 01       	movw	r24, r10
    268e:	8e 0d       	add	r24, r14
    2690:	9f 1d       	adc	r25, r15
    2692:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:53
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    2694:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    2696:	ce 01       	movw	r24, r28
    2698:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:145
  template <typename T>
  T &get(int idx, T &t)
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    269a:	c3 df       	rcall	.-122    	; 0x2622 <EERef::operator*() const>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.14():
    269c:	f7 01       	movw	r30, r14
    269e:	81 93       	st	Z+, r24
    26a0:	7f 01       	movw	r14, r30
    26a2:	ec 15       	cp	r30, r12
    26a4:	fd 05       	cpc	r31, r13
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:147
    return t;
  }
    26a6:	91 f7       	brne	.-28     	; 0x268c <long& EEPROMClass::get<long>(int, long&) [clone .isra.14]+0x2c>
    26a8:	c8 01       	movw	r24, r16
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	ff 90       	pop	r15
    26b8:	ef 90       	pop	r14
    26ba:	df 90       	pop	r13
    26bc:	cf 90       	pop	r12
    26be:	bf 90       	pop	r11
    26c0:	af 90       	pop	r10
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:141
  EEPtr end() { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
  uint16_t length() { return EEPROM_SIZE; }

  //Functionality to 'get' and 'put' objects to and from EEPROM.
  template <typename T>
  T &get(int idx, T &t)
    26c2:	08 95       	ret

000026c4 <int& EEPROMClass::get<int>(int, int&) [clone .isra.11]>:
_ZN11EEPROMClass3getIiEERT_iS2_.isra.11():
    26c4:	ef 92       	push	r14
    26c6:	ff 92       	push	r15
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <int& EEPROMClass::get<int>(int, int&) [clone .isra.11]+0xe>
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	8c 01       	movw	r16, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:145
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    26d8:	7b 01       	movw	r14, r22
    26da:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:53
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    26dc:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    26de:	ce 01       	movw	r24, r28
    26e0:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:145
  template <typename T>
  T &get(int idx, T &t)
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    26e2:	9f df       	rcall	.-194    	; 0x2622 <EERef::operator*() const>
_ZN11EEPROMClass3getIiEERT_iS2_.isra.11():
    26e4:	f7 01       	movw	r30, r14
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:111
  //Iterator functionality.
  bool operator!=(const EEPtr &ptr) { return index != ptr.index; }
  EERef operator*() { return index; }

  /** Prefix & Postfix increment/decrement **/
  EEPtr &operator++() { return ++index, *this; }
    26e6:	80 83       	st	Z, r24
_ZN5EEPtrppEv():
    26e8:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:145
  template <typename T>
  T &get(int idx, T &t)
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    26ea:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getIiEERT_iS2_.isra.11():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:53
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    26ec:	09 83       	std	Y+1, r16	; 0x01
    26ee:	1a 83       	std	Y+2, r17	; 0x02
_ZNK5EERefcvhEv():
    26f0:	ce 01       	movw	r24, r28
    26f2:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:145
  template <typename T>
  T &get(int idx, T &t)
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    26f4:	96 df       	rcall	.-212    	; 0x2622 <EERef::operator*() const>
_ZN11EEPROMClass3getIiEERT_iS2_.isra.11():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:147
    return t;
  }
    26f6:	f7 01       	movw	r30, r14
    26f8:	81 83       	std	Z+1, r24	; 0x01
    26fa:	c7 01       	movw	r24, r14
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	1f 91       	pop	r17
    2706:	0f 91       	pop	r16
    2708:	ff 90       	pop	r15
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:37

#define nvm_read_byte(idx) *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START))

static void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
    270a:	ef 90       	pop	r14
    270c:	08 95       	ret

0000270e <nvm_write_byte(unsigned int, unsigned char)>:
nvm_write_byte():
    270e:	fc 01       	movw	r30, r24
    2710:	ff 27       	eor	r31, r31
    2712:	90 fd       	sbrc	r25, 0
    2714:	12 c0       	rjmp	.+36     	; 0x273a <nvm_write_byte(unsigned int, unsigned char)+0x2c>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	94 e1       	ldi	r25, 0x14	; 20
    271a:	e8 2b       	or	r30, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:38
  uint8_t oldSREG = SREG;
    271c:	f9 2b       	or	r31, r25
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:39
  cli();
    271e:	60 83       	st	Z, r22
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:40
  _PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);
    2720:	8f b7       	in	r24, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	9d e9       	ldi	r25, 0x9D	; 157
    2726:	23 e0       	ldi	r18, 0x03	; 3
    2728:	94 bf       	out	0x34, r25	; 52
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:42
  SREG = oldSREG;
  while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
    272a:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x7f5000>
    272e:	8f bf       	out	0x3f, r24	; 63
    2730:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f5002>
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:37

#define nvm_read_byte(idx) *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START))

static void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
    2734:	81 fd       	sbrc	r24, 1
    2736:	fc cf       	rjmp	.-8      	; 0x2730 <nvm_write_byte(unsigned int, unsigned char)+0x22>
    2738:	08 95       	ret
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:57
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }

  //Assignment/write members.
  EERef &operator=(const EERef &ref) { return *this = *ref; }
  EERef &operator=(uint8_t in) { return nvm_write_byte(index, in), *this; }
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:69
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    273e:	ed cf       	rjmp	.-38     	; 0x271a <nvm_write_byte(unsigned int, unsigned char)+0xc>

00002740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
operator=():
    2740:	e6 cf       	rjmp	.-52     	; 0x270e <nvm_write_byte(unsigned int, unsigned char)>

00002742 <EERef::update(unsigned char)>:
update():
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:53
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    2748:	ec 01       	movw	r28, r24
    274a:	16 2f       	mov	r17, r22
_ZNK5EERefcvhEv():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:69
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    274c:	6a df       	rcall	.-300    	; 0x2622 <EERef::operator*() const>
update():
    274e:	81 17       	cp	r24, r17
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:57
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }

  //Assignment/write members.
  EERef &operator=(const EERef &ref) { return *this = *ref; }
  EERef &operator=(uint8_t in) { return nvm_write_byte(index, in), *this; }
    2750:	21 f0       	breq	.+8      	; 0x275a <EERef::update(unsigned char)+0x18>
operator=():
    2752:	61 2f       	mov	r22, r17
    2754:	88 81       	ld	r24, Y
    2756:	99 81       	ldd	r25, Y+1	; 0x01
    2758:	da df       	rcall	.-76     	; 0x270e <nvm_write_byte(unsigned int, unsigned char)>
update():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:69
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    275a:	ce 01       	movw	r24, r28
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	1f 91       	pop	r17
    2762:	08 95       	ret

00002764 <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.17] [clone .constprop.28]>:
_ZN11EEPROMClass3putIdEERKT_iS3_.isra.17():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:150
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    return t;
  }

  template <typename T>
  const T &put(int idx, const T &t)
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	00 d0       	rcall	.+0      	; 0x2772 <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.17] [clone .constprop.28]+0xe>
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	86 e0       	ldi	r24, 0x06	; 6
    2778:	e8 2e       	mov	r14, r24
    277a:	89 e2       	ldi	r24, 0x29	; 41
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:101
***/

struct EEPtr
{
  EEPtr(const int index)
      : index(index) {}
    277c:	f8 2e       	mov	r15, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:154
  template <typename T>
  const T &put(int idx, const T &t)
  {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) (*e).update(*ptr++);
    277e:	06 e4       	ldi	r16, 0x46	; 70
    2780:	10 e0       	ldi	r17, 0x00	; 0
    2782:	09 83       	std	Y+1, r16	; 0x01
    2784:	1a 83       	std	Y+2, r17	; 0x02
    2786:	f7 01       	movw	r30, r14
    2788:	61 91       	ld	r22, Z+
    278a:	7f 01       	movw	r14, r30
    278c:	ce 01       	movw	r24, r28
    278e:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:111
  //Iterator functionality.
  bool operator!=(const EEPtr &ptr) { return index != ptr.index; }
  EERef operator*() { return index; }

  /** Prefix & Postfix increment/decrement **/
  EEPtr &operator++() { return ++index, *this; }
    2790:	d8 df       	rcall	.-80     	; 0x2742 <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
    2792:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:154
  template <typename T>
  const T &put(int idx, const T &t)
  {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) (*e).update(*ptr++);
    2794:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putIdEERKT_iS3_.isra.17():
    2796:	0a 34       	cpi	r16, 0x4A	; 74
    2798:	11 05       	cpc	r17, r1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:156
    return t;
  }
    279a:	99 f7       	brne	.-26     	; 0x2782 <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.17] [clone .constprop.28]+0x1e>
    279c:	86 e0       	ldi	r24, 0x06	; 6
    279e:	99 e2       	ldi	r25, 0x29	; 41
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:150
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    return t;
  }

  template <typename T>
  const T &put(int idx, const T &t)
    27b0:	08 95       	ret

000027b2 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]>:
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.15():
    27b2:	ef 92       	push	r14
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]+0xe>
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	8c 01       	movw	r16, r24
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:154
  {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) (*e).update(*ptr++);
    27c6:	7b 01       	movw	r14, r22
    27c8:	89 83       	std	Y+1, r24	; 0x01
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	fb 01       	movw	r30, r22
    27ce:	60 81       	ld	r22, Z
    27d0:	ce 01       	movw	r24, r28
    27d2:	01 96       	adiw	r24, 0x01	; 1
    27d4:	b6 df       	rcall	.-148    	; 0x2742 <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:111
  //Iterator functionality.
  bool operator!=(const EEPtr &ptr) { return index != ptr.index; }
  EERef operator*() { return index; }

  /** Prefix & Postfix increment/decrement **/
  EEPtr &operator++() { return ++index, *this; }
    27d6:	0f 5f       	subi	r16, 0xFF	; 255
    27d8:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.15():
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:154
  template <typename T>
  const T &put(int idx, const T &t)
  {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) (*e).update(*ptr++);
    27da:	09 83       	std	Y+1, r16	; 0x01
    27dc:	1a 83       	std	Y+2, r17	; 0x02
    27de:	f7 01       	movw	r30, r14
    27e0:	61 81       	ldd	r22, Z+1	; 0x01
    27e2:	ce 01       	movw	r24, r28
    27e4:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Kishor.Mandlik\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.5\libraries\EEPROM\src/EEPROM.h:156
    return t;
  }
    27e6:	ad df       	rcall	.-166    	; 0x2742 <EERef::update(unsigned char)>
    27e8:	c7 01       	movw	r24, r14
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	ff 90       	pop	r15
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:809

}

void RESET_START()
{
  if (checkTempRaised == 0)
    27f8:	ef 90       	pop	r14
    27fa:	08 95       	ret

000027fc <RESET_START()>:
RESET_START():
    27fc:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:811
  {
    DOT1_2 = 0;
    2800:	81 11       	cpse	r24, r1
    2802:	b5 c0       	rjmp	.+362    	; 0x296e <RESET_START()+0x172>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:812
    DOT1_1 = 0;
    2804:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:813
    DOT2_0 = 0;
    2808:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:815
    Flag == 0;
    ErroR = 0;
    280c:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <DOT2_0>
    2810:	10 92 56 28 	sts	0x2856, r1	; 0x802856 <ErroR>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:816
    RESUME_Temp = 0;
    2814:	10 92 57 28 	sts	0x2857, r1	; 0x802857 <ErroR+0x1>
    2818:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <RESUME_Temp>
K:\Kishor Mandlik\production code\HPL020\Final_HPL020_v.0.4_code\Final_HPL020_v.0.4_Main_Code/Final_HPL020_v.0.4_Main_Code.ino:817
    TEMP_FLAG = 0;
    281c:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <RESUME_Temp+0x1>
    2820:	10 92 64 28 	sts	0x2864, r1	; 0x802864 <TEMP_FLAG>
    2824:	10 92 65 28 	sts	0x2865, r1	; 0x802865 <TEMP_FLAG+0x1>
    2828:	10 92 58 28 	sts	0x2858, r1	; 0x802858 <RESUME_TIME>
    282c:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <RESUME_TIME+0x1>
    2830:	10 92 5a 28 	sts	0x285A, r1	; 0x80285a <RESUME_TEMP>
    2834:	10 92 5b 28 	sts	0x285B, r1	; 0x80285b <RESUME_TEMP+0x1>
    2838:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <EEPROM_AUTO_RESUM_SET>
    283c:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <Inprocess_autoresume_flag>
    2840:	60 e0       	ldi	r22, 0x00	; 0
    2842:	80 ea       	ldi	r24, 0xA0	; 160
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	7c df       	rcall	.-264    	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    2848:	68 e5       	ldi	r22, 0x58	; 88
    284a:	78 e2       	ldi	r23, 0x28	; 40
    284c:	82 e3       	ldi	r24, 0x32	; 50
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	b0 df       	rcall	.-160    	; 0x27b2 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]>
    2852:	6a e5       	ldi	r22, 0x5A	; 90
    2854:	78 e2       	ldi	r23, 0x28	; 40
    2856:	8c e3       	ldi	r24, 0x3C	; 60
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	ab df       	rcall	.-170    	; 0x27b2 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]>
    285c:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
    2860:	81 11       	cpse	r24, r1
    2862:	10 92 55 29 	sts	0x2955, r1	; 0x802955 <LONG_PRESS>
    2866:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    286a:	81 11       	cpse	r24, r1
    286c:	22 c0       	rjmp	.+68     	; 0x28b2 <RESET_START()+0xb6>
    286e:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <RST_BUTT>
    2872:	10 92 55 29 	sts	0x2955, r1	; 0x802955 <LONG_PRESS>
    2876:	e0 91 0a 28 	lds	r30, 0x280A	; 0x80280a <SELECTION_PARAMETER>
    287a:	f0 91 0b 28 	lds	r31, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
    287e:	e2 31       	cpi	r30, 0x12	; 18
    2880:	f1 05       	cpc	r31, r1
    2882:	08 f0       	brcs	.+2      	; 0x2886 <RESET_START()+0x8a>
    2884:	2c c0       	rjmp	.+88     	; 0x28de <RESET_START()+0xe2>
    2886:	e9 5b       	subi	r30, 0xB9	; 185
    2888:	fb 4e       	sbci	r31, 0xEB	; 235
    288a:	0c 94 ad 3b 	jmp	0x775a	; 0x775a <__tablejump2__>
    288e:	65 14       	cp	r6, r5
    2890:	72 14       	cp	r7, r2
    2892:	7d 14       	cp	r7, r13
    2894:	88 14       	cp	r8, r8
    2896:	6f 14       	cp	r6, r15
    2898:	6f 14       	cp	r6, r15
    289a:	91 14       	cp	r9, r1
    289c:	9a 14       	cp	r9, r10
    289e:	6f 14       	cp	r6, r15
    28a0:	6f 14       	cp	r6, r15
    28a2:	6f 14       	cp	r6, r15
    28a4:	6f 14       	cp	r6, r15
    28a6:	6f 14       	cp	r6, r15
    28a8:	a3 14       	cp	r10, r3
    28aa:	6f 14       	cp	r6, r15
    28ac:	6f 14       	cp	r6, r15
    28ae:	6f 14       	cp	r6, r15
    28b0:	ae 14       	cp	r10, r14
    28b2:	18 16       	cp	r1, r24
    28b4:	04 f7       	brge	.-64     	; 0x2876 <RESET_START()+0x7a>
    28b6:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    28ba:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <SET_MIN>
    28be:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <SET_MIN+0x1>
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	80 93 ae 28 	sts	0x28AE, r24	; 0x8028ae <ExitFromProcess>
    28c8:	d6 cf       	rjmp	.-84     	; 0x2876 <RESET_START()+0x7a>
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	20 91 1d 29 	lds	r18, 0x291D	; 0x80291d <SET_LONG_VALUE>
    28d0:	30 91 1e 29 	lds	r19, 0x291E	; 0x80291e <SET_LONG_VALUE+0x1>
    28d4:	23 2b       	or	r18, r19
    28d6:	09 f4       	brne	.+2      	; 0x28da <RESET_START()+0xde>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	80 93 c0 28 	sts	0x28C0, r24	; 0x8028c0 <TIME_SOCK_OR_TOTAL>
    28de:	88 ec       	ldi	r24, 0xC8	; 200
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	b7 c9       	rjmp	.-3218   	; 0x1c52 <Bclass::BUZZ_INTERVAL(int) [clone .constprop.25]>
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	20 91 1f 29 	lds	r18, 0x291F	; 0x80291f <SET_LONG_VALUE+0x2>
    28ea:	30 91 20 29 	lds	r19, 0x2920	; 0x802920 <SET_LONG_VALUE+0x3>
    28ee:	23 2b       	or	r18, r19
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <RESET_START()+0xf8>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	80 93 bf 28 	sts	0x28BF, r24	; 0x8028bf <AUTO_RESUM_SET>
    28f8:	f2 cf       	rjmp	.-28     	; 0x28de <RESET_START()+0xe2>
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	20 91 21 29 	lds	r18, 0x2921	; 0x802921 <SET_LONG_VALUE+0x4>
    2900:	30 91 22 29 	lds	r19, 0x2922	; 0x802922 <SET_LONG_VALUE+0x5>
    2904:	23 2b       	or	r18, r19
    2906:	09 f4       	brne	.+2      	; 0x290a <RESET_START()+0x10e>
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	80 93 0d 29 	sts	0x290D, r24	; 0x80290d <SAFE_VALUE_SET_DEG>
    290e:	e7 cf       	rjmp	.-50     	; 0x28de <RESET_START()+0xe2>
    2910:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <SET_LONG_VALUE+0x6>
    2914:	90 91 24 29 	lds	r25, 0x2924	; 0x802924 <SET_LONG_VALUE+0x7>
    2918:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <CAL_SELECT_VALUE>
    291c:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <CAL_SELECT_VALUE+0x1>
    2920:	de cf       	rjmp	.-68     	; 0x28de <RESET_START()+0xe2>
    2922:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
    2926:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
    292a:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <LOW_CAL_VALUE_SET>
    292e:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    2932:	d5 cf       	rjmp	.-86     	; 0x28de <RESET_START()+0xe2>
    2934:	80 91 2b 29 	lds	r24, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
    2938:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
    293c:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <HIGH_CAL_VALUE_SET>
    2940:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <HIGH_CAL_VALUE_SET+0x1>
    2944:	cc cf       	rjmp	.-104    	; 0x28de <RESET_START()+0xe2>
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	20 91 37 29 	lds	r18, 0x2937	; 0x802937 <SET_LONG_VALUE+0x1a>
    294c:	30 91 38 29 	lds	r19, 0x2938	; 0x802938 <SET_LONG_VALUE+0x1b>
    2950:	23 2b       	or	r18, r19
    2952:	09 f4       	brne	.+2      	; 0x2956 <RESET_START()+0x15a>
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <Energy_Mode>
    295a:	c1 cf       	rjmp	.-126    	; 0x28de <RESET_START()+0xe2>
    295c:	80 91 3f 29 	lds	r24, 0x293F	; 0x80293f <SET_LONG_VALUE+0x22>
    2960:	90 91 40 29 	lds	r25, 0x2940	; 0x802940 <SET_LONG_VALUE+0x23>
    2964:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <SAFE_VALUE_SET>
    2968:	90 93 0c 29 	sts	0x290C, r25	; 0x80290c <SAFE_VALUE_SET+0x1>
    296c:	b8 cf       	rjmp	.-144    	; 0x28de <RESET_START()+0xe2>
    296e:	08 95       	ret

00002970 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]>:
_ZN11EEPROMClass3putIlEERKT_iS3_.isra.18():
    2970:	af 92       	push	r10
    2972:	bf 92       	push	r11
    2974:	cf 92       	push	r12
    2976:	df 92       	push	r13
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	00 d0       	rcall	.+0      	; 0x2986 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]+0x16>
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
    298a:	8b 01       	movw	r16, r22
    298c:	6b 01       	movw	r12, r22
    298e:	24 e0       	ldi	r18, 0x04	; 4
    2990:	c2 0e       	add	r12, r18
    2992:	d1 1c       	adc	r13, r1
    2994:	7b 01       	movw	r14, r22
    2996:	5c 01       	movw	r10, r24
    2998:	a6 1a       	sub	r10, r22
    299a:	b7 0a       	sbc	r11, r23
    299c:	c5 01       	movw	r24, r10
    299e:	8e 0d       	add	r24, r14
    29a0:	9f 1d       	adc	r25, r15
    29a2:	89 83       	std	Y+1, r24	; 0x01
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	f7 01       	movw	r30, r14
    29a8:	61 91       	ld	r22, Z+
    29aa:	7f 01       	movw	r14, r30
    29ac:	ce 01       	movw	r24, r28
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	c8 de       	rcall	.-624    	; 0x2742 <EERef::update(unsigned char)>
    29b2:	ec 14       	cp	r14, r12
    29b4:	fd 04       	cpc	r15, r13
    29b6:	91 f7       	brne	.-28     	; 0x299c <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]+0x2c>
    29b8:	c8 01       	movw	r24, r16
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	ff 90       	pop	r15
    29c8:	ef 90       	pop	r14
    29ca:	df 90       	pop	r13
    29cc:	cf 90       	pop	r12
    29ce:	bf 90       	pop	r11
    29d0:	af 90       	pop	r10
    29d2:	08 95       	ret

000029d4 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]>:
SET_LONG_PRESS_FUNCTION():
    29d4:	7f 92       	push	r7
    29d6:	8f 92       	push	r8
    29d8:	9f 92       	push	r9
    29da:	af 92       	push	r10
    29dc:	bf 92       	push	r11
    29de:	cf 92       	push	r12
    29e0:	df 92       	push	r13
    29e2:	ef 92       	push	r14
    29e4:	ff 92       	push	r15
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
digitalWrite():
    29ee:	60 e0       	ldi	r22, 0x00	; 0
    29f0:	8c e0       	ldi	r24, 0x0C	; 12
    29f2:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    29f6:	e0 91 0a 28 	lds	r30, 0x280A	; 0x80280a <SELECTION_PARAMETER>
    29fa:	f0 91 0b 28 	lds	r31, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
SET_LONG_PRESS_FUNCTION():
    29fe:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    2a02:	88 23       	and	r24, r24
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x34>
    2a06:	f8 c5       	rjmp	.+3056   	; 0x35f8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xc24>
    2a08:	e2 31       	cpi	r30, 0x12	; 18
    2a0a:	f1 05       	cpc	r31, r1
    2a0c:	08 f0       	brcs	.+2      	; 0x2a10 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x3c>
    2a0e:	73 c0       	rjmp	.+230    	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    2a10:	e4 5f       	subi	r30, 0xF4	; 244
    2a12:	fa 4e       	sbci	r31, 0xEA	; 234
    2a14:	0c 94 ad 3b 	jmp	0x775a	; 0x775a <__tablejump2__>
    2a18:	1e 15       	cp	r17, r14
    2a1a:	9a 15       	cp	r25, r10
    2a1c:	ea 15       	cp	r30, r10
    2a1e:	34 16       	cp	r3, r20
    2a20:	79 16       	cp	r7, r25
    2a22:	7b 15       	cp	r23, r11
    2a24:	ce 16       	cp	r12, r30
    2a26:	22 17       	cp	r18, r18
    2a28:	69 17       	cp	r22, r25
    2a2a:	d5 17       	cp	r29, r21
    2a2c:	33 18       	sub	r3, r3
    2a2e:	9f 18       	sub	r9, r15
    2a30:	32 20       	and	r3, r2
    2a32:	fd 18       	sub	r15, r13
    2a34:	47 19       	sub	r20, r7
    2a36:	7c 19       	sub	r23, r12
    2a38:	7b 15       	cp	r23, r11
    2a3a:	cb 1a       	sub	r12, r27
    2a3c:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    2a40:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    2a44:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    2a48:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    2a4c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
DISPLAY_DIGIT2():
    2a50:	80 e1       	ldi	r24, 0x10	; 16
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    2a58:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    2a5c:	29 e1       	ldi	r18, 0x19	; 25
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	20 93 e0 28 	sts	0x28E0, r18	; 0x8028e0 <digits2+0x2>
    2a64:	30 93 e1 28 	sts	0x28E1, r19	; 0x8028e1 <digits2+0x3>
    2a68:	22 e1       	ldi	r18, 0x12	; 18
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	20 93 e2 28 	sts	0x28E2, r18	; 0x8028e2 <digits2+0x4>
    2a70:	30 93 e3 28 	sts	0x28E3, r19	; 0x8028e3 <digits2+0x5>
    2a74:	2f e0       	ldi	r18, 0x0F	; 15
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <digits2+0x6>
    2a7c:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2a80:	20 91 cf 28 	lds	r18, 0x28CF	; 0x8028cf <i>
    2a84:	30 91 d0 28 	lds	r19, 0x28D0	; 0x8028d0 <i+0x1>
    2a88:	29 31       	cpi	r18, 0x19	; 25
    2a8a:	31 05       	cpc	r19, r1
    2a8c:	7c f4       	brge	.+30     	; 0x2aac <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd8>
DISPLAY_DIGIT1():
    2a8e:	88 e1       	ldi	r24, 0x18	; 24
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    2a96:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    2a9a:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    2a9e:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    2aa2:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2aa6:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2aaa:	1f c6       	rjmp	.+3134   	; 0x36ea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd16>
SET_LONG_PRESS_FUNCTION():
    2aac:	40 91 1d 29 	lds	r20, 0x291D	; 0x80291d <SET_LONG_VALUE>
    2ab0:	50 91 1e 29 	lds	r21, 0x291E	; 0x80291e <SET_LONG_VALUE+0x1>
    2ab4:	45 2b       	or	r20, r21
    2ab6:	69 f5       	brne	.+90     	; 0x2b12 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x13e>
DISPLAY_DIGIT1():
    2ab8:	8c e0       	ldi	r24, 0x0C	; 12
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    2ac0:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    2ac4:	87 e1       	ldi	r24, 0x17	; 23
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    2acc:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    2ad0:	8d e0       	ldi	r24, 0x0D	; 13
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2ad8:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2adc:	8a e0       	ldi	r24, 0x0A	; 10
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    2ae4:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    2ae8:	23 33       	cpi	r18, 0x33	; 51
    2aea:	31 05       	cpc	r19, r1
    2aec:	24 f0       	brlt	.+8      	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    2aee:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    2af2:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	df 90       	pop	r13
    2b04:	cf 90       	pop	r12
    2b06:	bf 90       	pop	r11
    2b08:	af 90       	pop	r10
    2b0a:	9f 90       	pop	r9
    2b0c:	8f 90       	pop	r8
    2b0e:	7f 90       	pop	r7
    2b10:	08 95       	ret
DISPLAY_DIGIT1():
    2b12:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    2b16:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    2b1a:	47 e1       	ldi	r20, 0x17	; 23
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	40 93 d8 28 	sts	0x28D8, r20	; 0x8028d8 <digits1+0x2>
    2b22:	50 93 d9 28 	sts	0x28D9, r21	; 0x8028d9 <digits1+0x3>
    2b26:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2b2a:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2b2e:	8a e1       	ldi	r24, 0x1A	; 26
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	d6 cf       	rjmp	.-84     	; 0x2ae0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x10c>
SET_LONG_PRESS_FUNCTION():
    2b34:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    2b38:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    2b3c:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    2b40:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
DISPLAY_DIGIT2():
    2b44:	81 e1       	ldi	r24, 0x11	; 17
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    2b4c:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    2b50:	8f e0       	ldi	r24, 0x0F	; 15
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    2b58:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    2b5c:	8c e0       	ldi	r24, 0x0C	; 12
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    2b64:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    2b68:	82 e2       	ldi	r24, 0x22	; 34
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    2b70:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2b74:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    2b78:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    2b7c:	89 31       	cpi	r24, 0x19	; 25
    2b7e:	91 05       	cpc	r25, r1
    2b80:	0c f4       	brge	.+2      	; 0x2b84 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1b0>
    2b82:	85 cf       	rjmp	.-246    	; 0x2a8e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xba>
    2b84:	20 91 1f 29 	lds	r18, 0x291F	; 0x80291f <SET_LONG_VALUE+0x2>
    2b88:	30 91 20 29 	lds	r19, 0x2920	; 0x802920 <SET_LONG_VALUE+0x3>
DISPLAY_DIGIT1():
    2b8c:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <digits1>
    2b90:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <digits1+0x1>
SET_LONG_PRESS_FUNCTION():
    2b94:	23 2b       	or	r18, r19
    2b96:	89 f4       	brne	.+34     	; 0x2bba <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1e6>
DISPLAY_DIGIT1():
    2b98:	25 e1       	ldi	r18, 0x15	; 21
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	20 93 d8 28 	sts	0x28D8, r18	; 0x8028d8 <digits1+0x2>
    2ba0:	30 93 d9 28 	sts	0x28D9, r19	; 0x8028d9 <digits1+0x3>
    2ba4:	20 93 da 28 	sts	0x28DA, r18	; 0x8028da <digits1+0x4>
    2ba8:	30 93 db 28 	sts	0x28DB, r19	; 0x8028db <digits1+0x5>
    2bac:	28 e1       	ldi	r18, 0x18	; 24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	20 93 dc 28 	sts	0x28DC, r18	; 0x8028dc <digits1+0x6>
    2bb4:	30 93 dd 28 	sts	0x28DD, r19	; 0x8028dd <digits1+0x7>
    2bb8:	ed c0       	rjmp	.+474    	; 0x2d94 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x3c0>
    2bba:	24 e1       	ldi	r18, 0x14	; 20
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	20 93 d8 28 	sts	0x28D8, r18	; 0x8028d8 <digits1+0x2>
    2bc2:	30 93 d9 28 	sts	0x28D9, r19	; 0x8028d9 <digits1+0x3>
    2bc6:	28 e1       	ldi	r18, 0x18	; 24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	20 93 da 28 	sts	0x28DA, r18	; 0x8028da <digits1+0x4>
    2bce:	30 93 db 28 	sts	0x28DB, r19	; 0x8028db <digits1+0x5>
    2bd2:	ee cf       	rjmp	.-36     	; 0x2bb0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1dc>
SET_LONG_PRESS_FUNCTION():
    2bd4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    2bd8:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    2bdc:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    2be0:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
DISPLAY_DIGIT2():
    2be4:	8c e0       	ldi	r24, 0x0C	; 12
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    2bec:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    2bf0:	8d e0       	ldi	r24, 0x0D	; 13
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    2bf8:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    2bfc:	85 e1       	ldi	r24, 0x15	; 21
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    2c04:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    2c08:	2f e0       	ldi	r18, 0x0F	; 15
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <digits2+0x6>
    2c10:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2c14:	20 91 cf 28 	lds	r18, 0x28CF	; 0x8028cf <i>
    2c18:	30 91 d0 28 	lds	r19, 0x28D0	; 0x8028d0 <i+0x1>
    2c1c:	29 31       	cpi	r18, 0x19	; 25
    2c1e:	31 05       	cpc	r19, r1
    2c20:	0c f4       	brge	.+2      	; 0x2c24 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x250>
    2c22:	35 cf       	rjmp	.-406    	; 0x2a8e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xba>
    2c24:	40 91 21 29 	lds	r20, 0x2921	; 0x802921 <SET_LONG_VALUE+0x4>
    2c28:	50 91 22 29 	lds	r21, 0x2922	; 0x802922 <SET_LONG_VALUE+0x5>
DISPLAY_DIGIT1():
    2c2c:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <digits1>
    2c30:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <digits1+0x1>
SET_LONG_PRESS_FUNCTION():
    2c34:	45 2b       	or	r20, r21
    2c36:	59 f4       	brne	.+22     	; 0x2c4e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x27a>
DISPLAY_DIGIT1():
    2c38:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    2c3c:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    2c40:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2c44:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2c48:	88 e1       	ldi	r24, 0x18	; 24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	49 cf       	rjmp	.-366    	; 0x2ae0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x10c>
    2c4e:	84 e1       	ldi	r24, 0x14	; 20
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    2c56:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    2c5a:	88 e1       	ldi	r24, 0x18	; 24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2c62:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2c66:	3c cf       	rjmp	.-392    	; 0x2ae0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x10c>
SET_LONG_PRESS_FUNCTION():
    2c68:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    2c6c:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    2c70:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
DISPLAY_DIGIT2():
    2c74:	4a e0       	ldi	r20, 0x0A	; 10
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	40 93 de 28 	sts	0x28DE, r20	; 0x8028de <digits2>
    2c7c:	50 93 df 28 	sts	0x28DF, r21	; 0x8028df <digits2+0x1>
    2c80:	2d e0       	ldi	r18, 0x0D	; 13
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	20 93 e0 28 	sts	0x28E0, r18	; 0x8028e0 <digits2+0x2>
    2c88:	30 93 e1 28 	sts	0x28E1, r19	; 0x8028e1 <digits2+0x3>
    2c8c:	8a e1       	ldi	r24, 0x1A	; 26
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    2c94:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    2c98:	6e e0       	ldi	r22, 0x0E	; 14
    2c9a:	70 e0       	ldi	r23, 0x00	; 0
    2c9c:	60 93 e4 28 	sts	0x28E4, r22	; 0x8028e4 <digits2+0x6>
    2ca0:	70 93 e5 28 	sts	0x28E5, r23	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2ca4:	60 91 cf 28 	lds	r22, 0x28CF	; 0x8028cf <i>
    2ca8:	70 91 d0 28 	lds	r23, 0x28D0	; 0x8028d0 <i+0x1>
    2cac:	69 31       	cpi	r22, 0x19	; 25
    2cae:	71 05       	cpc	r23, r1
    2cb0:	0c f4       	brge	.+2      	; 0x2cb4 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x2e0>
    2cb2:	ed ce       	rjmp	.-550    	; 0x2a8e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xba>
    2cb4:	e0 91 23 29 	lds	r30, 0x2923	; 0x802923 <SET_LONG_VALUE+0x6>
    2cb8:	f0 91 24 29 	lds	r31, 0x2924	; 0x802924 <SET_LONG_VALUE+0x7>
DISPLAY_DIGIT1():
    2cbc:	40 93 d6 28 	sts	0x28D6, r20	; 0x8028d6 <digits1>
    2cc0:	50 93 d7 28 	sts	0x28D7, r21	; 0x8028d7 <digits1+0x1>
    2cc4:	20 93 d8 28 	sts	0x28D8, r18	; 0x8028d8 <digits1+0x2>
    2cc8:	30 93 d9 28 	sts	0x28D9, r19	; 0x8028d9 <digits1+0x3>
    2ccc:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2cd0:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    2cd8:	ef 2b       	or	r30, r31
    2cda:	11 f4       	brne	.+4      	; 0x2ce0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x30c>
DISPLAY_DIGIT1():
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    2ce4:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    2ce8:	63 33       	cpi	r22, 0x33	; 51
    2cea:	71 05       	cpc	r23, r1
    2cec:	0c f0       	brlt	.+2      	; 0x2cf0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x31c>
    2cee:	ff ce       	rjmp	.-514    	; 0x2aee <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x11a>
    2cf0:	02 cf       	rjmp	.-508    	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    2cf2:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    2cf6:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    2cfa:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
DISPLAY_DIGIT2():
    2cfe:	8a e0       	ldi	r24, 0x0A	; 10
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    2d06:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    2d0a:	8d e0       	ldi	r24, 0x0D	; 13
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    2d12:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    2d16:	8a e1       	ldi	r24, 0x1A	; 26
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    2d1e:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    2d2a:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2d2e:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    2d32:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    2d36:	49 97       	sbiw	r24, 0x19	; 25
    2d38:	9c f4       	brge	.+38     	; 0x2d60 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x38c>
    2d3a:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    2d3e:	81 11       	cpse	r24, r1
    2d40:	54 c4       	rjmp	.+2216   	; 0x35ea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xc16>
DISPLAY_DIGIT1():
    2d42:	88 e1       	ldi	r24, 0x18	; 24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    2d4a:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    2d4e:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    2d52:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    2d56:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2d5a:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2d5e:	10 c0       	rjmp	.+32     	; 0x2d80 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x3ac>
SET_LONG_PRESS_FUNCTION():
    2d60:	80 91 25 29 	lds	r24, 0x2925	; 0x802925 <SET_LONG_VALUE+0x8>
    2d64:	90 91 26 29 	lds	r25, 0x2926	; 0x802926 <SET_LONG_VALUE+0x9>
    2d68:	2a e0       	ldi	r18, 0x0A	; 10
    2d6a:	28 9f       	mul	r18, r24
    2d6c:	b0 01       	movw	r22, r0
    2d6e:	29 9f       	mul	r18, r25
    2d70:	70 0d       	add	r23, r0
    2d72:	11 24       	eor	r1, r1
    2d74:	07 2e       	mov	r0, r23
    2d76:	00 0c       	add	r0, r0
    2d78:	88 0b       	sbc	r24, r24
    2d7a:	99 0b       	sbc	r25, r25
    2d7c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    2d80:	8a e0       	ldi	r24, 0x0A	; 10
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    2d88:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    2d8c:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    2d90:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    2d94:	c3 97       	sbiw	r24, 0x33	; 51
    2d96:	0c f0       	brlt	.+2      	; 0x2d9a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x3c6>
    2d98:	aa ce       	rjmp	.-684    	; 0x2aee <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x11a>
    2d9a:	ad ce       	rjmp	.-678    	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    2d9c:	c1 e0       	ldi	r28, 0x01	; 1
    2d9e:	c0 93 d2 28 	sts	0x28D2, r28	; 0x8028d2 <DOT1_0>
    2da2:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    2da6:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    2daa:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    2dae:	c0 93 cd 28 	sts	0x28CD, r28	; 0x8028cd <CAL2_START>
DISPLAY_DIGIT2():
    2db2:	8a e0       	ldi	r24, 0x0A	; 10
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    2dba:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    2dbe:	8d e0       	ldi	r24, 0x0D	; 13
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    2dc6:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    2dca:	8a e1       	ldi	r24, 0x1A	; 26
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    2dd2:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    2dd6:	82 e0       	ldi	r24, 0x02	; 2
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    2dde:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2de2:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    2de6:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    2dea:	49 97       	sbiw	r24, 0x19	; 25
    2dec:	04 f5       	brge	.+64     	; 0x2e2e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x45a>
    2dee:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    2df2:	81 11       	cpse	r24, r1
    2df4:	15 c0       	rjmp	.+42     	; 0x2e20 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x44c>
DISPLAY_DIGIT1():
    2df6:	88 e1       	ldi	r24, 0x18	; 24
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    2dfe:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    2e02:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2e06:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2e0a:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    2e0e:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    2e12:	8a e1       	ldi	r24, 0x1A	; 26
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    2e1a:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    2e1e:	b6 cf       	rjmp	.-148    	; 0x2d8c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x3b8>
    2e20:	89 e1       	ldi	r24, 0x19	; 25
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    2e28:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    2e2c:	f2 cf       	rjmp	.-28     	; 0x2e12 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x43e>
    2e2e:	60 91 29 29 	lds	r22, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
    2e32:	70 91 2a 29 	lds	r23, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
    2e36:	07 2e       	mov	r0, r23
    2e38:	00 0c       	add	r0, r0
    2e3a:	88 0b       	sbc	r24, r24
    2e3c:	99 0b       	sbc	r25, r25
    2e3e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    2e42:	e7 cf       	rjmp	.-50     	; 0x2e12 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x43e>
    2e44:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
DISPLAY_DIGIT2():
    2e48:	8a e0       	ldi	r24, 0x0A	; 10
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    2e50:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    2e54:	8d e0       	ldi	r24, 0x0D	; 13
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    2e5c:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    2e60:	8a e1       	ldi	r24, 0x1A	; 26
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    2e68:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    2e74:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2e78:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    2e7c:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    2e80:	49 97       	sbiw	r24, 0x19	; 25
    2e82:	e4 f4       	brge	.+56     	; 0x2ebc <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x4e8>
    2e84:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    2e88:	81 11       	cpse	r24, r1
    2e8a:	11 c0       	rjmp	.+34     	; 0x2eae <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x4da>
DISPLAY_DIGIT1():
    2e8c:	88 e1       	ldi	r24, 0x18	; 24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    2e94:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    2e98:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2e9c:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2ea0:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    2ea4:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    2ea8:	8e e1       	ldi	r24, 0x1E	; 30
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	b4 cf       	rjmp	.-152    	; 0x2e16 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x442>
    2eae:	89 e1       	ldi	r24, 0x19	; 25
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    2eb6:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    2eba:	f6 cf       	rjmp	.-20     	; 0x2ea8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x4d4>
    2ebc:	60 91 2b 29 	lds	r22, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
    2ec0:	70 91 2c 29 	lds	r23, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
    2ec4:	07 2e       	mov	r0, r23
    2ec6:	00 0c       	add	r0, r0
    2ec8:	88 0b       	sbc	r24, r24
    2eca:	99 0b       	sbc	r25, r25
    2ecc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    2ed0:	eb cf       	rjmp	.-42     	; 0x2ea8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x4d4>
    2ed2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    2ed6:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    2eda:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <DOT2_0>
    2ee4:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    2ee8:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    2eec:	07 2e       	mov	r0, r23
    2eee:	00 0c       	add	r0, r0
    2ef0:	88 0b       	sbc	r24, r24
    2ef2:	99 0b       	sbc	r25, r25
    2ef4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    2ef8:	8a e1       	ldi	r24, 0x1A	; 26
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    2f00:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    2f04:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    2f08:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    2f0c:	49 97       	sbiw	r24, 0x19	; 25
    2f0e:	e4 f5       	brge	.+120    	; 0x2f88 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x5b4>
    2f10:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    2f14:	81 11       	cpse	r24, r1
    2f16:	31 c0       	rjmp	.+98     	; 0x2f7a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x5a6>
    2f18:	88 e1       	ldi	r24, 0x18	; 24
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    2f20:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    2f24:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    2f28:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    2f2c:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    2f30:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    2f34:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    2f38:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    2f3c:	c3 97       	sbiw	r24, 0x33	; 51
    2f3e:	24 f0       	brlt	.+8      	; 0x2f48 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x574>
    2f40:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    2f44:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    2f48:	8a e0       	ldi	r24, 0x0A	; 10
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    2f50:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    2f54:	60 91 2d 29 	lds	r22, 0x292D	; 0x80292d <SET_LONG_VALUE+0x10>
    2f58:	70 91 2e 29 	lds	r23, 0x292E	; 0x80292e <SET_LONG_VALUE+0x11>
    2f5c:	07 2e       	mov	r0, r23
    2f5e:	00 0c       	add	r0, r0
    2f60:	88 0b       	sbc	r24, r24
    2f62:	99 0b       	sbc	r25, r25
    2f64:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    2f68:	60 93 c7 28 	sts	0x28C7, r22	; 0x8028c7 <CAL2_CALCULATED_LOW_CAL_VALUE>
    2f6c:	70 93 c8 28 	sts	0x28C8, r23	; 0x8028c8 <CAL2_CALCULATED_LOW_CAL_VALUE+0x1>
    2f70:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <CAL2_CALCULATED_LOW_CAL_VALUE+0x2>
    2f74:	90 93 ca 28 	sts	0x28CA, r25	; 0x8028ca <CAL2_CALCULATED_LOW_CAL_VALUE+0x3>
    2f78:	be cd       	rjmp	.-1156   	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    2f7a:	89 e1       	ldi	r24, 0x19	; 25
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    2f82:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    2f86:	d6 cf       	rjmp	.-84     	; 0x2f34 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x560>
    2f88:	80 91 2d 29 	lds	r24, 0x292D	; 0x80292d <SET_LONG_VALUE+0x10>
    2f8c:	90 91 2e 29 	lds	r25, 0x292E	; 0x80292e <SET_LONG_VALUE+0x11>
    2f90:	2a e0       	ldi	r18, 0x0A	; 10
    2f92:	28 9f       	mul	r18, r24
    2f94:	b0 01       	movw	r22, r0
    2f96:	29 9f       	mul	r18, r25
    2f98:	70 0d       	add	r23, r0
    2f9a:	11 24       	eor	r1, r1
    2f9c:	07 2e       	mov	r0, r23
    2f9e:	00 0c       	add	r0, r0
    2fa0:	88 0b       	sbc	r24, r24
    2fa2:	99 0b       	sbc	r25, r25
    2fa4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    2fa8:	c5 cf       	rjmp	.-118    	; 0x2f34 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x560>
    2faa:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    2fae:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    2fb2:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <DOT2_0>
    2fbc:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    2fc0:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    2fc4:	07 2e       	mov	r0, r23
    2fc6:	00 0c       	add	r0, r0
    2fc8:	88 0b       	sbc	r24, r24
    2fca:	99 0b       	sbc	r25, r25
    2fcc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    2fd0:	8a e1       	ldi	r24, 0x1A	; 26
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    2fd8:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    2fdc:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    2fe0:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    2fe4:	49 97       	sbiw	r24, 0x19	; 25
    2fe6:	74 f5       	brge	.+92     	; 0x3044 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x670>
    2fe8:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    2fec:	81 11       	cpse	r24, r1
    2fee:	23 c0       	rjmp	.+70     	; 0x3036 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x662>
    2ff0:	88 e1       	ldi	r24, 0x18	; 24
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    2ff8:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    2ffc:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    3000:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    3004:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    3008:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    300c:	8a e0       	ldi	r24, 0x0A	; 10
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    3014:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    3018:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    301c:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    3020:	c3 97       	sbiw	r24, 0x33	; 51
    3022:	24 f0       	brlt	.+8      	; 0x302c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x658>
    3024:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    3028:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    302c:	60 91 2f 29 	lds	r22, 0x292F	; 0x80292f <SET_LONG_VALUE+0x12>
    3030:	70 91 30 29 	lds	r23, 0x2930	; 0x802930 <SET_LONG_VALUE+0x13>
    3034:	93 cf       	rjmp	.-218    	; 0x2f5c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x588>
    3036:	89 e1       	ldi	r24, 0x19	; 25
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    303e:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    3042:	e4 cf       	rjmp	.-56     	; 0x300c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x638>
    3044:	80 91 2f 29 	lds	r24, 0x292F	; 0x80292f <SET_LONG_VALUE+0x12>
    3048:	90 91 30 29 	lds	r25, 0x2930	; 0x802930 <SET_LONG_VALUE+0x13>
    304c:	2a e0       	ldi	r18, 0x0A	; 10
    304e:	28 9f       	mul	r18, r24
    3050:	b0 01       	movw	r22, r0
    3052:	29 9f       	mul	r18, r25
    3054:	70 0d       	add	r23, r0
    3056:	11 24       	eor	r1, r1
    3058:	07 2e       	mov	r0, r23
    305a:	00 0c       	add	r0, r0
    305c:	88 0b       	sbc	r24, r24
    305e:	99 0b       	sbc	r25, r25
    3060:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    3064:	d3 cf       	rjmp	.-90     	; 0x300c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x638>
    3066:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    306a:	60 91 05 28 	lds	r22, 0x2805	; 0x802805 <HIGH_CAL_VALUE_SET>
    306e:	70 91 06 28 	lds	r23, 0x2806	; 0x802806 <HIGH_CAL_VALUE_SET+0x1>
    3072:	07 2e       	mov	r0, r23
    3074:	00 0c       	add	r0, r0
    3076:	88 0b       	sbc	r24, r24
    3078:	99 0b       	sbc	r25, r25
    307a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    307e:	8e e1       	ldi	r24, 0x1E	; 30
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    3086:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    308a:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    308e:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <DOT2_0>
    3098:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    309c:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    30a0:	49 97       	sbiw	r24, 0x19	; 25
    30a2:	e4 f5       	brge	.+120    	; 0x311c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x748>
    30a4:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    30a8:	81 11       	cpse	r24, r1
    30aa:	31 c0       	rjmp	.+98     	; 0x310e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x73a>
    30ac:	88 e1       	ldi	r24, 0x18	; 24
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    30b4:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    30b8:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    30bc:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    30c0:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    30c4:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    30c8:	8a e0       	ldi	r24, 0x0A	; 10
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    30d0:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    30d4:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    30d8:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    30dc:	c3 97       	sbiw	r24, 0x33	; 51
    30de:	24 f0       	brlt	.+8      	; 0x30e8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x714>
    30e0:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    30e4:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    30e8:	60 91 31 29 	lds	r22, 0x2931	; 0x802931 <SET_LONG_VALUE+0x14>
    30ec:	70 91 32 29 	lds	r23, 0x2932	; 0x802932 <SET_LONG_VALUE+0x15>
    30f0:	07 2e       	mov	r0, r23
    30f2:	00 0c       	add	r0, r0
    30f4:	88 0b       	sbc	r24, r24
    30f6:	99 0b       	sbc	r25, r25
    30f8:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    30fc:	60 93 c3 28 	sts	0x28C3, r22	; 0x8028c3 <CAL2_CALCULATED_HIGH_CAL_VALUE>
    3100:	70 93 c4 28 	sts	0x28C4, r23	; 0x8028c4 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x1>
    3104:	80 93 c5 28 	sts	0x28C5, r24	; 0x8028c5 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x2>
    3108:	90 93 c6 28 	sts	0x28C6, r25	; 0x8028c6 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x3>
    310c:	f4 cc       	rjmp	.-1560   	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    310e:	89 e1       	ldi	r24, 0x19	; 25
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    3116:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    311a:	d6 cf       	rjmp	.-84     	; 0x30c8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x6f4>
    311c:	80 91 31 29 	lds	r24, 0x2931	; 0x802931 <SET_LONG_VALUE+0x14>
    3120:	90 91 32 29 	lds	r25, 0x2932	; 0x802932 <SET_LONG_VALUE+0x15>
    3124:	2a e0       	ldi	r18, 0x0A	; 10
    3126:	28 9f       	mul	r18, r24
    3128:	b0 01       	movw	r22, r0
    312a:	29 9f       	mul	r18, r25
    312c:	70 0d       	add	r23, r0
    312e:	11 24       	eor	r1, r1
    3130:	07 2e       	mov	r0, r23
    3132:	00 0c       	add	r0, r0
    3134:	88 0b       	sbc	r24, r24
    3136:	99 0b       	sbc	r25, r25
    3138:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    313c:	c5 cf       	rjmp	.-118    	; 0x30c8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x6f4>
    313e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    3142:	60 91 05 28 	lds	r22, 0x2805	; 0x802805 <HIGH_CAL_VALUE_SET>
    3146:	70 91 06 28 	lds	r23, 0x2806	; 0x802806 <HIGH_CAL_VALUE_SET+0x1>
    314a:	07 2e       	mov	r0, r23
    314c:	00 0c       	add	r0, r0
    314e:	88 0b       	sbc	r24, r24
    3150:	99 0b       	sbc	r25, r25
    3152:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    3156:	8e e1       	ldi	r24, 0x1E	; 30
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    315e:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    3162:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    3166:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <DOT2_0>
    3170:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    3174:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    3178:	49 97       	sbiw	r24, 0x19	; 25
    317a:	74 f5       	brge	.+92     	; 0x31d8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x804>
    317c:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    3180:	81 11       	cpse	r24, r1
    3182:	23 c0       	rjmp	.+70     	; 0x31ca <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x7f6>
    3184:	88 e1       	ldi	r24, 0x18	; 24
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    318c:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    3190:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    3194:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    3198:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    319c:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    31a0:	8a e0       	ldi	r24, 0x0A	; 10
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    31a8:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    31ac:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    31b0:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    31b4:	c3 97       	sbiw	r24, 0x33	; 51
    31b6:	24 f0       	brlt	.+8      	; 0x31c0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x7ec>
    31b8:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    31bc:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    31c0:	60 91 33 29 	lds	r22, 0x2933	; 0x802933 <SET_LONG_VALUE+0x16>
    31c4:	70 91 34 29 	lds	r23, 0x2934	; 0x802934 <SET_LONG_VALUE+0x17>
    31c8:	93 cf       	rjmp	.-218    	; 0x30f0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x71c>
    31ca:	89 e1       	ldi	r24, 0x19	; 25
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    31d2:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    31d6:	e4 cf       	rjmp	.-56     	; 0x31a0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x7cc>
    31d8:	80 91 33 29 	lds	r24, 0x2933	; 0x802933 <SET_LONG_VALUE+0x16>
    31dc:	90 91 34 29 	lds	r25, 0x2934	; 0x802934 <SET_LONG_VALUE+0x17>
    31e0:	2a e0       	ldi	r18, 0x0A	; 10
    31e2:	28 9f       	mul	r18, r24
    31e4:	b0 01       	movw	r22, r0
    31e6:	29 9f       	mul	r18, r25
    31e8:	70 0d       	add	r23, r0
    31ea:	11 24       	eor	r1, r1
    31ec:	07 2e       	mov	r0, r23
    31ee:	00 0c       	add	r0, r0
    31f0:	88 0b       	sbc	r24, r24
    31f2:	99 0b       	sbc	r25, r25
    31f4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    31f8:	d3 cf       	rjmp	.-90     	; 0x31a0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x7cc>
    31fa:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    31fe:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3202:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    3206:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    320a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
DISPLAY_DIGIT2():
    320e:	4f e0       	ldi	r20, 0x0F	; 15
    3210:	50 e0       	ldi	r21, 0x00	; 0
    3212:	40 93 de 28 	sts	0x28DE, r20	; 0x8028de <digits2>
    3216:	50 93 df 28 	sts	0x28DF, r21	; 0x8028df <digits2+0x1>
    321a:	24 e1       	ldi	r18, 0x14	; 20
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	20 93 e0 28 	sts	0x28E0, r18	; 0x8028e0 <digits2+0x2>
    3222:	30 93 e1 28 	sts	0x28E1, r19	; 0x8028e1 <digits2+0x3>
    3226:	81 e1       	ldi	r24, 0x11	; 17
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    322e:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    3232:	8b e1       	ldi	r24, 0x1B	; 27
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    323a:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    323e:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    3242:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    3246:	89 31       	cpi	r24, 0x19	; 25
    3248:	91 05       	cpc	r25, r1
    324a:	0c f4       	brge	.+2      	; 0x324e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x87a>
    324c:	20 cc       	rjmp	.-1984   	; 0x2a8e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xba>
    324e:	60 91 37 29 	lds	r22, 0x2937	; 0x802937 <SET_LONG_VALUE+0x1a>
    3252:	70 91 38 29 	lds	r23, 0x2938	; 0x802938 <SET_LONG_VALUE+0x1b>
    3256:	67 2b       	or	r22, r23
    3258:	89 f0       	breq	.+34     	; 0x327c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x8a8>
DISPLAY_DIGIT1():
    325a:	40 93 d6 28 	sts	0x28D6, r20	; 0x8028d6 <digits1>
    325e:	50 93 d7 28 	sts	0x28D7, r21	; 0x8028d7 <digits1+0x1>
    3262:	20 93 d8 28 	sts	0x28D8, r18	; 0x8028d8 <digits1+0x2>
    3266:	30 93 d9 28 	sts	0x28D9, r19	; 0x8028d9 <digits1+0x3>
    326a:	2e e0       	ldi	r18, 0x0E	; 14
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	20 93 da 28 	sts	0x28DA, r18	; 0x8028da <digits1+0x4>
    3272:	30 93 db 28 	sts	0x28DB, r19	; 0x8028db <digits1+0x5>
    3276:	2a e1       	ldi	r18, 0x1A	; 26
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	9a cc       	rjmp	.-1740   	; 0x2bb0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1dc>
    327c:	20 e2       	ldi	r18, 0x20	; 32
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	20 93 d6 28 	sts	0x28D6, r18	; 0x8028d6 <digits1>
    3284:	30 93 d7 28 	sts	0x28D7, r19	; 0x8028d7 <digits1+0x1>
    3288:	2c e0       	ldi	r18, 0x0C	; 12
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	ea cf       	rjmp	.-44     	; 0x3262 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x88e>
SET_LONG_PRESS_FUNCTION():
    328e:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    3292:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3296:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    329a:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    329e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
DISPLAY_DIGIT2():
    32a2:	8c e0       	ldi	r24, 0x0C	; 12
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    32aa:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    32ae:	2c e1       	ldi	r18, 0x1C	; 28
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	20 93 e0 28 	sts	0x28E0, r18	; 0x8028e0 <digits2+0x2>
    32b6:	30 93 e1 28 	sts	0x28E1, r19	; 0x8028e1 <digits2+0x3>
    32ba:	41 e1       	ldi	r20, 0x11	; 17
    32bc:	50 e0       	ldi	r21, 0x00	; 0
    32be:	40 93 e2 28 	sts	0x28E2, r20	; 0x8028e2 <digits2+0x4>
    32c2:	50 93 e3 28 	sts	0x28E3, r21	; 0x8028e3 <digits2+0x5>
    32c6:	2f e0       	ldi	r18, 0x0F	; 15
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <digits2+0x6>
    32ce:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    32d2:	40 93 d6 28 	sts	0x28D6, r20	; 0x8028d6 <digits1>
    32d6:	50 93 d7 28 	sts	0x28D7, r21	; 0x8028d7 <digits1+0x1>
    32da:	20 93 d8 28 	sts	0x28D8, r18	; 0x8028d8 <digits1+0x2>
    32de:	30 93 d9 28 	sts	0x28D9, r19	; 0x8028d9 <digits1+0x3>
    32e2:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    32e6:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    32ea:	80 e1       	ldi	r24, 0x10	; 16
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    32f2:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    32f6:	4a c1       	rjmp	.+660    	; 0x358c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xbb8>
SET_LONG_PRESS_FUNCTION():
    32f8:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    32fc:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3300:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    3304:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    3308:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    330c:	80 91 c1 28 	lds	r24, 0x28C1	; 0x8028c1 <currentMillis>
    3310:	90 91 c2 28 	lds	r25, 0x28C2	; 0x8028c2 <currentMillis+0x1>
    3314:	8f 31       	cpi	r24, 0x1F	; 31
    3316:	91 05       	cpc	r25, r1
    3318:	b8 f4       	brcc	.+46     	; 0x3348 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x974>
digitalWrite():
    331a:	61 e0       	ldi	r22, 0x01	; 1
    331c:	85 e1       	ldi	r24, 0x15	; 21
    331e:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
DISPLAY_DIGIT2():
    3322:	86 e1       	ldi	r24, 0x16	; 22
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    332a:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    332e:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    3332:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    3336:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    333a:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    333e:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    3342:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
    3346:	a5 cb       	rjmp	.-2230   	; 0x2a92 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xbe>
SET_LONG_PRESS_FUNCTION():
    3348:	9c 01       	movw	r18, r24
    334a:	29 52       	subi	r18, 0x29	; 41
    334c:	31 09       	sbc	r19, r1
    334e:	22 38       	cpi	r18, 0x82	; 130
    3350:	31 05       	cpc	r19, r1
    3352:	78 f5       	brcc	.+94     	; 0x33b2 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x9de>
digitalWrite():
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	85 e1       	ldi	r24, 0x15	; 21
    3358:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
DISPLAY_DIGIT2():
    335c:	81 e1       	ldi	r24, 0x11	; 17
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    3364:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    3368:	8f e0       	ldi	r24, 0x0F	; 15
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    3370:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    3374:	2c e0       	ldi	r18, 0x0C	; 12
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	20 93 e2 28 	sts	0x28E2, r18	; 0x8028e2 <digits2+0x4>
    337c:	30 93 e3 28 	sts	0x28E3, r19	; 0x8028e3 <digits2+0x5>
    3380:	20 e1       	ldi	r18, 0x10	; 16
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <digits2+0x6>
    3388:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    338c:	20 e2       	ldi	r18, 0x20	; 32
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	20 93 d6 28 	sts	0x28D6, r18	; 0x8028d6 <digits1>
    3394:	30 93 d7 28 	sts	0x28D7, r19	; 0x8028d7 <digits1+0x1>
    3398:	27 e1       	ldi	r18, 0x17	; 23
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	20 93 d8 28 	sts	0x28D8, r18	; 0x8028d8 <digits1+0x2>
    33a0:	30 93 d9 28 	sts	0x28D9, r19	; 0x8028d9 <digits1+0x3>
    33a4:	24 e1       	ldi	r18, 0x14	; 20
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	20 93 da 28 	sts	0x28DA, r18	; 0x8028da <digits1+0x4>
    33ac:	30 93 db 28 	sts	0x28DB, r19	; 0x8028db <digits1+0x5>
    33b0:	9c c1       	rjmp	.+824    	; 0x36ea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd16>
SET_LONG_PRESS_FUNCTION():
    33b2:	8b 3a       	cpi	r24, 0xAB	; 171
    33b4:	91 05       	cpc	r25, r1
    33b6:	0c f4       	brge	.+2      	; 0x33ba <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x9e6>
    33b8:	9e cb       	rjmp	.-2244   	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
EEPROM_CLEAR():
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	80 93 c0 28 	sts	0x28C0, r24	; 0x8028c0 <TIME_SOCK_OR_TOTAL>
    33c0:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <AUTO_RESUM_SET>
    33c4:	10 92 0d 29 	sts	0x290D, r1	; 0x80290d <SAFE_VALUE_SET_DEG>
    33c8:	4c e2       	ldi	r20, 0x2C	; 44
    33ca:	51 e0       	ldi	r21, 0x01	; 1
    33cc:	40 93 0b 29 	sts	0x290B, r20	; 0x80290b <SAFE_VALUE_SET>
    33d0:	50 93 0c 29 	sts	0x290C, r21	; 0x80290c <SAFE_VALUE_SET+0x1>
    33d4:	10 92 f6 28 	sts	0x28F6, r1	; 0x8028f6 <CAL_SELECT_VALUE>
    33d8:	10 92 f7 28 	sts	0x28F7, r1	; 0x8028f7 <CAL_SELECT_VALUE+0x1>
    33dc:	10 92 06 29 	sts	0x2906, r1	; 0x802906 <ERROR_CAL1>
    33e0:	10 92 07 29 	sts	0x2907, r1	; 0x802907 <ERROR_CAL1+0x1>
    33e4:	10 92 08 29 	sts	0x2908, r1	; 0x802908 <ERROR_CAL1+0x2>
    33e8:	10 92 09 29 	sts	0x2909, r1	; 0x802909 <ERROR_CAL1+0x3>
    33ec:	10 92 fd 28 	sts	0x28FD, r1	; 0x8028fd <SIGN>
    33f0:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <ERROR_SET_IN_DEG_FLAG>
    33f4:	10 92 b7 28 	sts	0x28B7, r1	; 0x8028b7 <ERROR_SET_IN_FAH_FLAG>
    33f8:	0e e1       	ldi	r16, 0x1E	; 30
    33fa:	10 e0       	ldi	r17, 0x00	; 0
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	00 93 f2 28 	sts	0x28F2, r16	; 0x8028f2 <CAL2_RAW_LOW_VALUE_CONV>
    3404:	10 93 f3 28 	sts	0x28F3, r17	; 0x8028f3 <CAL2_RAW_LOW_VALUE_CONV+0x1>
    3408:	20 93 f4 28 	sts	0x28F4, r18	; 0x8028f4 <CAL2_RAW_LOW_VALUE_CONV+0x2>
    340c:	30 93 f5 28 	sts	0x28F5, r19	; 0x8028f5 <CAL2_RAW_LOW_VALUE_CONV+0x3>
    3410:	04 e5       	ldi	r16, 0x54	; 84
    3412:	10 e0       	ldi	r17, 0x00	; 0
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	00 93 ee 28 	sts	0x28EE, r16	; 0x8028ee <CAL2_RAW_HIGH_VALUE_CONV>
    341c:	10 93 ef 28 	sts	0x28EF, r17	; 0x8028ef <CAL2_RAW_HIGH_VALUE_CONV+0x1>
    3420:	20 93 f0 28 	sts	0x28F0, r18	; 0x8028f0 <CAL2_RAW_HIGH_VALUE_CONV+0x2>
    3424:	30 93 f1 28 	sts	0x28F1, r19	; 0x8028f1 <CAL2_RAW_HIGH_VALUE_CONV+0x3>
    3428:	0c e1       	ldi	r16, 0x1C	; 28
    342a:	10 e0       	ldi	r17, 0x00	; 0
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	00 93 ea 28 	sts	0x28EA, r16	; 0x8028ea <MASTER_LOW_CONV>
    3434:	10 93 eb 28 	sts	0x28EB, r17	; 0x8028eb <MASTER_LOW_CONV+0x1>
    3438:	20 93 ec 28 	sts	0x28EC, r18	; 0x8028ec <MASTER_LOW_CONV+0x2>
    343c:	30 93 ed 28 	sts	0x28ED, r19	; 0x8028ed <MASTER_LOW_CONV+0x3>
    3440:	02 e5       	ldi	r16, 0x52	; 82
    3442:	10 e0       	ldi	r17, 0x00	; 0
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	00 93 e6 28 	sts	0x28E6, r16	; 0x8028e6 <MASTER_HIGH_CONV>
    344c:	10 93 e7 28 	sts	0x28E7, r17	; 0x8028e7 <MASTER_HIGH_CONV+0x1>
    3450:	20 93 e8 28 	sts	0x28E8, r18	; 0x8028e8 <MASTER_HIGH_CONV+0x2>
    3454:	30 93 e9 28 	sts	0x28E9, r19	; 0x8028e9 <MASTER_HIGH_CONV+0x3>
    3458:	00 e0       	ldi	r16, 0x00	; 0
    345a:	10 e0       	ldi	r17, 0x00	; 0
    345c:	26 e1       	ldi	r18, 0x16	; 22
    345e:	33 e4       	ldi	r19, 0x43	; 67
    3460:	00 93 16 28 	sts	0x2816, r16	; 0x802816 <Kp>
    3464:	10 93 17 28 	sts	0x2817, r17	; 0x802817 <Kp+0x1>
    3468:	20 93 18 28 	sts	0x2818, r18	; 0x802818 <Kp+0x2>
    346c:	30 93 19 28 	sts	0x2819, r19	; 0x802819 <Kp+0x3>
    3470:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <Ki>
    3474:	10 92 1b 28 	sts	0x281B, r1	; 0x80281b <Ki+0x1>
    3478:	10 92 1c 28 	sts	0x281C, r1	; 0x80281c <Ki+0x2>
    347c:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <Ki+0x3>
    3480:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <Kd>
    3484:	10 92 1f 28 	sts	0x281F, r1	; 0x80281f <Kd+0x1>
    3488:	10 92 20 28 	sts	0x2820, r1	; 0x802820 <Kd+0x2>
    348c:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <Kd+0x3>
    3490:	10 92 55 29 	sts	0x2955, r1	; 0x802955 <LONG_PRESS>
    3494:	21 e0       	ldi	r18, 0x01	; 1
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	20 93 1d 29 	sts	0x291D, r18	; 0x80291d <SET_LONG_VALUE>
    349c:	30 93 1e 29 	sts	0x291E, r19	; 0x80291e <SET_LONG_VALUE+0x1>
    34a0:	10 92 1f 29 	sts	0x291F, r1	; 0x80291f <SET_LONG_VALUE+0x2>
    34a4:	10 92 20 29 	sts	0x2920, r1	; 0x802920 <SET_LONG_VALUE+0x3>
    34a8:	10 92 21 29 	sts	0x2921, r1	; 0x802921 <SET_LONG_VALUE+0x4>
    34ac:	10 92 22 29 	sts	0x2922, r1	; 0x802922 <SET_LONG_VALUE+0x5>
    34b0:	10 92 23 29 	sts	0x2923, r1	; 0x802923 <SET_LONG_VALUE+0x6>
    34b4:	10 92 24 29 	sts	0x2924, r1	; 0x802924 <SET_LONG_VALUE+0x7>
    34b8:	40 93 3d 29 	sts	0x293D, r20	; 0x80293d <SET_LONG_VALUE+0x20>
    34bc:	50 93 3e 29 	sts	0x293E, r21	; 0x80293e <SET_LONG_VALUE+0x21>
    34c0:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <Energy_Mode>
    34c4:	20 93 37 29 	sts	0x2937, r18	; 0x802937 <SET_LONG_VALUE+0x1a>
    34c8:	30 93 38 29 	sts	0x2938, r19	; 0x802938 <SET_LONG_VALUE+0x1b>
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	36 d9       	rcall	.-3476   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	88 ec       	ldi	r24, 0xC8	; 200
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	32 d9       	rcall	.-3484   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    34dc:	6c e2       	ldi	r22, 0x2C	; 44
    34de:	89 ec       	ldi	r24, 0xC9	; 201
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	2e d9       	rcall	.-3492   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    34e4:	60 91 c0 28 	lds	r22, 0x28C0	; 0x8028c0 <TIME_SOCK_OR_TOTAL>
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	29 d9       	rcall	.-3502   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	87 e3       	ldi	r24, 0x37	; 55
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	25 d9       	rcall	.-3510   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    34f6:	61 e0       	ldi	r22, 0x01	; 1
    34f8:	8f e0       	ldi	r24, 0x0F	; 15
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	21 d9       	rcall	.-3518   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	85 e0       	ldi	r24, 0x05	; 5
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	1d d9       	rcall	.-3526   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3506:	2e d9       	rcall	.-3492   	; 0x2764 <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.17] [clone .constprop.28]>
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	87 e0       	ldi	r24, 0x07	; 7
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	18 d9       	rcall	.-3536   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3510:	61 e0       	ldi	r22, 0x01	; 1
    3512:	88 e0       	ldi	r24, 0x08	; 8
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	14 d9       	rcall	.-3544   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3518:	60 e0       	ldi	r22, 0x00	; 0
    351a:	89 e0       	ldi	r24, 0x09	; 9
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	10 d9       	rcall	.-3552   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3520:	62 ef       	ldi	r22, 0xF2	; 242
    3522:	78 e2       	ldi	r23, 0x28	; 40
    3524:	80 e5       	ldi	r24, 0x50	; 80
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	23 da       	rcall	.-3002   	; 0x2970 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]>
    352a:	6e ee       	ldi	r22, 0xEE	; 238
    352c:	78 e2       	ldi	r23, 0x28	; 40
    352e:	8a e5       	ldi	r24, 0x5A	; 90
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	1e da       	rcall	.-3012   	; 0x2970 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]>
    3534:	6a ee       	ldi	r22, 0xEA	; 234
    3536:	78 e2       	ldi	r23, 0x28	; 40
    3538:	84 e6       	ldi	r24, 0x64	; 100
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	19 da       	rcall	.-3022   	; 0x2970 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]>
    353e:	66 ee       	ldi	r22, 0xE6	; 230
    3540:	78 e2       	ldi	r23, 0x28	; 40
    3542:	8e e6       	ldi	r24, 0x6E	; 110
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	14 da       	rcall	.-3032   	; 0x2970 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]>
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	80 ea       	ldi	r24, 0xA0	; 160
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	f8 d8       	rcall	.-3600   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	86 e9       	ldi	r24, 0x96	; 150
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	f4 d8       	rcall	.-3608   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3558:	60 e0       	ldi	r22, 0x00	; 0
    355a:	87 e9       	ldi	r24, 0x97	; 151
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	f0 d8       	rcall	.-3616   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	84 eb       	ldi	r24, 0xB4	; 180
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	ec d8       	rcall	.-3624   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	88 e9       	ldi	r24, 0x98	; 152
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	e8 d8       	rcall	.-3632   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	89 e9       	ldi	r24, 0x99	; 153
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	e4 d8       	rcall	.-3640   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	8a e9       	ldi	r24, 0x9A	; 154
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	e0 d8       	rcall	.-3648   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3580:	60 e0       	ldi	r22, 0x00	; 0
    3582:	8b e9       	ldi	r24, 0x9B	; 155
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	dc d8       	rcall	.-3656   	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    3588:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
SET_LONG_PRESS_FUNCTION():
    358c:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <currentMillis>
    3590:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <currentMillis+0x1>
    3594:	b0 ca       	rjmp	.-2720   	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    3596:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    359a:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    359e:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
DISPLAY_DIGIT2():
    35a2:	8c e0       	ldi	r24, 0x0C	; 12
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    35aa:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    35ae:	8d e0       	ldi	r24, 0x0D	; 13
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    35b6:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    35ba:	85 e1       	ldi	r24, 0x15	; 21
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    35c2:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    35c6:	8f e0       	ldi	r24, 0x0F	; 15
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    35ce:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    35d2:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    35d6:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    35da:	49 97       	sbiw	r24, 0x19	; 25
    35dc:	0c f4       	brge	.+2      	; 0x35e0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xc0c>
    35de:	ad cb       	rjmp	.-2214   	; 0x2d3a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x366>
    35e0:	80 91 3f 29 	lds	r24, 0x293F	; 0x80293f <SET_LONG_VALUE+0x22>
    35e4:	90 91 40 29 	lds	r25, 0x2940	; 0x802940 <SET_LONG_VALUE+0x23>
    35e8:	bf cb       	rjmp	.-2178   	; 0x2d68 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x394>
    35ea:	89 e1       	ldi	r24, 0x19	; 25
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    35f2:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    35f6:	c4 cb       	rjmp	.-2168   	; 0x2d80 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x3ac>
    35f8:	e2 31       	cpi	r30, 0x12	; 18
    35fa:	f1 05       	cpc	r31, r1
    35fc:	08 f0       	brcs	.+2      	; 0x3600 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xc2c>
    35fe:	7b ca       	rjmp	.-2826   	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    3600:	ec 5f       	subi	r30, 0xFC	; 252
    3602:	f4 4e       	sbci	r31, 0xE4	; 228
    3604:	0c 94 ad 3b 	jmp	0x775a	; 0x775a <__tablejump2__>
    3608:	16 1b       	sub	r17, r22
    360a:	7a 1b       	sub	r23, r26
    360c:	ce 1b       	sub	r28, r30
    360e:	07 1c       	adc	r0, r7
    3610:	50 1c       	adc	r5, r0
    3612:	7b 15       	cp	r23, r11
    3614:	93 1c       	adc	r9, r3
    3616:	cf 1c       	adc	r12, r15
    3618:	00 1d       	adc	r16, r0
    361a:	d3 1d       	adc	r29, r3
    361c:	87 1e       	adc	r8, r23
    361e:	3c 1f       	adc	r19, r28
    3620:	f2 1f       	adc	r31, r18
    3622:	36 20       	and	r3, r6
    3624:	6b 20       	and	r6, r11
    3626:	7b 15       	cp	r23, r11
    3628:	7b 15       	cp	r23, r11
    362a:	a8 20       	and	r10, r8
    362c:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3630:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    3634:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    3638:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
stop():
    363c:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    3640:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    3644:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    3648:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    364c:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    3650:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    3654:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
SET_LONG_PRESS_FUNCTION():
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    3660:	91 e0       	ldi	r25, 0x01	; 1
    3662:	81 11       	cpse	r24, r1
    3664:	01 c0       	rjmp	.+2      	; 0x3668 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xc94>
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	90 93 c0 28 	sts	0x28C0, r25	; 0x8028c0 <TIME_SOCK_OR_TOTAL>
DISPLAY_DIGIT2():
    366c:	20 e1       	ldi	r18, 0x10	; 16
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	20 93 de 28 	sts	0x28DE, r18	; 0x8028de <digits2>
    3674:	30 93 df 28 	sts	0x28DF, r19	; 0x8028df <digits2+0x1>
    3678:	49 e1       	ldi	r20, 0x19	; 25
    367a:	50 e0       	ldi	r21, 0x00	; 0
    367c:	40 93 e0 28 	sts	0x28E0, r20	; 0x8028e0 <digits2+0x2>
    3680:	50 93 e1 28 	sts	0x28E1, r21	; 0x8028e1 <digits2+0x3>
    3684:	42 e1       	ldi	r20, 0x12	; 18
    3686:	50 e0       	ldi	r21, 0x00	; 0
    3688:	40 93 e2 28 	sts	0x28E2, r20	; 0x8028e2 <digits2+0x4>
    368c:	50 93 e3 28 	sts	0x28E3, r21	; 0x8028e3 <digits2+0x5>
    3690:	4f e0       	ldi	r20, 0x0F	; 15
    3692:	50 e0       	ldi	r21, 0x00	; 0
    3694:	40 93 e4 28 	sts	0x28E4, r20	; 0x8028e4 <digits2+0x6>
    3698:	50 93 e5 28 	sts	0x28E5, r21	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    369c:	81 11       	cpse	r24, r1
    369e:	15 c0       	rjmp	.+42     	; 0x36ca <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xcf6>
DISPLAY_DIGIT1():
    36a0:	8c e0       	ldi	r24, 0x0C	; 12
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    36a8:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    36ac:	87 e1       	ldi	r24, 0x17	; 23
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    36b4:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    36b8:	8d e0       	ldi	r24, 0x0D	; 13
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    36c0:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
SET_LONG_PRESS_FUNCTION():
    36c4:	8a e0       	ldi	r24, 0x0A	; 10
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	10 c0       	rjmp	.+32     	; 0x36ea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd16>
DISPLAY_DIGIT1():
    36ca:	20 93 d6 28 	sts	0x28D6, r18	; 0x8028d6 <digits1>
    36ce:	30 93 d7 28 	sts	0x28D7, r19	; 0x8028d7 <digits1+0x1>
    36d2:	87 e1       	ldi	r24, 0x17	; 23
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    36da:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    36de:	20 93 da 28 	sts	0x28DA, r18	; 0x8028da <digits1+0x4>
    36e2:	30 93 db 28 	sts	0x28DB, r19	; 0x8028db <digits1+0x5>
    36e6:	8a e1       	ldi	r24, 0x1A	; 26
    36e8:	90 e0       	ldi	r25, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    36ea:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    36ee:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    36f2:	01 ca       	rjmp	.-3070   	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
stop():
    36f4:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    36f8:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    36fc:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    3700:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    3704:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    3708:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    370c:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
SET_LONG_PRESS_FUNCTION():
    3710:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3714:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    3718:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    371c:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    3720:	87 e3       	ldi	r24, 0x37	; 55
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    3728:	91 e0       	ldi	r25, 0x01	; 1
    372a:	81 11       	cpse	r24, r1
    372c:	01 c0       	rjmp	.+2      	; 0x3730 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd5c>
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	90 93 bf 28 	sts	0x28BF, r25	; 0x8028bf <AUTO_RESUM_SET>
DISPLAY_DIGIT2():
    3734:	21 e1       	ldi	r18, 0x11	; 17
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	20 93 de 28 	sts	0x28DE, r18	; 0x8028de <digits2>
    373c:	30 93 df 28 	sts	0x28DF, r19	; 0x8028df <digits2+0x1>
    3740:	2f e0       	ldi	r18, 0x0F	; 15
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	20 93 e0 28 	sts	0x28E0, r18	; 0x8028e0 <digits2+0x2>
    3748:	30 93 e1 28 	sts	0x28E1, r19	; 0x8028e1 <digits2+0x3>
    374c:	2c e0       	ldi	r18, 0x0C	; 12
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	20 93 e2 28 	sts	0x28E2, r18	; 0x8028e2 <digits2+0x4>
    3754:	30 93 e3 28 	sts	0x28E3, r19	; 0x8028e3 <digits2+0x5>
    3758:	22 e2       	ldi	r18, 0x22	; 34
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <digits2+0x6>
    3760:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    3764:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <digits1>
    3768:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <digits1+0x1>
SET_LONG_PRESS_FUNCTION():
    376c:	81 11       	cpse	r24, r1
    376e:	0d c0       	rjmp	.+26     	; 0x378a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xdb6>
DISPLAY_DIGIT1():
    3770:	85 e1       	ldi	r24, 0x15	; 21
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    3778:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    377c:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    3780:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    3784:	88 e1       	ldi	r24, 0x18	; 24
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	b0 cf       	rjmp	.-160    	; 0x36ea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd16>
    378a:	84 e1       	ldi	r24, 0x14	; 20
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    3792:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    3796:	88 e1       	ldi	r24, 0x18	; 24
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	83 c9       	rjmp	.-3322   	; 0x2aa2 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xce>
stop():
    379c:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    37a0:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    37a4:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    37a8:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    37ac:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    37b0:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    37b4:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
SET_LONG_PRESS_FUNCTION():
    37b8:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    37bc:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    37c0:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    37c4:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
DISPLAY_DIGIT2():
    37c8:	8c e0       	ldi	r24, 0x0C	; 12
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    37d0:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    37d4:	8d e0       	ldi	r24, 0x0D	; 13
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    37dc:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    37e0:	85 e1       	ldi	r24, 0x15	; 21
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    37e8:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    37ec:	8f e0       	ldi	r24, 0x0F	; 15
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    37f4:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    37f8:	82 e0       	ldi	r24, 0x02	; 2
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    3800:	91 e0       	ldi	r25, 0x01	; 1
    3802:	81 11       	cpse	r24, r1
    3804:	01 c0       	rjmp	.+2      	; 0x3808 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xe34>
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	90 93 0d 29 	sts	0x290D, r25	; 0x80290d <SAFE_VALUE_SET_DEG>
    380c:	ab cf       	rjmp	.-170    	; 0x3764 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd90>
    380e:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3812:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    3816:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    381a:	85 e0       	ldi	r24, 0x05	; 5
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <CAL_SELECT_VALUE>
    3828:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <CAL_SELECT_VALUE+0x1>
stop():
    382c:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    3830:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    3834:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    3838:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    383c:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    3840:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    3844:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
DISPLAY_DIGIT2():
    3848:	6a e0       	ldi	r22, 0x0A	; 10
    384a:	70 e0       	ldi	r23, 0x00	; 0
    384c:	60 93 de 28 	sts	0x28DE, r22	; 0x8028de <digits2>
    3850:	70 93 df 28 	sts	0x28DF, r23	; 0x8028df <digits2+0x1>
    3854:	4d e0       	ldi	r20, 0x0D	; 13
    3856:	50 e0       	ldi	r21, 0x00	; 0
    3858:	40 93 e0 28 	sts	0x28E0, r20	; 0x8028e0 <digits2+0x2>
    385c:	50 93 e1 28 	sts	0x28E1, r21	; 0x8028e1 <digits2+0x3>
    3860:	2a e1       	ldi	r18, 0x1A	; 26
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	20 93 e2 28 	sts	0x28E2, r18	; 0x8028e2 <digits2+0x4>
    3868:	30 93 e3 28 	sts	0x28E3, r19	; 0x8028e3 <digits2+0x5>
    386c:	ee e0       	ldi	r30, 0x0E	; 14
    386e:	f0 e0       	ldi	r31, 0x00	; 0
    3870:	e0 93 e4 28 	sts	0x28E4, r30	; 0x8028e4 <digits2+0x6>
    3874:	f0 93 e5 28 	sts	0x28E5, r31	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    3878:	60 93 d6 28 	sts	0x28D6, r22	; 0x8028d6 <digits1>
    387c:	70 93 d7 28 	sts	0x28D7, r23	; 0x8028d7 <digits1+0x1>
    3880:	40 93 d8 28 	sts	0x28D8, r20	; 0x8028d8 <digits1+0x2>
    3884:	50 93 d9 28 	sts	0x28D9, r21	; 0x8028d9 <digits1+0x3>
    3888:	20 93 da 28 	sts	0x28DA, r18	; 0x8028da <digits1+0x4>
    388c:	30 93 db 28 	sts	0x28DB, r19	; 0x8028db <digits1+0x5>
SET_LONG_PRESS_FUNCTION():
    3890:	89 2b       	or	r24, r25
    3892:	19 f0       	breq	.+6      	; 0x389a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xec6>
DISPLAY_DIGIT1():
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	28 cf       	rjmp	.-432    	; 0x36ea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd16>
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	25 cf       	rjmp	.-438    	; 0x36ea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd16>
SET_LONG_PRESS_FUNCTION():
    38a0:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    38a4:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
stop():
    38a8:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    38ac:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    38b0:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    38b4:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    38b8:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    38bc:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    38c0:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
DISPLAY_DIGIT2():
    38c4:	ca e0       	ldi	r28, 0x0A	; 10
    38c6:	d0 e0       	ldi	r29, 0x00	; 0
    38c8:	c0 93 de 28 	sts	0x28DE, r28	; 0x8028de <digits2>
    38cc:	d0 93 df 28 	sts	0x28DF, r29	; 0x8028df <digits2+0x1>
    38d0:	8d e0       	ldi	r24, 0x0D	; 13
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    38d8:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    38dc:	8a e1       	ldi	r24, 0x1A	; 26
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    38e4:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    38f0:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e2       	ldi	r20, 0x20	; 32
    38fa:	51 e4       	ldi	r21, 0x41	; 65
    38fc:	60 91 0e 28 	lds	r22, 0x280E	; 0x80280e <TEMP_DEG_RAW>
    3900:	70 91 0f 28 	lds	r23, 0x280F	; 0x80280f <TEMP_DEG_RAW+0x1>
    3904:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <TEMP_DEG_RAW+0x2>
    3908:	90 91 11 28 	lds	r25, 0x2811	; 0x802811 <TEMP_DEG_RAW+0x3>
    390c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    3910:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    3914:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    3918:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    391c:	c0 93 dc 28 	sts	0x28DC, r28	; 0x8028dc <digits1+0x6>
    3920:	d0 93 dd 28 	sts	0x28DD, r29	; 0x8028dd <digits1+0x7>
    3924:	e8 c8       	rjmp	.-3632   	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	80 93 d2 28 	sts	0x28D2, r24	; 0x8028d2 <DOT1_0>
    392c:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3930:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
stop():
    3934:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    3938:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    393c:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    3940:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    3944:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    3948:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    394c:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
DISPLAY_DIGIT2():
    3950:	8a e0       	ldi	r24, 0x0A	; 10
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    3958:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    395c:	8d e0       	ldi	r24, 0x0D	; 13
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    3964:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    3968:	ca e1       	ldi	r28, 0x1A	; 26
    396a:	d0 e0       	ldi	r29, 0x00	; 0
    396c:	c0 93 e2 28 	sts	0x28E2, r28	; 0x8028e2 <digits2+0x4>
    3970:	d0 93 e3 28 	sts	0x28E3, r29	; 0x8028e3 <digits2+0x5>
    3974:	82 e0       	ldi	r24, 0x02	; 2
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    397c:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3980:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    3984:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    3988:	07 2e       	mov	r0, r23
    398a:	00 0c       	add	r0, r0
    398c:	88 0b       	sbc	r24, r24
    398e:	99 0b       	sbc	r25, r25
    3990:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    3994:	c0 93 d6 28 	sts	0x28D6, r28	; 0x8028d6 <digits1>
    3998:	d0 93 d7 28 	sts	0x28D7, r29	; 0x8028d7 <digits1+0x1>
    399c:	ac c8       	rjmp	.-3752   	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
stop():
    399e:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    39a2:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    39a6:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    39aa:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    39ae:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    39b2:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    39b6:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
DISPLAY_DIGIT2():
    39ba:	ca e0       	ldi	r28, 0x0A	; 10
    39bc:	d0 e0       	ldi	r29, 0x00	; 0
    39be:	c0 93 de 28 	sts	0x28DE, r28	; 0x8028de <digits2>
    39c2:	d0 93 df 28 	sts	0x28DF, r29	; 0x8028df <digits2+0x1>
    39c6:	8d e0       	ldi	r24, 0x0D	; 13
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    39ce:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    39d2:	8a e1       	ldi	r24, 0x1A	; 26
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    39da:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    39de:	82 e0       	ldi	r24, 0x02	; 2
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    39e6:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    39ea:	60 91 05 28 	lds	r22, 0x2805	; 0x802805 <HIGH_CAL_VALUE_SET>
    39ee:	70 91 06 28 	lds	r23, 0x2806	; 0x802806 <HIGH_CAL_VALUE_SET+0x1>
    39f2:	07 2e       	mov	r0, r23
    39f4:	00 0c       	add	r0, r0
    39f6:	88 0b       	sbc	r24, r24
    39f8:	99 0b       	sbc	r25, r25
    39fa:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    39fe:	8e cf       	rjmp	.-228    	; 0x391c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xf48>
    3a00:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <DOT2_0>
    3a0a:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    3a0e:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3a12:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
stop():
    3a16:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    3a1a:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    3a1e:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    3a22:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    3a26:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    3a2a:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    3a2e:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
SET_LONG_PRESS_FUNCTION():
    3a32:	60 91 29 29 	lds	r22, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
    3a36:	70 91 2a 29 	lds	r23, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
    3a3a:	07 2e       	mov	r0, r23
    3a3c:	00 0c       	add	r0, r0
    3a3e:	88 0b       	sbc	r24, r24
    3a40:	99 0b       	sbc	r25, r25
    3a42:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    3a46:	60 93 34 2a 	sts	0x2A34, r22	; 0x802a34 <PID_SETPOINT>
    3a4a:	70 93 35 2a 	sts	0x2A35, r23	; 0x802a35 <PID_SETPOINT+0x1>
    3a4e:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <PID_SETPOINT+0x2>
    3a52:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <PID_SETPOINT+0x3>
digitalWrite():
    3a56:	61 e0       	ldi	r22, 0x01	; 1
    3a58:	81 e2       	ldi	r24, 0x21	; 33
    3a5a:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3a5e:	77 24       	eor	r7, r7
    3a60:	73 94       	inc	r7
DISPLAY_DIGIT1():
    3a62:	7e e1       	ldi	r23, 0x1E	; 30
    3a64:	e7 2e       	mov	r14, r23
    3a66:	f1 2c       	mov	r15, r1
    3a68:	ef e0       	ldi	r30, 0x0F	; 15
    3a6a:	ce 2e       	mov	r12, r30
    3a6c:	d1 2c       	mov	r13, r1
    3a6e:	fd e0       	ldi	r31, 0x0D	; 13
    3a70:	af 2e       	mov	r10, r31
    3a72:	b1 2c       	mov	r11, r1
    3a74:	a0 e1       	ldi	r26, 0x10	; 16
    3a76:	8a 2e       	mov	r8, r26
    3a78:	91 2c       	mov	r9, r1
    3a7a:	c8 e1       	ldi	r28, 0x18	; 24
    3a7c:	d0 e0       	ldi	r29, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    3a7e:	0a e1       	ldi	r16, 0x1A	; 26
    3a80:	10 e0       	ldi	r17, 0x00	; 0
    3a82:	20 91 34 2a 	lds	r18, 0x2A34	; 0x802a34 <PID_SETPOINT>
    3a86:	30 91 35 2a 	lds	r19, 0x2A35	; 0x802a35 <PID_SETPOINT+0x1>
    3a8a:	40 91 36 2a 	lds	r20, 0x2A36	; 0x802a36 <PID_SETPOINT+0x2>
    3a8e:	50 91 37 2a 	lds	r21, 0x2A37	; 0x802a37 <PID_SETPOINT+0x3>
    3a92:	60 91 3c 2a 	lds	r22, 0x2A3C	; 0x802a3c <PID_INPUT>
    3a96:	70 91 3d 2a 	lds	r23, 0x2A3D	; 0x802a3d <PID_INPUT+0x1>
    3a9a:	80 91 3e 2a 	lds	r24, 0x2A3E	; 0x802a3e <PID_INPUT+0x2>
    3a9e:	90 91 3f 2a 	lds	r25, 0x2A3F	; 0x802a3f <PID_INPUT+0x3>
    3aa2:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    3aa6:	87 ff       	sbrs	r24, 7
    3aa8:	62 c0       	rjmp	.+196    	; 0x3b6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x119a>
    3aaa:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <RST_BUTT>
    3aae:	88 23       	and	r24, r24
    3ab0:	09 f4       	brne	.+2      	; 0x3ab4 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x10e0>
    3ab2:	5d c0       	rjmp	.+186    	; 0x3b6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x119a>
    3ab4:	0e 94 48 05 	call	0xa90	; 0xa90 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]>
    3ab8:	60 91 29 29 	lds	r22, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
    3abc:	70 91 2a 29 	lds	r23, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
    3ac0:	07 2e       	mov	r0, r23
    3ac2:	00 0c       	add	r0, r0
    3ac4:	88 0b       	sbc	r24, r24
    3ac6:	99 0b       	sbc	r25, r25
    3ac8:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    3acc:	60 93 34 2a 	sts	0x2A34, r22	; 0x802a34 <PID_SETPOINT>
    3ad0:	70 93 35 2a 	sts	0x2A35, r23	; 0x802a35 <PID_SETPOINT+0x1>
    3ad4:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <PID_SETPOINT+0x2>
    3ad8:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <PID_SETPOINT+0x3>
    3adc:	70 92 bd 28 	sts	0x28BD, r7	; 0x8028bd <EXECUTE_PID_LOOP>
    3ae0:	0e 94 45 0a 	call	0x148a	; 0x148a <Bclass::PID_callingg() [clone .constprop.44]>
digitalWrite():
    3ae4:	60 e0       	ldi	r22, 0x00	; 0
    3ae6:	8b e1       	ldi	r24, 0x1B	; 27
    3ae8:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
DISPLAY_UPDATE():
    3aec:	8e e2       	ldi	r24, 0x2E	; 46
    3aee:	9b e2       	ldi	r25, 0x2B	; 43
    3af0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
SET_LONG_PRESS_FUNCTION():
    3af4:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    3af8:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    3afc:	89 31       	cpi	r24, 0x19	; 25
    3afe:	91 05       	cpc	r25, r1
    3b00:	fc f4       	brge	.+62     	; 0x3b40 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x116c>
DISPLAY_DIGIT1():
    3b02:	c0 93 d6 28 	sts	0x28D6, r28	; 0x8028d6 <digits1>
    3b06:	d0 93 d7 28 	sts	0x28D7, r29	; 0x8028d7 <digits1+0x1>
    3b0a:	c0 93 d8 28 	sts	0x28D8, r28	; 0x8028d8 <digits1+0x2>
    3b0e:	d0 93 d9 28 	sts	0x28D9, r29	; 0x8028d9 <digits1+0x3>
    3b12:	c0 93 da 28 	sts	0x28DA, r28	; 0x8028da <digits1+0x4>
    3b16:	d0 93 db 28 	sts	0x28DB, r29	; 0x8028db <digits1+0x5>
    3b1a:	c0 93 dc 28 	sts	0x28DC, r28	; 0x8028dc <digits1+0x6>
    3b1e:	d0 93 dd 28 	sts	0x28DD, r29	; 0x8028dd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    3b22:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    3b26:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    3b2a:	07 2e       	mov	r0, r23
    3b2c:	00 0c       	add	r0, r0
    3b2e:	88 0b       	sbc	r24, r24
    3b30:	99 0b       	sbc	r25, r25
    3b32:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    3b36:	00 93 de 28 	sts	0x28DE, r16	; 0x8028de <digits2>
    3b3a:	10 93 df 28 	sts	0x28DF, r17	; 0x8028df <digits2+0x1>
    3b3e:	a1 cf       	rjmp	.-190    	; 0x3a82 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x10ae>
DISPLAY_DIGIT1():
    3b40:	e0 92 d6 28 	sts	0x28D6, r14	; 0x8028d6 <digits1>
    3b44:	f0 92 d7 28 	sts	0x28D7, r15	; 0x8028d7 <digits1+0x1>
    3b48:	c0 92 d8 28 	sts	0x28D8, r12	; 0x8028d8 <digits1+0x2>
    3b4c:	d0 92 d9 28 	sts	0x28D9, r13	; 0x8028d9 <digits1+0x3>
    3b50:	a0 92 da 28 	sts	0x28DA, r10	; 0x8028da <digits1+0x4>
    3b54:	b0 92 db 28 	sts	0x28DB, r11	; 0x8028db <digits1+0x5>
    3b58:	80 92 dc 28 	sts	0x28DC, r8	; 0x8028dc <digits1+0x6>
    3b5c:	90 92 dd 28 	sts	0x28DD, r9	; 0x8028dd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    3b60:	c3 97       	sbiw	r24, 0x33	; 51
    3b62:	fc f2       	brlt	.-66     	; 0x3b22 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x114e>
    3b64:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    3b68:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    3b6c:	da cf       	rjmp	.-76     	; 0x3b22 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x114e>
digitalWrite():
    3b6e:	60 e0       	ldi	r22, 0x00	; 0
    3b70:	81 e2       	ldi	r24, 0x21	; 33
    3b72:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3b76:	8e e1       	ldi	r24, 0x1E	; 30
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	80 93 bb 28 	sts	0x28BB, r24	; 0x8028bb <SET_MIN>
    3b7e:	90 93 bc 28 	sts	0x28BC, r25	; 0x8028bc <SET_MIN+0x1>
    3b82:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <currentMillis1>
    3b86:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <currentMillis1+0x1>
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	80 93 b8 28 	sts	0x28B8, r24	; 0x8028b8 <COUNTDOWN_START>
    3b90:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <SELECTION_PARAMETER>
    3b94:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
    3b98:	01 96       	adiw	r24, 0x01	; 1
    3b9a:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <SELECTION_PARAMETER>
    3b9e:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <SELECTION_PARAMETER+0x1>
    3ba2:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
digitalWrite():
    3ba6:	61 e0       	ldi	r22, 0x01	; 1
    3ba8:	81 e2       	ldi	r24, 0x21	; 33
    3baa:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3bae:	dd 24       	eor	r13, r13
    3bb0:	d3 94       	inc	r13
    3bb2:	6a e1       	ldi	r22, 0x1A	; 26
    3bb4:	e6 2e       	mov	r14, r22
    3bb6:	f1 2c       	mov	r15, r1
DISPLAY_DIGIT1():
    3bb8:	c8 e1       	ldi	r28, 0x18	; 24
    3bba:	d0 e0       	ldi	r29, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    3bbc:	0a e0       	ldi	r16, 0x0A	; 10
    3bbe:	10 e0       	ldi	r17, 0x00	; 0
    3bc0:	c0 90 b8 28 	lds	r12, 0x28B8	; 0x8028b8 <COUNTDOWN_START>
    3bc4:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    3bc8:	81 11       	cpse	r24, r1
    3bca:	8f c0       	rjmp	.+286    	; 0x3cea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1316>
    3bcc:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <RST_BUTT>
    3bd0:	88 23       	and	r24, r24
    3bd2:	09 f4       	brne	.+2      	; 0x3bd6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1202>
    3bd4:	8a c0       	rjmp	.+276    	; 0x3cea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1316>
    3bd6:	cc 20       	and	r12, r12
    3bd8:	09 f4       	brne	.+2      	; 0x3bdc <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1208>
    3bda:	87 c0       	rjmp	.+270    	; 0x3cea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1316>
    3bdc:	0e 94 48 05 	call	0xa90	; 0xa90 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]>
    3be0:	60 91 29 29 	lds	r22, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
    3be4:	70 91 2a 29 	lds	r23, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
    3be8:	07 2e       	mov	r0, r23
    3bea:	00 0c       	add	r0, r0
    3bec:	88 0b       	sbc	r24, r24
    3bee:	99 0b       	sbc	r25, r25
    3bf0:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    3bf4:	60 93 34 2a 	sts	0x2A34, r22	; 0x802a34 <PID_SETPOINT>
    3bf8:	70 93 35 2a 	sts	0x2A35, r23	; 0x802a35 <PID_SETPOINT+0x1>
    3bfc:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <PID_SETPOINT+0x2>
    3c00:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <PID_SETPOINT+0x3>
DISPLAY_UPDATE():
    3c04:	8e e2       	ldi	r24, 0x2E	; 46
    3c06:	9b e2       	ldi	r25, 0x2B	; 43
    3c08:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
SET_LONG_PRESS_FUNCTION():
    3c0c:	d0 92 bd 28 	sts	0x28BD, r13	; 0x8028bd <EXECUTE_PID_LOOP>
    3c10:	0e 94 45 0a 	call	0x148a	; 0x148a <Bclass::PID_callingg() [clone .constprop.44]>
digitalWrite():
    3c14:	60 e0       	ldi	r22, 0x00	; 0
    3c16:	8a e1       	ldi	r24, 0x1A	; 26
    3c18:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    3c1c:	61 e0       	ldi	r22, 0x01	; 1
    3c1e:	8b e1       	ldi	r24, 0x1B	; 27
    3c20:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3c24:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    3c28:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    3c2c:	07 2e       	mov	r0, r23
    3c2e:	00 0c       	add	r0, r0
    3c30:	88 0b       	sbc	r24, r24
    3c32:	99 0b       	sbc	r25, r25
    3c34:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    3c38:	e0 92 de 28 	sts	0x28DE, r14	; 0x8028de <digits2>
    3c3c:	f0 92 df 28 	sts	0x28DF, r15	; 0x8028df <digits2+0x1>
    3c40:	d0 92 cb 28 	sts	0x28CB, r13	; 0x8028cb <DOT2_0>
    3c44:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    3c48:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <currentMillis1>
    3c4c:	90 91 ba 28 	lds	r25, 0x28BA	; 0x8028ba <currentMillis1+0x1>
    3c50:	9c 01       	movw	r18, r24
    3c52:	21 50       	subi	r18, 0x01	; 1
    3c54:	31 09       	sbc	r19, r1
digitalWrite():
    3c56:	61 e0       	ldi	r22, 0x01	; 1
SET_LONG_PRESS_FUNCTION():
    3c58:	23 36       	cpi	r18, 0x63	; 99
    3c5a:	31 05       	cpc	r19, r1
    3c5c:	38 f0       	brcs	.+14     	; 0x3c6c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1298>
    3c5e:	9c 01       	movw	r18, r24
    3c60:	24 56       	subi	r18, 0x64	; 100
    3c62:	31 09       	sbc	r19, r1
    3c64:	24 36       	cpi	r18, 0x64	; 100
    3c66:	31 05       	cpc	r19, r1
    3c68:	e8 f4       	brcc	.+58     	; 0x3ca4 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x12d0>
digitalWrite():
    3c6a:	60 e0       	ldi	r22, 0x00	; 0
    3c6c:	85 e1       	ldi	r24, 0x15	; 21
    3c6e:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3c72:	a0 90 cf 28 	lds	r10, 0x28CF	; 0x8028cf <i>
    3c76:	b0 90 d0 28 	lds	r11, 0x28D0	; 0x8028d0 <i+0x1>
    3c7a:	89 e1       	ldi	r24, 0x19	; 25
    3c7c:	a8 16       	cp	r10, r24
    3c7e:	b1 04       	cpc	r11, r1
    3c80:	cc f4       	brge	.+50     	; 0x3cb4 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x12e0>
DISPLAY_DIGIT1():
    3c82:	c0 93 d6 28 	sts	0x28D6, r28	; 0x8028d6 <digits1>
    3c86:	d0 93 d7 28 	sts	0x28D7, r29	; 0x8028d7 <digits1+0x1>
    3c8a:	c0 93 d8 28 	sts	0x28D8, r28	; 0x8028d8 <digits1+0x2>
    3c8e:	d0 93 d9 28 	sts	0x28D9, r29	; 0x8028d9 <digits1+0x3>
    3c92:	c0 93 da 28 	sts	0x28DA, r28	; 0x8028da <digits1+0x4>
    3c96:	d0 93 db 28 	sts	0x28DB, r29	; 0x8028db <digits1+0x5>
SET_LONG_PRESS_FUNCTION():
    3c9a:	00 93 dc 28 	sts	0x28DC, r16	; 0x8028dc <digits1+0x6>
    3c9e:	10 93 dd 28 	sts	0x28DD, r17	; 0x8028dd <digits1+0x7>
    3ca2:	8e cf       	rjmp	.-228    	; 0x3bc0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x11ec>
    3ca4:	89 3c       	cpi	r24, 0xC9	; 201
    3ca6:	91 05       	cpc	r25, r1
    3ca8:	24 f3       	brlt	.-56     	; 0x3c72 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x129e>
    3caa:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <currentMillis1>
    3cae:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <currentMillis1+0x1>
    3cb2:	df cf       	rjmp	.-66     	; 0x3c72 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x129e>
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e2       	ldi	r20, 0x20	; 32
    3cba:	51 e4       	ldi	r21, 0x41	; 65
    3cbc:	60 91 0e 28 	lds	r22, 0x280E	; 0x80280e <TEMP_DEG_RAW>
    3cc0:	70 91 0f 28 	lds	r23, 0x280F	; 0x80280f <TEMP_DEG_RAW+0x1>
    3cc4:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <TEMP_DEG_RAW+0x2>
    3cc8:	90 91 11 28 	lds	r25, 0x2811	; 0x802811 <TEMP_DEG_RAW+0x3>
    3ccc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    3cd0:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    3cd4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    3cd8:	83 e3       	ldi	r24, 0x33	; 51
    3cda:	a8 16       	cp	r10, r24
    3cdc:	b1 04       	cpc	r11, r1
    3cde:	ec f2       	brlt	.-70     	; 0x3c9a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x12c6>
    3ce0:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    3ce4:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    3ce8:	d8 cf       	rjmp	.-80     	; 0x3c9a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x12c6>
digitalWrite():
    3cea:	60 e0       	ldi	r22, 0x00	; 0
    3cec:	81 e2       	ldi	r24, 0x21	; 33
    3cee:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3cf2:	88 e0       	ldi	r24, 0x08	; 8
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	c1 10       	cpse	r12, r1
    3cf8:	50 cf       	rjmp	.-352    	; 0x3b9a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x11c6>
    3cfa:	8a e0       	ldi	r24, 0x0A	; 10
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <SELECTION_PARAMETER>
    3d02:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <SELECTION_PARAMETER+0x1>
    3d06:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    3d0a:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    3d0e:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    3d12:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3d16:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <DOT2_0>
    3d20:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    3d24:	60 91 2b 29 	lds	r22, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
    3d28:	70 91 2c 29 	lds	r23, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
    3d2c:	07 2e       	mov	r0, r23
    3d2e:	00 0c       	add	r0, r0
    3d30:	88 0b       	sbc	r24, r24
    3d32:	99 0b       	sbc	r25, r25
    3d34:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    3d38:	60 93 34 2a 	sts	0x2A34, r22	; 0x802a34 <PID_SETPOINT>
    3d3c:	70 93 35 2a 	sts	0x2A35, r23	; 0x802a35 <PID_SETPOINT+0x1>
    3d40:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <PID_SETPOINT+0x2>
    3d44:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <PID_SETPOINT+0x3>
digitalWrite():
    3d48:	61 e0       	ldi	r22, 0x01	; 1
    3d4a:	81 e2       	ldi	r24, 0x21	; 33
    3d4c:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3d50:	99 24       	eor	r9, r9
    3d52:	93 94       	inc	r9
DISPLAY_DIGIT1():
    3d54:	0e e1       	ldi	r16, 0x1E	; 30
    3d56:	10 e0       	ldi	r17, 0x00	; 0
    3d58:	3f e0       	ldi	r19, 0x0F	; 15
    3d5a:	e3 2e       	mov	r14, r19
    3d5c:	f1 2c       	mov	r15, r1
    3d5e:	4d e0       	ldi	r20, 0x0D	; 13
    3d60:	c4 2e       	mov	r12, r20
    3d62:	d1 2c       	mov	r13, r1
    3d64:	50 e1       	ldi	r21, 0x10	; 16
    3d66:	a5 2e       	mov	r10, r21
    3d68:	b1 2c       	mov	r11, r1
    3d6a:	c8 e1       	ldi	r28, 0x18	; 24
    3d6c:	d0 e0       	ldi	r29, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    3d6e:	20 91 34 2a 	lds	r18, 0x2A34	; 0x802a34 <PID_SETPOINT>
    3d72:	30 91 35 2a 	lds	r19, 0x2A35	; 0x802a35 <PID_SETPOINT+0x1>
    3d76:	40 91 36 2a 	lds	r20, 0x2A36	; 0x802a36 <PID_SETPOINT+0x2>
    3d7a:	50 91 37 2a 	lds	r21, 0x2A37	; 0x802a37 <PID_SETPOINT+0x3>
    3d7e:	60 91 3c 2a 	lds	r22, 0x2A3C	; 0x802a3c <PID_INPUT>
    3d82:	70 91 3d 2a 	lds	r23, 0x2A3D	; 0x802a3d <PID_INPUT+0x1>
    3d86:	80 91 3e 2a 	lds	r24, 0x2A3E	; 0x802a3e <PID_INPUT+0x2>
    3d8a:	90 91 3f 2a 	lds	r25, 0x2A3F	; 0x802a3f <PID_INPUT+0x3>
    3d8e:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    3d92:	87 ff       	sbrs	r24, 7
    3d94:	62 c0       	rjmp	.+196    	; 0x3e5a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1486>
    3d96:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <RST_BUTT>
    3d9a:	88 23       	and	r24, r24
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x13cc>
    3d9e:	5d c0       	rjmp	.+186    	; 0x3e5a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1486>
    3da0:	0e 94 48 05 	call	0xa90	; 0xa90 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]>
    3da4:	60 91 2b 29 	lds	r22, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
    3da8:	70 91 2c 29 	lds	r23, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
    3dac:	07 2e       	mov	r0, r23
    3dae:	00 0c       	add	r0, r0
    3db0:	88 0b       	sbc	r24, r24
    3db2:	99 0b       	sbc	r25, r25
    3db4:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    3db8:	60 93 34 2a 	sts	0x2A34, r22	; 0x802a34 <PID_SETPOINT>
    3dbc:	70 93 35 2a 	sts	0x2A35, r23	; 0x802a35 <PID_SETPOINT+0x1>
    3dc0:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <PID_SETPOINT+0x2>
    3dc4:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <PID_SETPOINT+0x3>
    3dc8:	90 92 bd 28 	sts	0x28BD, r9	; 0x8028bd <EXECUTE_PID_LOOP>
    3dcc:	0e 94 45 0a 	call	0x148a	; 0x148a <Bclass::PID_callingg() [clone .constprop.44]>
DISPLAY_UPDATE():
    3dd0:	8e e2       	ldi	r24, 0x2E	; 46
    3dd2:	9b e2       	ldi	r25, 0x2B	; 43
    3dd4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
digitalWrite():
    3dd8:	60 e0       	ldi	r22, 0x00	; 0
    3dda:	8b e1       	ldi	r24, 0x1B	; 27
    3ddc:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3de0:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    3de4:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    3de8:	89 31       	cpi	r24, 0x19	; 25
    3dea:	91 05       	cpc	r25, r1
    3dec:	fc f4       	brge	.+62     	; 0x3e2c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1458>
DISPLAY_DIGIT1():
    3dee:	c0 93 d6 28 	sts	0x28D6, r28	; 0x8028d6 <digits1>
    3df2:	d0 93 d7 28 	sts	0x28D7, r29	; 0x8028d7 <digits1+0x1>
    3df6:	c0 93 d8 28 	sts	0x28D8, r28	; 0x8028d8 <digits1+0x2>
    3dfa:	d0 93 d9 28 	sts	0x28D9, r29	; 0x8028d9 <digits1+0x3>
    3dfe:	c0 93 da 28 	sts	0x28DA, r28	; 0x8028da <digits1+0x4>
    3e02:	d0 93 db 28 	sts	0x28DB, r29	; 0x8028db <digits1+0x5>
    3e06:	c0 93 dc 28 	sts	0x28DC, r28	; 0x8028dc <digits1+0x6>
    3e0a:	d0 93 dd 28 	sts	0x28DD, r29	; 0x8028dd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    3e0e:	60 91 05 28 	lds	r22, 0x2805	; 0x802805 <HIGH_CAL_VALUE_SET>
    3e12:	70 91 06 28 	lds	r23, 0x2806	; 0x802806 <HIGH_CAL_VALUE_SET+0x1>
    3e16:	07 2e       	mov	r0, r23
    3e18:	00 0c       	add	r0, r0
    3e1a:	88 0b       	sbc	r24, r24
    3e1c:	99 0b       	sbc	r25, r25
    3e1e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    3e22:	00 93 de 28 	sts	0x28DE, r16	; 0x8028de <digits2>
    3e26:	10 93 df 28 	sts	0x28DF, r17	; 0x8028df <digits2+0x1>
    3e2a:	a1 cf       	rjmp	.-190    	; 0x3d6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x139a>
DISPLAY_DIGIT1():
    3e2c:	00 93 d6 28 	sts	0x28D6, r16	; 0x8028d6 <digits1>
    3e30:	10 93 d7 28 	sts	0x28D7, r17	; 0x8028d7 <digits1+0x1>
    3e34:	e0 92 d8 28 	sts	0x28D8, r14	; 0x8028d8 <digits1+0x2>
    3e38:	f0 92 d9 28 	sts	0x28D9, r15	; 0x8028d9 <digits1+0x3>
    3e3c:	c0 92 da 28 	sts	0x28DA, r12	; 0x8028da <digits1+0x4>
    3e40:	d0 92 db 28 	sts	0x28DB, r13	; 0x8028db <digits1+0x5>
    3e44:	a0 92 dc 28 	sts	0x28DC, r10	; 0x8028dc <digits1+0x6>
    3e48:	b0 92 dd 28 	sts	0x28DD, r11	; 0x8028dd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    3e4c:	c3 97       	sbiw	r24, 0x33	; 51
    3e4e:	fc f2       	brlt	.-66     	; 0x3e0e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x143a>
    3e50:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    3e54:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    3e58:	da cf       	rjmp	.-76     	; 0x3e0e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x143a>
digitalWrite():
    3e5a:	60 e0       	ldi	r22, 0x00	; 0
    3e5c:	81 e2       	ldi	r24, 0x21	; 33
    3e5e:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3e62:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <currentMillis1>
    3e66:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <currentMillis1+0x1>
    3e6a:	8e e1       	ldi	r24, 0x1E	; 30
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	80 93 bb 28 	sts	0x28BB, r24	; 0x8028bb <SET_MIN>
    3e72:	90 93 bc 28 	sts	0x28BC, r25	; 0x8028bc <SET_MIN+0x1>
    3e76:	89 ce       	rjmp	.-750    	; 0x3b8a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x11b6>
digitalWrite():
    3e78:	61 e0       	ldi	r22, 0x01	; 1
    3e7a:	81 e2       	ldi	r24, 0x21	; 33
    3e7c:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3e80:	dd 24       	eor	r13, r13
    3e82:	d3 94       	inc	r13
    3e84:	2e e1       	ldi	r18, 0x1E	; 30
    3e86:	e2 2e       	mov	r14, r18
    3e88:	f1 2c       	mov	r15, r1
DISPLAY_DIGIT1():
    3e8a:	c8 e1       	ldi	r28, 0x18	; 24
    3e8c:	d0 e0       	ldi	r29, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    3e8e:	0a e0       	ldi	r16, 0x0A	; 10
    3e90:	10 e0       	ldi	r17, 0x00	; 0
    3e92:	c0 90 b8 28 	lds	r12, 0x28B8	; 0x8028b8 <COUNTDOWN_START>
    3e96:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    3e9a:	81 11       	cpse	r24, r1
    3e9c:	8d c0       	rjmp	.+282    	; 0x3fb8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x15e4>
    3e9e:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <RST_BUTT>
    3ea2:	88 23       	and	r24, r24
    3ea4:	09 f4       	brne	.+2      	; 0x3ea8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x14d4>
    3ea6:	88 c0       	rjmp	.+272    	; 0x3fb8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x15e4>
    3ea8:	cc 20       	and	r12, r12
    3eaa:	09 f4       	brne	.+2      	; 0x3eae <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x14da>
    3eac:	85 c0       	rjmp	.+266    	; 0x3fb8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x15e4>
    3eae:	0e 94 48 05 	call	0xa90	; 0xa90 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]>
    3eb2:	60 91 2b 29 	lds	r22, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
    3eb6:	70 91 2c 29 	lds	r23, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
    3eba:	07 2e       	mov	r0, r23
    3ebc:	00 0c       	add	r0, r0
    3ebe:	88 0b       	sbc	r24, r24
    3ec0:	99 0b       	sbc	r25, r25
    3ec2:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    3ec6:	60 93 34 2a 	sts	0x2A34, r22	; 0x802a34 <PID_SETPOINT>
    3eca:	70 93 35 2a 	sts	0x2A35, r23	; 0x802a35 <PID_SETPOINT+0x1>
    3ece:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <PID_SETPOINT+0x2>
    3ed2:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <PID_SETPOINT+0x3>
    3ed6:	d0 92 bd 28 	sts	0x28BD, r13	; 0x8028bd <EXECUTE_PID_LOOP>
    3eda:	0e 94 45 0a 	call	0x148a	; 0x148a <Bclass::PID_callingg() [clone .constprop.44]>
DISPLAY_UPDATE():
    3ede:	8e e2       	ldi	r24, 0x2E	; 46
    3ee0:	9b e2       	ldi	r25, 0x2B	; 43
    3ee2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
digitalWrite():
    3ee6:	60 e0       	ldi	r22, 0x00	; 0
    3ee8:	8a e1       	ldi	r24, 0x1A	; 26
    3eea:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    3eee:	61 e0       	ldi	r22, 0x01	; 1
    3ef0:	8b e1       	ldi	r24, 0x1B	; 27
    3ef2:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3ef6:	60 91 05 28 	lds	r22, 0x2805	; 0x802805 <HIGH_CAL_VALUE_SET>
    3efa:	70 91 06 28 	lds	r23, 0x2806	; 0x802806 <HIGH_CAL_VALUE_SET+0x1>
    3efe:	07 2e       	mov	r0, r23
    3f00:	00 0c       	add	r0, r0
    3f02:	88 0b       	sbc	r24, r24
    3f04:	99 0b       	sbc	r25, r25
    3f06:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    3f0a:	e0 92 de 28 	sts	0x28DE, r14	; 0x8028de <digits2>
    3f0e:	f0 92 df 28 	sts	0x28DF, r15	; 0x8028df <digits2+0x1>
    3f12:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    3f16:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <currentMillis1>
    3f1a:	90 91 ba 28 	lds	r25, 0x28BA	; 0x8028ba <currentMillis1+0x1>
    3f1e:	9c 01       	movw	r18, r24
    3f20:	21 50       	subi	r18, 0x01	; 1
    3f22:	31 09       	sbc	r19, r1
digitalWrite():
    3f24:	61 e0       	ldi	r22, 0x01	; 1
SET_LONG_PRESS_FUNCTION():
    3f26:	23 36       	cpi	r18, 0x63	; 99
    3f28:	31 05       	cpc	r19, r1
    3f2a:	38 f0       	brcs	.+14     	; 0x3f3a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1566>
    3f2c:	9c 01       	movw	r18, r24
    3f2e:	24 56       	subi	r18, 0x64	; 100
    3f30:	31 09       	sbc	r19, r1
    3f32:	24 36       	cpi	r18, 0x64	; 100
    3f34:	31 05       	cpc	r19, r1
    3f36:	e8 f4       	brcc	.+58     	; 0x3f72 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x159e>
digitalWrite():
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	85 e1       	ldi	r24, 0x15	; 21
    3f3c:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3f40:	a0 90 cf 28 	lds	r10, 0x28CF	; 0x8028cf <i>
    3f44:	b0 90 d0 28 	lds	r11, 0x28D0	; 0x8028d0 <i+0x1>
    3f48:	89 e1       	ldi	r24, 0x19	; 25
    3f4a:	a8 16       	cp	r10, r24
    3f4c:	b1 04       	cpc	r11, r1
    3f4e:	cc f4       	brge	.+50     	; 0x3f82 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x15ae>
DISPLAY_DIGIT1():
    3f50:	c0 93 d6 28 	sts	0x28D6, r28	; 0x8028d6 <digits1>
    3f54:	d0 93 d7 28 	sts	0x28D7, r29	; 0x8028d7 <digits1+0x1>
    3f58:	c0 93 d8 28 	sts	0x28D8, r28	; 0x8028d8 <digits1+0x2>
    3f5c:	d0 93 d9 28 	sts	0x28D9, r29	; 0x8028d9 <digits1+0x3>
    3f60:	c0 93 da 28 	sts	0x28DA, r28	; 0x8028da <digits1+0x4>
    3f64:	d0 93 db 28 	sts	0x28DB, r29	; 0x8028db <digits1+0x5>
SET_LONG_PRESS_FUNCTION():
    3f68:	00 93 dc 28 	sts	0x28DC, r16	; 0x8028dc <digits1+0x6>
    3f6c:	10 93 dd 28 	sts	0x28DD, r17	; 0x8028dd <digits1+0x7>
    3f70:	90 cf       	rjmp	.-224    	; 0x3e92 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x14be>
    3f72:	89 3c       	cpi	r24, 0xC9	; 201
    3f74:	91 05       	cpc	r25, r1
    3f76:	24 f3       	brlt	.-56     	; 0x3f40 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x156c>
    3f78:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <currentMillis1>
    3f7c:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <currentMillis1+0x1>
    3f80:	df cf       	rjmp	.-66     	; 0x3f40 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x156c>
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	40 e2       	ldi	r20, 0x20	; 32
    3f88:	51 e4       	ldi	r21, 0x41	; 65
    3f8a:	60 91 0e 28 	lds	r22, 0x280E	; 0x80280e <TEMP_DEG_RAW>
    3f8e:	70 91 0f 28 	lds	r23, 0x280F	; 0x80280f <TEMP_DEG_RAW+0x1>
    3f92:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <TEMP_DEG_RAW+0x2>
    3f96:	90 91 11 28 	lds	r25, 0x2811	; 0x802811 <TEMP_DEG_RAW+0x3>
    3f9a:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    3f9e:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    3fa2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    3fa6:	83 e3       	ldi	r24, 0x33	; 51
    3fa8:	a8 16       	cp	r10, r24
    3faa:	b1 04       	cpc	r11, r1
    3fac:	ec f2       	brlt	.-70     	; 0x3f68 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1594>
    3fae:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    3fb2:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    3fb6:	d8 cf       	rjmp	.-80     	; 0x3f68 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1594>
digitalWrite():
    3fb8:	60 e0       	ldi	r22, 0x00	; 0
    3fba:	81 e2       	ldi	r24, 0x21	; 33
    3fbc:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    3fc0:	10 92 34 2a 	sts	0x2A34, r1	; 0x802a34 <PID_SETPOINT>
    3fc4:	10 92 35 2a 	sts	0x2A35, r1	; 0x802a35 <PID_SETPOINT+0x1>
    3fc8:	10 92 36 2a 	sts	0x2A36, r1	; 0x802a36 <PID_SETPOINT+0x2>
    3fcc:	10 92 37 2a 	sts	0x2A37, r1	; 0x802a37 <PID_SETPOINT+0x3>
    3fd0:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <EXECUTE_PID_LOOP>
    3fd4:	cc 20       	and	r12, r12
    3fd6:	19 f0       	breq	.+6      	; 0x3fde <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x160a>
    3fd8:	8a e0       	ldi	r24, 0x0A	; 10
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	de cd       	rjmp	.-1092   	; 0x3b9a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x11c6>
    3fde:	10 92 55 29 	sts	0x2955, r1	; 0x802955 <LONG_PRESS>
    3fe2:	91 ce       	rjmp	.-734    	; 0x3d06 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x1332>
    3fe4:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    3fe8:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    3fec:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    3ff0:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    3ff4:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <DOT2_0>
    3ff8:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    3ffc:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    4000:	88 3c       	cpi	r24, 0xC8	; 200
    4002:	91 05       	cpc	r25, r1
    4004:	6c f5       	brge	.+90     	; 0x4060 <__RODATA_PM_OFFSET__+0x60>
DISPLAY_DIGIT2():
    4006:	8a e0       	ldi	r24, 0x0A	; 10
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    400e:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    4012:	8d e0       	ldi	r24, 0x0D	; 13
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    401a:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    401e:	8a e1       	ldi	r24, 0x1A	; 26
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    4026:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    402a:	8e e0       	ldi	r24, 0x0E	; 14
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    4032:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    4036:	80 e2       	ldi	r24, 0x20	; 32
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    403e:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    4042:	87 e1       	ldi	r24, 0x17	; 23
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    404a:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    404e:	84 e1       	ldi	r24, 0x14	; 20
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    4056:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    405a:	83 e1       	ldi	r24, 0x13	; 19
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	45 cb       	rjmp	.-2422   	; 0x36ea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xd16>
SET_LONG_PRESS_FUNCTION():
    4060:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    4064:	10 92 55 29 	sts	0x2955, r1	; 0x802955 <LONG_PRESS>
    4068:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x122>
    406c:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    4070:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    4074:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    4078:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    407c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
DISPLAY_DIGIT2():
    4080:	8f e0       	ldi	r24, 0x0F	; 15
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    4088:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    408c:	24 e1       	ldi	r18, 0x14	; 20
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	20 93 e0 28 	sts	0x28E0, r18	; 0x8028e0 <digits2+0x2>
    4094:	30 93 e1 28 	sts	0x28E1, r19	; 0x8028e1 <digits2+0x3>
    4098:	21 e1       	ldi	r18, 0x11	; 17
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	20 93 e2 28 	sts	0x28E2, r18	; 0x8028e2 <digits2+0x4>
    40a0:	30 93 e3 28 	sts	0x28E3, r19	; 0x8028e3 <digits2+0x5>
    40a4:	2b e1       	ldi	r18, 0x1B	; 27
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <digits2+0x6>
    40ac:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    40b0:	22 e1       	ldi	r18, 0x12	; 18
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	20 93 d6 28 	sts	0x28D6, r18	; 0x8028d6 <digits1>
    40b8:	30 93 d7 28 	sts	0x28D7, r19	; 0x8028d7 <digits1+0x1>
    40bc:	27 e1       	ldi	r18, 0x17	; 23
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	20 93 d8 28 	sts	0x28D8, r18	; 0x8028d8 <digits1+0x2>
    40c4:	30 93 d9 28 	sts	0x28D9, r19	; 0x8028d9 <digits1+0x3>
    40c8:	20 e2       	ldi	r18, 0x20	; 32
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	20 93 da 28 	sts	0x28DA, r18	; 0x8028da <digits1+0x4>
    40d0:	30 93 db 28 	sts	0x28DB, r19	; 0x8028db <digits1+0x5>
    40d4:	0c c9       	rjmp	.-3560   	; 0x32ee <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x91a>
SET_LONG_PRESS_FUNCTION():
    40d6:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    40da:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    40de:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    40e2:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
stop():
    40e6:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    40ea:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    40ee:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    40f2:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    40f6:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    40fa:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    40fe:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
DISPLAY_DIGIT2():
    4102:	85 e1       	ldi	r24, 0x15	; 21
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    410a:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    410e:	8d e0       	ldi	r24, 0x0D	; 13
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    4116:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    411a:	8a e0       	ldi	r24, 0x0A	; 10
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    4122:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    4126:	80 e1       	ldi	r24, 0x10	; 16
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    412e:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    4132:	21 e1       	ldi	r18, 0x11	; 17
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	20 93 d6 28 	sts	0x28D6, r18	; 0x8028d6 <digits1>
    413a:	30 93 d7 28 	sts	0x28D7, r19	; 0x8028d7 <digits1+0x1>
    413e:	2f e0       	ldi	r18, 0x0F	; 15
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	20 93 d8 28 	sts	0x28D8, r18	; 0x8028d8 <digits1+0x2>
    4146:	30 93 d9 28 	sts	0x28D9, r19	; 0x8028d9 <digits1+0x3>
    414a:	2c e0       	ldi	r18, 0x0C	; 12
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	2c c9       	rjmp	.-3496   	; 0x33a8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0x9d4>
SET_LONG_PRESS_FUNCTION():
    4150:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    4154:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    4158:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
stop():
    415c:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    4160:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    4164:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    4168:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    416c:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    4170:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    4174:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
SET_LONG_PRESS_FUNCTION():
    4178:	88 ec       	ldi	r24, 0xC8	; 200
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    4180:	c8 2f       	mov	r28, r24
    4182:	89 ec       	ldi	r24, 0xC9	; 201
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    418a:	2c 2f       	mov	r18, r28
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	32 2f       	mov	r19, r18
    4190:	22 27       	eor	r18, r18
    4192:	82 0f       	add	r24, r18
    4194:	93 2f       	mov	r25, r19
    4196:	91 1d       	adc	r25, r1
    4198:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <SAFE_VALUE_SET>
    419c:	90 93 0c 29 	sts	0x290C, r25	; 0x80290c <SAFE_VALUE_SET+0x1>
DISPLAY_DIGIT2():
    41a0:	2c e0       	ldi	r18, 0x0C	; 12
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	20 93 de 28 	sts	0x28DE, r18	; 0x8028de <digits2>
    41a8:	30 93 df 28 	sts	0x28DF, r19	; 0x8028df <digits2+0x1>
    41ac:	2d e0       	ldi	r18, 0x0D	; 13
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	20 93 e0 28 	sts	0x28E0, r18	; 0x8028e0 <digits2+0x2>
    41b4:	30 93 e1 28 	sts	0x28E1, r19	; 0x8028e1 <digits2+0x3>
    41b8:	25 e1       	ldi	r18, 0x15	; 21
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	20 93 e2 28 	sts	0x28E2, r18	; 0x8028e2 <digits2+0x4>
    41c0:	30 93 e3 28 	sts	0x28E3, r19	; 0x8028e3 <digits2+0x5>
    41c4:	2f e0       	ldi	r18, 0x0F	; 15
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <digits2+0x6>
    41cc:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    41d0:	2a e0       	ldi	r18, 0x0A	; 10
    41d2:	28 9f       	mul	r18, r24
    41d4:	b0 01       	movw	r22, r0
    41d6:	29 9f       	mul	r18, r25
    41d8:	70 0d       	add	r23, r0
    41da:	11 24       	eor	r1, r1
    41dc:	07 2e       	mov	r0, r23
    41de:	00 0c       	add	r0, r0
    41e0:	88 0b       	sbc	r24, r24
    41e2:	99 0b       	sbc	r25, r25
    41e4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    41e8:	6d ca       	rjmp	.-2854   	; 0x36c4 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]+0xcf0>

000041ea <MODE_CLICK()>:
MODE_CLICK():
    41ea:	4f 92       	push	r4
    41ec:	5f 92       	push	r5
    41ee:	6f 92       	push	r6
    41f0:	7f 92       	push	r7
    41f2:	8f 92       	push	r8
    41f4:	9f 92       	push	r9
    41f6:	af 92       	push	r10
    41f8:	bf 92       	push	r11
    41fa:	cf 92       	push	r12
    41fc:	df 92       	push	r13
    41fe:	ef 92       	push	r14
    4200:	ff 92       	push	r15
    4202:	0f 93       	push	r16
    4204:	1f 93       	push	r17
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	00 d0       	rcall	.+0      	; 0x420c <MODE_CLICK()+0x22>
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
    4210:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
    4214:	81 11       	cpse	r24, r1
    4216:	4f c0       	rjmp	.+158    	; 0x42b6 <MODE_CLICK()+0xcc>
    4218:	10 92 ce 28 	sts	0x28CE, r1	; 0x8028ce <BLINK_STATS>
    421c:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <currentMillis1>
    4220:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <currentMillis1+0x1>
    4224:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
    4228:	81 11       	cpse	r24, r1
    422a:	58 c0       	rjmp	.+176    	; 0x42dc <MODE_CLICK()+0xf2>
    422c:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    4230:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    4234:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    4238:	81 30       	cpi	r24, 0x01	; 1
    423a:	51 f4       	brne	.+20     	; 0x4250 <MODE_CLICK()+0x66>
    423c:	20 91 10 29 	lds	r18, 0x2910	; 0x802910 <SET_VALUE+0x2>
    4240:	30 91 11 29 	lds	r19, 0x2911	; 0x802911 <SET_VALUE+0x3>
    4244:	23 2b       	or	r18, r19
    4246:	21 f4       	brne	.+8      	; 0x4250 <MODE_CLICK()+0x66>
    4248:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <Energy_Mode>
    424c:	99 23       	and	r25, r25
    424e:	19 f0       	breq	.+6      	; 0x4256 <MODE_CLICK()+0x6c>
    4250:	8f 5f       	subi	r24, 0xFF	; 255
    4252:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
    4256:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    425a:	82 30       	cpi	r24, 0x02	; 2
    425c:	19 f4       	brne	.+6      	; 0x4264 <MODE_CLICK()+0x7a>
    425e:	83 e0       	ldi	r24, 0x03	; 3
    4260:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
    4264:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    4268:	85 30       	cpi	r24, 0x05	; 5
    426a:	74 f0       	brlt	.+28     	; 0x4288 <MODE_CLICK()+0x9e>
    426c:	80 91 ac 28 	lds	r24, 0x28AC	; 0x8028ac <Inprocess_flag>
    4270:	81 11       	cpse	r24, r1
    4272:	0a c0       	rjmp	.+20     	; 0x4288 <MODE_CLICK()+0x9e>
    4274:	85 e0       	ldi	r24, 0x05	; 5
    4276:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
    427a:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <VENT_FLAG>
    427e:	88 23       	and	r24, r24
    4280:	09 f4       	brne	.+2      	; 0x4284 <MODE_CLICK()+0x9a>
    4282:	9c c2       	rjmp	.+1336   	; 0x47bc <MODE_CLICK()+0x5d2>
    4284:	10 92 0a 29 	sts	0x290A, r1	; 0x80290a <VENT_FLAG>
    4288:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    428c:	85 30       	cpi	r24, 0x05	; 5
    428e:	0c f4       	brge	.+2      	; 0x4292 <MODE_CLICK()+0xa8>
    4290:	99 c2       	rjmp	.+1330   	; 0x47c4 <MODE_CLICK()+0x5da>
    4292:	00 91 9b 28 	lds	r16, 0x289B	; 0x80289b <REP1>
    4296:	10 91 9c 28 	lds	r17, 0x289C	; 0x80289c <REP1+0x1>
    429a:	10 16       	cp	r1, r16
    429c:	11 06       	cpc	r1, r17
    429e:	0c f4       	brge	.+2      	; 0x42a2 <MODE_CLICK()+0xb8>
    42a0:	91 c2       	rjmp	.+1314   	; 0x47c4 <MODE_CLICK()+0x5da>
    42a2:	88 ee       	ldi	r24, 0xE8	; 232
    42a4:	93 e0       	ldi	r25, 0x03	; 3
    42a6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Bclass::BUZZ_INTERVAL(int) [clone .constprop.25]>
    42aa:	0f 5f       	subi	r16, 0xFF	; 255
    42ac:	1f 4f       	sbci	r17, 0xFF	; 255
    42ae:	00 93 9b 28 	sts	0x289B, r16	; 0x80289b <REP1>
    42b2:	10 93 9c 28 	sts	0x289C, r17	; 0x80289c <REP1+0x1>
    42b6:	0f 90       	pop	r0
    42b8:	0f 90       	pop	r0
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	ff 90       	pop	r15
    42c4:	ef 90       	pop	r14
    42c6:	df 90       	pop	r13
    42c8:	cf 90       	pop	r12
    42ca:	bf 90       	pop	r11
    42cc:	af 90       	pop	r10
    42ce:	9f 90       	pop	r9
    42d0:	8f 90       	pop	r8
    42d2:	7f 90       	pop	r7
    42d4:	6f 90       	pop	r6
    42d6:	5f 90       	pop	r5
    42d8:	4f 90       	pop	r4
    42da:	08 95       	ret
    42dc:	00 91 0a 28 	lds	r16, 0x280A	; 0x80280a <SELECTION_PARAMETER>
    42e0:	10 91 0b 28 	lds	r17, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
    42e4:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    42e8:	81 11       	cpse	r24, r1
    42ea:	ab c0       	rjmp	.+342    	; 0x4442 <MODE_CLICK()+0x258>
_ZN11EEPROMClass3getIbEERT_iS2_.isra.12():
    42ec:	19 82       	std	Y+1, r1	; 0x01
    42ee:	1a 82       	std	Y+2, r1	; 0x02
_ZNK5EERefcvhEv():
    42f0:	ce 01       	movw	r24, r28
    42f2:	01 96       	adiw	r24, 0x01	; 1
    42f4:	0e 94 11 13 	call	0x2622	; 0x2622 <EERef::operator*() const>
    42f8:	b8 2e       	mov	r11, r24
_ZN11EEPROMClass3getIbEERT_iS2_.isra.12():
    42fa:	80 93 c0 28 	sts	0x28C0, r24	; 0x8028c0 <TIME_SOCK_OR_TOTAL>
MODE_CLICK():
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	80 93 1d 29 	sts	0x291D, r24	; 0x80291d <SET_LONG_VALUE>
    4304:	90 93 1e 29 	sts	0x291E, r25	; 0x80291e <SET_LONG_VALUE+0x1>
    4308:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <AUTO_RESUM_SET>
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	80 93 1f 29 	sts	0x291F, r24	; 0x80291f <SET_LONG_VALUE+0x2>
    4312:	90 93 20 29 	sts	0x2920, r25	; 0x802920 <SET_LONG_VALUE+0x3>
    4316:	80 91 0d 29 	lds	r24, 0x290D	; 0x80290d <SAFE_VALUE_SET_DEG>
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	80 93 21 29 	sts	0x2921, r24	; 0x802921 <SET_LONG_VALUE+0x4>
    4320:	90 93 22 29 	sts	0x2922, r25	; 0x802922 <SET_LONG_VALUE+0x5>
    4324:	80 91 0b 29 	lds	r24, 0x290B	; 0x80290b <SAFE_VALUE_SET>
    4328:	90 91 0c 29 	lds	r25, 0x290C	; 0x80290c <SAFE_VALUE_SET+0x1>
    432c:	80 93 3f 29 	sts	0x293F, r24	; 0x80293f <SET_LONG_VALUE+0x22>
    4330:	90 93 40 29 	sts	0x2940, r25	; 0x802940 <SET_LONG_VALUE+0x23>
    4334:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	80 93 37 29 	sts	0x2937, r24	; 0x802937 <SET_LONG_VALUE+0x1a>
    433e:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <SET_LONG_VALUE+0x1b>
    4342:	80 91 f6 28 	lds	r24, 0x28F6	; 0x8028f6 <CAL_SELECT_VALUE>
    4346:	90 91 f7 28 	lds	r25, 0x28F7	; 0x8028f7 <CAL_SELECT_VALUE+0x1>
    434a:	80 93 23 29 	sts	0x2923, r24	; 0x802923 <SET_LONG_VALUE+0x6>
    434e:	90 93 24 29 	sts	0x2924, r25	; 0x802924 <SET_LONG_VALUE+0x7>
    4352:	c0 90 0e 28 	lds	r12, 0x280E	; 0x80280e <TEMP_DEG_RAW>
    4356:	d0 90 0f 28 	lds	r13, 0x280F	; 0x80280f <TEMP_DEG_RAW+0x1>
    435a:	e0 90 10 28 	lds	r14, 0x2810	; 0x802810 <TEMP_DEG_RAW+0x2>
    435e:	f0 90 11 28 	lds	r15, 0x2811	; 0x802811 <TEMP_DEG_RAW+0x3>
    4362:	c7 01       	movw	r24, r14
    4364:	b6 01       	movw	r22, r12
    4366:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    436a:	2b 01       	movw	r4, r22
    436c:	60 93 25 29 	sts	0x2925, r22	; 0x802925 <SET_LONG_VALUE+0x8>
    4370:	70 93 26 29 	sts	0x2926, r23	; 0x802926 <SET_LONG_VALUE+0x9>
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e2       	ldi	r20, 0x20	; 32
    437a:	51 e4       	ldi	r21, 0x41	; 65
    437c:	c7 01       	movw	r24, r14
    437e:	b6 01       	movw	r22, r12
    4380:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    4384:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    4388:	60 93 3e 28 	sts	0x283E, r22	; 0x80283e <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_DEG>
    438c:	70 93 3f 28 	sts	0x283F, r23	; 0x80283f <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_DEG+0x1>
    4390:	20 91 07 28 	lds	r18, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    4394:	30 91 08 28 	lds	r19, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    4398:	20 93 29 29 	sts	0x2929, r18	; 0x802929 <SET_LONG_VALUE+0xc>
    439c:	30 93 2a 29 	sts	0x292A, r19	; 0x80292a <SET_LONG_VALUE+0xd>
    43a0:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <HIGH_CAL_VALUE_SET>
    43a4:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <HIGH_CAL_VALUE_SET+0x1>
    43a8:	20 93 2b 29 	sts	0x292B, r18	; 0x80292b <SET_LONG_VALUE+0xe>
    43ac:	30 93 2c 29 	sts	0x292C, r19	; 0x80292c <SET_LONG_VALUE+0xf>
    43b0:	40 92 2d 29 	sts	0x292D, r4	; 0x80292d <SET_LONG_VALUE+0x10>
    43b4:	50 92 2e 29 	sts	0x292E, r5	; 0x80292e <SET_LONG_VALUE+0x11>
    43b8:	cb 01       	movw	r24, r22
    43ba:	6a e0       	ldi	r22, 0x0A	; 10
    43bc:	70 e0       	ldi	r23, 0x00	; 0
    43be:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <__divmodhi4>
    43c2:	80 93 2f 29 	sts	0x292F, r24	; 0x80292f <SET_LONG_VALUE+0x12>
    43c6:	90 93 30 29 	sts	0x2930, r25	; 0x802930 <SET_LONG_VALUE+0x13>
    43ca:	09 30       	cpi	r16, 0x09	; 9
    43cc:	11 05       	cpc	r17, r1
    43ce:	09 f5       	brne	.+66     	; 0x4412 <MODE_CLICK()+0x228>
    43d0:	c0 92 3a 28 	sts	0x283A, r12	; 0x80283a <TEMP_CAL2_RAW_LOW_VALUE>
    43d4:	d0 92 3b 28 	sts	0x283B, r13	; 0x80283b <TEMP_CAL2_RAW_LOW_VALUE+0x1>
    43d8:	e0 92 3c 28 	sts	0x283C, r14	; 0x80283c <TEMP_CAL2_RAW_LOW_VALUE+0x2>
    43dc:	f0 92 3d 28 	sts	0x283D, r15	; 0x80283d <TEMP_CAL2_RAW_LOW_VALUE+0x3>
    43e0:	40 92 31 29 	sts	0x2931, r4	; 0x802931 <SET_LONG_VALUE+0x14>
    43e4:	50 92 32 29 	sts	0x2932, r5	; 0x802932 <SET_LONG_VALUE+0x15>
    43e8:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <SET_LONG_VALUE+0x16>
    43ec:	90 93 34 29 	sts	0x2934, r25	; 0x802934 <SET_LONG_VALUE+0x17>
    43f0:	01 31       	cpi	r16, 0x11	; 17
    43f2:	11 05       	cpc	r17, r1
    43f4:	d1 f4       	brne	.+52     	; 0x442a <MODE_CLICK()+0x240>
    43f6:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <currentMillis>
    43fa:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <currentMillis+0x1>
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    4404:	8a e1       	ldi	r24, 0x1A	; 26
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    440c:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    4410:	29 cf       	rjmp	.-430    	; 0x4264 <MODE_CLICK()+0x7a>
    4412:	0b 30       	cpi	r16, 0x0B	; 11
    4414:	11 05       	cpc	r17, r1
    4416:	21 f7       	brne	.-56     	; 0x43e0 <MODE_CLICK()+0x1f6>
    4418:	c0 92 36 28 	sts	0x2836, r12	; 0x802836 <TEMP_CAL2_RAW_HIGH_VALUE>
    441c:	d0 92 37 28 	sts	0x2837, r13	; 0x802837 <TEMP_CAL2_RAW_HIGH_VALUE+0x1>
    4420:	e0 92 38 28 	sts	0x2838, r14	; 0x802838 <TEMP_CAL2_RAW_HIGH_VALUE+0x2>
    4424:	f0 92 39 28 	sts	0x2839, r15	; 0x802839 <TEMP_CAL2_RAW_HIGH_VALUE+0x3>
    4428:	db cf       	rjmp	.-74     	; 0x43e0 <MODE_CLICK()+0x1f6>
    442a:	b1 10       	cpse	r11, r1
    442c:	e8 cf       	rjmp	.-48     	; 0x43fe <MODE_CLICK()+0x214>
    442e:	05 30       	cpi	r16, 0x05	; 5
    4430:	11 05       	cpc	r17, r1
    4432:	29 f7       	brne	.-54     	; 0x43fe <MODE_CLICK()+0x214>
    4434:	84 e0       	ldi	r24, 0x04	; 4
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <SELECTION_PARAMETER>
    443c:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <SELECTION_PARAMETER+0x1>
    4440:	de cf       	rjmp	.-68     	; 0x43fe <MODE_CLICK()+0x214>
    4442:	02 31       	cpi	r16, 0x12	; 18
    4444:	11 05       	cpc	r17, r1
    4446:	08 f0       	brcs	.+2      	; 0x444a <MODE_CLICK()+0x260>
    4448:	4b c0       	rjmp	.+150    	; 0x44e0 <MODE_CLICK()+0x2f6>
    444a:	f8 01       	movw	r30, r16
    444c:	e6 5d       	subi	r30, 0xD6	; 214
    444e:	fd 4d       	sbci	r31, 0xDD	; 221
    4450:	0c 94 ad 3b 	jmp	0x775a	; 0x775a <__tablejump2__>
    4454:	3c 22       	and	r3, r28
    4456:	4b 22       	and	r4, r27
    4458:	91 22       	and	r9, r17
    445a:	ab 22       	and	r10, r27
    445c:	b6 22       	and	r11, r22
    445e:	70 22       	and	r7, r16
    4460:	0b 23       	and	r16, r27
    4462:	14 23       	and	r17, r20
    4464:	70 22       	and	r7, r16
    4466:	2d 23       	and	r18, r29
    4468:	3e 23       	and	r19, r30
    446a:	70 22       	and	r7, r16
    446c:	70 22       	and	r7, r16
    446e:	9e 22       	and	r9, r30
    4470:	70 22       	and	r7, r16
    4472:	70 22       	and	r7, r16
    4474:	70 22       	and	r7, r16
    4476:	b7 23       	and	r27, r23
    4478:	61 e0       	ldi	r22, 0x01	; 1
    447a:	80 91 1d 29 	lds	r24, 0x291D	; 0x80291d <SET_LONG_VALUE>
    447e:	90 91 1e 29 	lds	r25, 0x291E	; 0x80291e <SET_LONG_VALUE+0x1>
    4482:	89 2b       	or	r24, r25
    4484:	09 f4       	brne	.+2      	; 0x4488 <MODE_CLICK()+0x29e>
    4486:	60 e0       	ldi	r22, 0x00	; 0
    4488:	60 93 c0 28 	sts	0x28C0, r22	; 0x8028c0 <TIME_SOCK_OR_TOTAL>
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    4494:	25 c0       	rjmp	.+74     	; 0x44e0 <MODE_CLICK()+0x2f6>
    4496:	00 91 1f 29 	lds	r16, 0x291F	; 0x80291f <SET_LONG_VALUE+0x2>
    449a:	10 91 20 29 	lds	r17, 0x2920	; 0x802920 <SET_LONG_VALUE+0x3>
    449e:	61 e0       	ldi	r22, 0x01	; 1
    44a0:	01 15       	cp	r16, r1
    44a2:	11 05       	cpc	r17, r1
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <MODE_CLICK()+0x2be>
    44a6:	60 e0       	ldi	r22, 0x00	; 0
    44a8:	60 93 bf 28 	sts	0x28BF, r22	; 0x8028bf <AUTO_RESUM_SET>
    44ac:	87 e3       	ldi	r24, 0x37	; 55
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    44b4:	01 2b       	or	r16, r17
    44b6:	a1 f4       	brne	.+40     	; 0x44e0 <MODE_CLICK()+0x2f6>
    44b8:	10 92 58 28 	sts	0x2858, r1	; 0x802858 <RESUME_TIME>
    44bc:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <RESUME_TIME+0x1>
    44c0:	10 92 5a 28 	sts	0x285A, r1	; 0x80285a <RESUME_TEMP>
    44c4:	10 92 5b 28 	sts	0x285B, r1	; 0x80285b <RESUME_TEMP+0x1>
    44c8:	68 e5       	ldi	r22, 0x58	; 88
    44ca:	78 e2       	ldi	r23, 0x28	; 40
    44cc:	82 e3       	ldi	r24, 0x32	; 50
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]>
    44d4:	6a e5       	ldi	r22, 0x5A	; 90
    44d6:	78 e2       	ldi	r23, 0x28	; 40
    44d8:	8c e3       	ldi	r24, 0x3C	; 60
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]>
    44e0:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <SELECTION_PARAMETER>
    44e4:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
    44e8:	88 30       	cpi	r24, 0x08	; 8
    44ea:	91 05       	cpc	r25, r1
    44ec:	09 f0       	breq	.+2      	; 0x44f0 <MODE_CLICK()+0x306>
    44ee:	4f c1       	rjmp	.+670    	; 0x478e <MODE_CLICK()+0x5a4>
    44f0:	89 e0       	ldi	r24, 0x09	; 9
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <SELECTION_PARAMETER>
    44f8:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <SELECTION_PARAMETER+0x1>
    44fc:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <SELECTION_PARAMETER>
    4500:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <SELECTION_PARAMETER+0x1>
    4504:	9c 01       	movw	r18, r24
    4506:	27 7f       	andi	r18, 0xF7	; 247
    4508:	26 30       	cpi	r18, 0x06	; 6
    450a:	31 05       	cpc	r19, r1
    450c:	09 f0       	breq	.+2      	; 0x4510 <MODE_CLICK()+0x326>
    450e:	45 c1       	rjmp	.+650    	; 0x479a <MODE_CLICK()+0x5b0>
    4510:	21 e0       	ldi	r18, 0x01	; 1
    4512:	20 93 d5 28 	sts	0x28D5, r18	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    4516:	01 96       	adiw	r24, 0x01	; 1
    4518:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <SELECTION_PARAMETER>
    451c:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <SELECTION_PARAMETER+0x1>
    4520:	71 cf       	rjmp	.-286    	; 0x4404 <MODE_CLICK()+0x21a>
    4522:	61 e0       	ldi	r22, 0x01	; 1
    4524:	80 91 21 29 	lds	r24, 0x2921	; 0x802921 <SET_LONG_VALUE+0x4>
    4528:	90 91 22 29 	lds	r25, 0x2922	; 0x802922 <SET_LONG_VALUE+0x5>
    452c:	89 2b       	or	r24, r25
    452e:	09 f4       	brne	.+2      	; 0x4532 <MODE_CLICK()+0x348>
    4530:	60 e0       	ldi	r22, 0x00	; 0
    4532:	60 93 0d 29 	sts	0x290D, r22	; 0x80290d <SAFE_VALUE_SET_DEG>
    4536:	82 e0       	ldi	r24, 0x02	; 2
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	aa cf       	rjmp	.-172    	; 0x4490 <MODE_CLICK()+0x2a6>
    453c:	61 e0       	ldi	r22, 0x01	; 1
    453e:	80 91 37 29 	lds	r24, 0x2937	; 0x802937 <SET_LONG_VALUE+0x1a>
    4542:	90 91 38 29 	lds	r25, 0x2938	; 0x802938 <SET_LONG_VALUE+0x1b>
    4546:	89 2b       	or	r24, r25
    4548:	09 f4       	brne	.+2      	; 0x454c <MODE_CLICK()+0x362>
    454a:	60 e0       	ldi	r22, 0x00	; 0
    454c:	60 93 09 28 	sts	0x2809, r22	; 0x802809 <Energy_Mode>
    4550:	8f e0       	ldi	r24, 0x0F	; 15
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	9d cf       	rjmp	.-198    	; 0x4490 <MODE_CLICK()+0x2a6>
    4556:	60 91 23 29 	lds	r22, 0x2923	; 0x802923 <SET_LONG_VALUE+0x6>
    455a:	80 91 24 29 	lds	r24, 0x2924	; 0x802924 <SET_LONG_VALUE+0x7>
    455e:	60 93 f6 28 	sts	0x28F6, r22	; 0x8028f6 <CAL_SELECT_VALUE>
    4562:	80 93 f7 28 	sts	0x28F7, r24	; 0x8028f7 <CAL_SELECT_VALUE+0x1>
    4566:	85 e0       	ldi	r24, 0x05	; 5
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	92 cf       	rjmp	.-220    	; 0x4490 <MODE_CLICK()+0x2a6>
    456c:	20 91 25 29 	lds	r18, 0x2925	; 0x802925 <SET_LONG_VALUE+0x8>
    4570:	30 91 26 29 	lds	r19, 0x2926	; 0x802926 <SET_LONG_VALUE+0x9>
    4574:	4a e0       	ldi	r20, 0x0A	; 10
    4576:	42 9f       	mul	r20, r18
    4578:	c0 01       	movw	r24, r0
    457a:	43 9f       	mul	r20, r19
    457c:	90 0d       	add	r25, r0
    457e:	11 24       	eor	r1, r1
    4580:	20 91 3e 28 	lds	r18, 0x283E	; 0x80283e <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_DEG>
    4584:	30 91 3f 28 	lds	r19, 0x283F	; 0x80283f <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_DEG+0x1>
    4588:	82 1b       	sub	r24, r18
    458a:	93 0b       	sbc	r25, r19
    458c:	6a e0       	ldi	r22, 0x0A	; 10
    458e:	70 e0       	ldi	r23, 0x00	; 0
    4590:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <__divmodhi4>
    4594:	07 2e       	mov	r0, r23
    4596:	00 0c       	add	r0, r0
    4598:	88 0b       	sbc	r24, r24
    459a:	99 0b       	sbc	r25, r25
    459c:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    45a0:	4b 01       	movw	r8, r22
    45a2:	5c 01       	movw	r10, r24
    45a4:	80 92 f9 28 	sts	0x28F9, r8	; 0x8028f9 <ERROR_CAL>
    45a8:	90 92 fa 28 	sts	0x28FA, r9	; 0x8028fa <ERROR_CAL+0x1>
    45ac:	a0 92 fb 28 	sts	0x28FB, r10	; 0x8028fb <ERROR_CAL+0x2>
    45b0:	b0 92 fc 28 	sts	0x28FC, r11	; 0x8028fc <ERROR_CAL+0x3>
    45b4:	11 e0       	ldi	r17, 0x01	; 1
    45b6:	10 93 f8 28 	sts	0x28F8, r17	; 0x8028f8 <ERROR_SET_IN_DEG_FLAG>
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	40 e2       	ldi	r20, 0x20	; 32
    45c0:	51 e4       	ldi	r21, 0x41	; 65
    45c2:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    45c6:	6b 01       	movw	r12, r22
    45c8:	7c 01       	movw	r14, r24
    45ca:	20 e0       	ldi	r18, 0x00	; 0
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	a9 01       	movw	r20, r18
    45d0:	c5 01       	movw	r24, r10
    45d2:	b4 01       	movw	r22, r8
    45d4:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    45d8:	87 ff       	sbrs	r24, 7
    45da:	1a c0       	rjmp	.+52     	; 0x4610 <MODE_CLICK()+0x426>
    45dc:	10 93 fd 28 	sts	0x28FD, r17	; 0x8028fd <SIGN>
    45e0:	f7 fa       	bst	r15, 7
    45e2:	f0 94       	com	r15
    45e4:	f7 f8       	bld	r15, 7
    45e6:	f0 94       	com	r15
    45e8:	c0 92 06 29 	sts	0x2906, r12	; 0x802906 <ERROR_CAL1>
    45ec:	d0 92 07 29 	sts	0x2907, r13	; 0x802907 <ERROR_CAL1+0x1>
    45f0:	e0 92 08 29 	sts	0x2908, r14	; 0x802908 <ERROR_CAL1+0x2>
    45f4:	f0 92 09 29 	sts	0x2909, r15	; 0x802909 <ERROR_CAL1+0x3>
    45f8:	0e 94 b2 13 	call	0x2764	; 0x2764 <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.17] [clone .constprop.28]>
    45fc:	60 91 fd 28 	lds	r22, 0x28FD	; 0x8028fd <SIGN>
    4600:	87 e0       	ldi	r24, 0x07	; 7
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    4608:	61 e0       	ldi	r22, 0x01	; 1
    460a:	88 e0       	ldi	r24, 0x08	; 8
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	40 cf       	rjmp	.-384    	; 0x4490 <MODE_CLICK()+0x2a6>
    4610:	10 92 fd 28 	sts	0x28FD, r1	; 0x8028fd <SIGN>
    4614:	e9 cf       	rjmp	.-46     	; 0x45e8 <MODE_CLICK()+0x3fe>
    4616:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
    461a:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
    461e:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <LOW_CAL_VALUE_SET>
    4622:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    4626:	5c cf       	rjmp	.-328    	; 0x44e0 <MODE_CLICK()+0x2f6>
    4628:	80 91 2b 29 	lds	r24, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
    462c:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
    4630:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <HIGH_CAL_VALUE_SET>
    4634:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <HIGH_CAL_VALUE_SET+0x1>
    4638:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <TEMP_DEG_RAW>
    463c:	90 91 0f 28 	lds	r25, 0x280F	; 0x80280f <TEMP_DEG_RAW+0x1>
    4640:	a0 91 10 28 	lds	r26, 0x2810	; 0x802810 <TEMP_DEG_RAW+0x2>
    4644:	b0 91 11 28 	lds	r27, 0x2811	; 0x802811 <TEMP_DEG_RAW+0x3>
    4648:	80 93 3a 28 	sts	0x283A, r24	; 0x80283a <TEMP_CAL2_RAW_LOW_VALUE>
    464c:	90 93 3b 28 	sts	0x283B, r25	; 0x80283b <TEMP_CAL2_RAW_LOW_VALUE+0x1>
    4650:	a0 93 3c 28 	sts	0x283C, r26	; 0x80283c <TEMP_CAL2_RAW_LOW_VALUE+0x2>
    4654:	b0 93 3d 28 	sts	0x283D, r27	; 0x80283d <TEMP_CAL2_RAW_LOW_VALUE+0x3>
    4658:	43 cf       	rjmp	.-378    	; 0x44e0 <MODE_CLICK()+0x2f6>
    465a:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <TEMP_DEG_RAW>
    465e:	90 91 0f 28 	lds	r25, 0x280F	; 0x80280f <TEMP_DEG_RAW+0x1>
    4662:	a0 91 10 28 	lds	r26, 0x2810	; 0x802810 <TEMP_DEG_RAW+0x2>
    4666:	b0 91 11 28 	lds	r27, 0x2811	; 0x802811 <TEMP_DEG_RAW+0x3>
    466a:	80 93 36 28 	sts	0x2836, r24	; 0x802836 <TEMP_CAL2_RAW_HIGH_VALUE>
    466e:	90 93 37 28 	sts	0x2837, r25	; 0x802837 <TEMP_CAL2_RAW_HIGH_VALUE+0x1>
    4672:	a0 93 38 28 	sts	0x2838, r26	; 0x802838 <TEMP_CAL2_RAW_HIGH_VALUE+0x2>
    4676:	b0 93 39 28 	sts	0x2839, r27	; 0x802839 <TEMP_CAL2_RAW_HIGH_VALUE+0x3>
    467a:	32 cf       	rjmp	.-412    	; 0x44e0 <MODE_CLICK()+0x2f6>
    467c:	20 e0       	ldi	r18, 0x00	; 0
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	40 e2       	ldi	r20, 0x20	; 32
    4682:	51 e4       	ldi	r21, 0x41	; 65
    4684:	60 91 3a 28 	lds	r22, 0x283A	; 0x80283a <TEMP_CAL2_RAW_LOW_VALUE>
    4688:	70 91 3b 28 	lds	r23, 0x283B	; 0x80283b <TEMP_CAL2_RAW_LOW_VALUE+0x1>
    468c:	80 91 3c 28 	lds	r24, 0x283C	; 0x80283c <TEMP_CAL2_RAW_LOW_VALUE+0x2>
    4690:	90 91 3d 28 	lds	r25, 0x283D	; 0x80283d <TEMP_CAL2_RAW_LOW_VALUE+0x3>
    4694:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    4698:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    469c:	60 93 f2 28 	sts	0x28F2, r22	; 0x8028f2 <CAL2_RAW_LOW_VALUE_CONV>
    46a0:	70 93 f3 28 	sts	0x28F3, r23	; 0x8028f3 <CAL2_RAW_LOW_VALUE_CONV+0x1>
    46a4:	80 93 f4 28 	sts	0x28F4, r24	; 0x8028f4 <CAL2_RAW_LOW_VALUE_CONV+0x2>
    46a8:	90 93 f5 28 	sts	0x28F5, r25	; 0x8028f5 <CAL2_RAW_LOW_VALUE_CONV+0x3>
    46ac:	20 e0       	ldi	r18, 0x00	; 0
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	40 e2       	ldi	r20, 0x20	; 32
    46b2:	51 e4       	ldi	r21, 0x41	; 65
    46b4:	60 91 36 28 	lds	r22, 0x2836	; 0x802836 <TEMP_CAL2_RAW_HIGH_VALUE>
    46b8:	70 91 37 28 	lds	r23, 0x2837	; 0x802837 <TEMP_CAL2_RAW_HIGH_VALUE+0x1>
    46bc:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <TEMP_CAL2_RAW_HIGH_VALUE+0x2>
    46c0:	90 91 39 28 	lds	r25, 0x2839	; 0x802839 <TEMP_CAL2_RAW_HIGH_VALUE+0x3>
    46c4:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    46c8:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    46cc:	60 93 ee 28 	sts	0x28EE, r22	; 0x8028ee <CAL2_RAW_HIGH_VALUE_CONV>
    46d0:	70 93 ef 28 	sts	0x28EF, r23	; 0x8028ef <CAL2_RAW_HIGH_VALUE_CONV+0x1>
    46d4:	80 93 f0 28 	sts	0x28F0, r24	; 0x8028f0 <CAL2_RAW_HIGH_VALUE_CONV+0x2>
    46d8:	90 93 f1 28 	sts	0x28F1, r25	; 0x8028f1 <CAL2_RAW_HIGH_VALUE_CONV+0x3>
    46dc:	62 ef       	ldi	r22, 0xF2	; 242
    46de:	78 e2       	ldi	r23, 0x28	; 40
    46e0:	80 e5       	ldi	r24, 0x50	; 80
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	0e 94 b8 14 	call	0x2970	; 0x2970 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]>
    46e8:	6e ee       	ldi	r22, 0xEE	; 238
    46ea:	78 e2       	ldi	r23, 0x28	; 40
    46ec:	8a e5       	ldi	r24, 0x5A	; 90
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	0e 94 b8 14 	call	0x2970	; 0x2970 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]>
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	40 e2       	ldi	r20, 0x20	; 32
    46fa:	51 e4       	ldi	r21, 0x41	; 65
    46fc:	60 91 c7 28 	lds	r22, 0x28C7	; 0x8028c7 <CAL2_CALCULATED_LOW_CAL_VALUE>
    4700:	70 91 c8 28 	lds	r23, 0x28C8	; 0x8028c8 <CAL2_CALCULATED_LOW_CAL_VALUE+0x1>
    4704:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <CAL2_CALCULATED_LOW_CAL_VALUE+0x2>
    4708:	90 91 ca 28 	lds	r25, 0x28CA	; 0x8028ca <CAL2_CALCULATED_LOW_CAL_VALUE+0x3>
    470c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    4710:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    4714:	60 93 ea 28 	sts	0x28EA, r22	; 0x8028ea <MASTER_LOW_CONV>
    4718:	70 93 eb 28 	sts	0x28EB, r23	; 0x8028eb <MASTER_LOW_CONV+0x1>
    471c:	80 93 ec 28 	sts	0x28EC, r24	; 0x8028ec <MASTER_LOW_CONV+0x2>
    4720:	90 93 ed 28 	sts	0x28ED, r25	; 0x8028ed <MASTER_LOW_CONV+0x3>
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	40 e2       	ldi	r20, 0x20	; 32
    472a:	51 e4       	ldi	r21, 0x41	; 65
    472c:	60 91 c3 28 	lds	r22, 0x28C3	; 0x8028c3 <CAL2_CALCULATED_HIGH_CAL_VALUE>
    4730:	70 91 c4 28 	lds	r23, 0x28C4	; 0x8028c4 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x1>
    4734:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x2>
    4738:	90 91 c6 28 	lds	r25, 0x28C6	; 0x8028c6 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x3>
    473c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    4740:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    4744:	60 93 e6 28 	sts	0x28E6, r22	; 0x8028e6 <MASTER_HIGH_CONV>
    4748:	70 93 e7 28 	sts	0x28E7, r23	; 0x8028e7 <MASTER_HIGH_CONV+0x1>
    474c:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <MASTER_HIGH_CONV+0x2>
    4750:	90 93 e9 28 	sts	0x28E9, r25	; 0x8028e9 <MASTER_HIGH_CONV+0x3>
    4754:	6a ee       	ldi	r22, 0xEA	; 234
    4756:	78 e2       	ldi	r23, 0x28	; 40
    4758:	84 e6       	ldi	r24, 0x64	; 100
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	0e 94 b8 14 	call	0x2970	; 0x2970 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]>
    4760:	66 ee       	ldi	r22, 0xE6	; 230
    4762:	78 e2       	ldi	r23, 0x28	; 40
    4764:	8e e6       	ldi	r24, 0x6E	; 110
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	0e 94 b8 14 	call	0x2970	; 0x2970 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.18]>
    476c:	b9 ce       	rjmp	.-654    	; 0x44e0 <MODE_CLICK()+0x2f6>
    476e:	10 91 3f 29 	lds	r17, 0x293F	; 0x80293f <SET_LONG_VALUE+0x22>
    4772:	60 91 40 29 	lds	r22, 0x2940	; 0x802940 <SET_LONG_VALUE+0x23>
    4776:	10 93 0b 29 	sts	0x290B, r17	; 0x80290b <SAFE_VALUE_SET>
    477a:	60 93 0c 29 	sts	0x290C, r22	; 0x80290c <SAFE_VALUE_SET+0x1>
    477e:	88 ec       	ldi	r24, 0xC8	; 200
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    4786:	61 2f       	mov	r22, r17
    4788:	89 ec       	ldi	r24, 0xC9	; 201
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	81 ce       	rjmp	.-766    	; 0x4490 <MODE_CLICK()+0x2a6>
    478e:	0a 97       	sbiw	r24, 0x0a	; 10
    4790:	09 f0       	breq	.+2      	; 0x4794 <MODE_CLICK()+0x5aa>
    4792:	b4 ce       	rjmp	.-664    	; 0x44fc <MODE_CLICK()+0x312>
    4794:	8b e0       	ldi	r24, 0x0B	; 11
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	ad ce       	rjmp	.-678    	; 0x44f4 <MODE_CLICK()+0x30a>
    479a:	84 30       	cpi	r24, 0x04	; 4
    479c:	91 05       	cpc	r25, r1
    479e:	41 f0       	breq	.+16     	; 0x47b0 <MODE_CLICK()+0x5c6>
    47a0:	87 30       	cpi	r24, 0x07	; 7
    47a2:	91 05       	cpc	r25, r1
    47a4:	29 f0       	breq	.+10     	; 0x47b0 <MODE_CLICK()+0x5c6>
    47a6:	9c 01       	movw	r18, r24
    47a8:	2d 7f       	andi	r18, 0xFD	; 253
    47aa:	29 30       	cpi	r18, 0x09	; 9
    47ac:	31 05       	cpc	r19, r1
    47ae:	19 f4       	brne	.+6      	; 0x47b6 <MODE_CLICK()+0x5cc>
    47b0:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    47b4:	b0 ce       	rjmp	.-672    	; 0x4516 <MODE_CLICK()+0x32c>
    47b6:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    47ba:	24 ce       	rjmp	.-952    	; 0x4404 <MODE_CLICK()+0x21a>
    47bc:	81 e0       	ldi	r24, 0x01	; 1
    47be:	80 93 0a 29 	sts	0x290A, r24	; 0x80290a <VENT_FLAG>
    47c2:	62 cd       	rjmp	.-1340   	; 0x4288 <MODE_CLICK()+0x9e>
    47c4:	82 e3       	ldi	r24, 0x32	; 50
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Bclass::BUZZ_INTERVAL(int) [clone .constprop.25]>
    47cc:	74 cd       	rjmp	.-1304   	; 0x42b6 <MODE_CLICK()+0xcc>

000047ce <UartClass::begin(unsigned long)>:
begin():
    47ce:	dc 01       	movw	r26, r24
    47d0:	ed 91       	ld	r30, X+
    47d2:	fc 91       	ld	r31, X
    47d4:	04 88       	ldd	r0, Z+20	; 0x14
    47d6:	f5 89       	ldd	r31, Z+21	; 0x15
    47d8:	e0 2d       	mov	r30, r0
    47da:	23 e0       	ldi	r18, 0x03	; 3
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	09 94       	ijmp

000047e0 <shiftOut.constprop.37>:
shiftOut():
    47e0:	ef 92       	push	r14
    47e2:	ff 92       	push	r15
    47e4:	0f 93       	push	r16
    47e6:	1f 93       	push	r17
    47e8:	cf 93       	push	r28
    47ea:	df 93       	push	r29
    47ec:	e8 2e       	mov	r14, r24
    47ee:	f6 2e       	mov	r15, r22
    47f0:	d0 e0       	ldi	r29, 0x00	; 0
    47f2:	c0 e0       	ldi	r28, 0x00	; 0
    47f4:	04 2f       	mov	r16, r20
    47f6:	10 e0       	ldi	r17, 0x00	; 0
    47f8:	b8 01       	movw	r22, r16
    47fa:	0c 2e       	mov	r0, r28
    47fc:	02 c0       	rjmp	.+4      	; 0x4802 <shiftOut.constprop.37+0x22>
    47fe:	75 95       	asr	r23
    4800:	67 95       	ror	r22
    4802:	0a 94       	dec	r0
    4804:	e2 f7       	brpl	.-8      	; 0x47fe <shiftOut.constprop.37+0x1e>
    4806:	61 70       	andi	r22, 0x01	; 1
    4808:	8e 2d       	mov	r24, r14
    480a:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    480e:	61 e0       	ldi	r22, 0x01	; 1
    4810:	8f 2d       	mov	r24, r15
    4812:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    4816:	60 e0       	ldi	r22, 0x00	; 0
    4818:	8f 2d       	mov	r24, r15
    481a:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    481e:	21 96       	adiw	r28, 0x01	; 1
    4820:	c8 30       	cpi	r28, 0x08	; 8
    4822:	d1 05       	cpc	r29, r1
    4824:	49 f7       	brne	.-46     	; 0x47f8 <shiftOut.constprop.37+0x18>
    4826:	df 91       	pop	r29
    4828:	cf 91       	pop	r28
    482a:	1f 91       	pop	r17
    482c:	0f 91       	pop	r16
    482e:	ff 90       	pop	r15
    4830:	ef 90       	pop	r14
    4832:	08 95       	ret

00004834 <DISP_REFRESH()>:
DISP_REFRESH():
    4834:	0f 93       	push	r16
    4836:	1f 93       	push	r17
    4838:	cf 93       	push	r28
    483a:	df 93       	push	r29
    483c:	89 ed       	ldi	r24, 0xD9	; 217
    483e:	9a e2       	ldi	r25, 0x2A	; 42
    4840:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <OneButton::tick()>
    4844:	8a eb       	ldi	r24, 0xBA	; 186
    4846:	9a e2       	ldi	r25, 0x2A	; 42
    4848:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <OneButton::tick()>
    484c:	8b e9       	ldi	r24, 0x9B	; 155
    484e:	9a e2       	ldi	r25, 0x2A	; 42
    4850:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <OneButton::tick()>
    4854:	8c e7       	ldi	r24, 0x7C	; 124
    4856:	9a e2       	ldi	r25, 0x2A	; 42
    4858:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <OneButton::tick()>
cathode_high1():
    485c:	61 e0       	ldi	r22, 0x01	; 1
    485e:	8b e0       	ldi	r24, 0x0B	; 11
    4860:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    4864:	61 e0       	ldi	r22, 0x01	; 1
    4866:	8a e0       	ldi	r24, 0x0A	; 10
    4868:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    486c:	61 e0       	ldi	r22, 0x01	; 1
    486e:	89 e0       	ldi	r24, 0x09	; 9
    4870:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    4874:	61 e0       	ldi	r22, 0x01	; 1
    4876:	88 e0       	ldi	r24, 0x08	; 8
    4878:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
DISPLAY_NUMBER1():
    487c:	60 e0       	ldi	r22, 0x00	; 0
    487e:	83 e1       	ldi	r24, 0x13	; 19
    4880:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    4884:	20 91 d2 28 	lds	r18, 0x28D2	; 0x8028d2 <DOT1_0>
    4888:	80 91 32 28 	lds	r24, 0x2832	; 0x802832 <count1>
    488c:	90 91 33 28 	lds	r25, 0x2833	; 0x802833 <count1+0x1>
    4890:	22 23       	and	r18, r18
    4892:	31 f0       	breq	.+12     	; 0x48a0 <DISP_REFRESH()+0x6c>
    4894:	e0 91 d6 28 	lds	r30, 0x28D6	; 0x8028d6 <digits1>
    4898:	f0 91 d7 28 	lds	r31, 0x28D7	; 0x8028d7 <digits1+0x1>
    489c:	00 97       	sbiw	r24, 0x00	; 0
    489e:	c1 f0       	breq	.+48     	; 0x48d0 <DISP_REFRESH()+0x9c>
    48a0:	20 91 d4 28 	lds	r18, 0x28D4	; 0x8028d4 <DOT1_1>
    48a4:	22 23       	and	r18, r18
    48a6:	39 f0       	breq	.+14     	; 0x48b6 <DISP_REFRESH()+0x82>
    48a8:	e0 91 d8 28 	lds	r30, 0x28D8	; 0x8028d8 <digits1+0x2>
    48ac:	f0 91 d9 28 	lds	r31, 0x28D9	; 0x8028d9 <digits1+0x3>
    48b0:	81 30       	cpi	r24, 0x01	; 1
    48b2:	91 05       	cpc	r25, r1
    48b4:	69 f0       	breq	.+26     	; 0x48d0 <DISP_REFRESH()+0x9c>
    48b6:	20 91 cc 28 	lds	r18, 0x28CC	; 0x8028cc <DOT1_2>
    48ba:	22 23       	and	r18, r18
    48bc:	09 f4       	brne	.+2      	; 0x48c0 <DISP_REFRESH()+0x8c>
    48be:	83 c0       	rjmp	.+262    	; 0x49c6 <DISP_REFRESH()+0x192>
    48c0:	82 30       	cpi	r24, 0x02	; 2
    48c2:	91 05       	cpc	r25, r1
    48c4:	09 f0       	breq	.+2      	; 0x48c8 <DISP_REFRESH()+0x94>
    48c6:	7f c0       	rjmp	.+254    	; 0x49c6 <DISP_REFRESH()+0x192>
    48c8:	e0 91 da 28 	lds	r30, 0x28DA	; 0x8028da <digits1+0x4>
    48cc:	f0 91 db 28 	lds	r31, 0x28DB	; 0x8028db <digits1+0x5>
    48d0:	ec 5e       	subi	r30, 0xEC	; 236
    48d2:	f7 44       	sbci	r31, 0x47	; 71
    48d4:	40 81       	ld	r20, Z
    48d6:	41 60       	ori	r20, 0x01	; 1
    48d8:	64 e1       	ldi	r22, 0x14	; 20
    48da:	82 e1       	ldi	r24, 0x12	; 18
    48dc:	81 df       	rcall	.-254    	; 0x47e0 <shiftOut.constprop.37>
    48de:	c0 91 32 28 	lds	r28, 0x2832	; 0x802832 <count1>
    48e2:	d0 91 33 28 	lds	r29, 0x2833	; 0x802833 <count1+0x1>
    48e6:	fe 01       	movw	r30, r28
    48e8:	ee 0f       	add	r30, r30
    48ea:	ff 1f       	adc	r31, r31
    48ec:	ec 5f       	subi	r30, 0xFC	; 252
    48ee:	f7 44       	sbci	r31, 0x47	; 71
    48f0:	60 e0       	ldi	r22, 0x00	; 0
    48f2:	80 81       	ld	r24, Z
    48f4:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    48f8:	61 e0       	ldi	r22, 0x01	; 1
    48fa:	83 e1       	ldi	r24, 0x13	; 19
    48fc:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    4900:	21 96       	adiw	r28, 0x01	; 1
    4902:	c4 30       	cpi	r28, 0x04	; 4
    4904:	d1 05       	cpc	r29, r1
    4906:	0c f0       	brlt	.+2      	; 0x490a <DISP_REFRESH()+0xd6>
    4908:	6a c0       	rjmp	.+212    	; 0x49de <DISP_REFRESH()+0x1aa>
    490a:	c0 93 32 28 	sts	0x2832, r28	; 0x802832 <count1>
    490e:	d0 93 33 28 	sts	0x2833, r29	; 0x802833 <count1+0x1>
cathode_high2():
    4912:	61 e0       	ldi	r22, 0x01	; 1
    4914:	84 e0       	ldi	r24, 0x04	; 4
    4916:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    491a:	61 e0       	ldi	r22, 0x01	; 1
    491c:	85 e0       	ldi	r24, 0x05	; 5
    491e:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    4922:	61 e0       	ldi	r22, 0x01	; 1
    4924:	86 e0       	ldi	r24, 0x06	; 6
    4926:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    492a:	61 e0       	ldi	r22, 0x01	; 1
    492c:	87 e0       	ldi	r24, 0x07	; 7
    492e:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
DISPLAY_NUMBER2():
    4932:	60 e0       	ldi	r22, 0x00	; 0
    4934:	80 e2       	ldi	r24, 0x20	; 32
    4936:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    493a:	c0 91 34 28 	lds	r28, 0x2834	; 0x802834 <count2>
    493e:	d0 91 35 28 	lds	r29, 0x2835	; 0x802835 <count2+0x1>
    4942:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <DOT2_0>
    4946:	8e 01       	movw	r16, r28
    4948:	00 0f       	add	r16, r16
    494a:	11 1f       	adc	r17, r17
    494c:	88 23       	and	r24, r24
    494e:	31 f0       	breq	.+12     	; 0x495c <DISP_REFRESH()+0x128>
    4950:	e0 91 de 28 	lds	r30, 0x28DE	; 0x8028de <digits2>
    4954:	f0 91 df 28 	lds	r31, 0x28DF	; 0x8028df <digits2+0x1>
    4958:	20 97       	sbiw	r28, 0x00	; 0
    495a:	b1 f0       	breq	.+44     	; 0x4988 <DISP_REFRESH()+0x154>
    495c:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <DOT2_1>
    4960:	88 23       	and	r24, r24
    4962:	39 f0       	breq	.+14     	; 0x4972 <DISP_REFRESH()+0x13e>
    4964:	e0 91 e0 28 	lds	r30, 0x28E0	; 0x8028e0 <digits2+0x2>
    4968:	f0 91 e1 28 	lds	r31, 0x28E1	; 0x8028e1 <digits2+0x3>
    496c:	c1 30       	cpi	r28, 0x01	; 1
    496e:	d1 05       	cpc	r29, r1
    4970:	59 f0       	breq	.+22     	; 0x4988 <DISP_REFRESH()+0x154>
    4972:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <DOT2_2>
    4976:	88 23       	and	r24, r24
    4978:	b9 f1       	breq	.+110    	; 0x49e8 <DISP_REFRESH()+0x1b4>
    497a:	c2 30       	cpi	r28, 0x02	; 2
    497c:	d1 05       	cpc	r29, r1
    497e:	a1 f5       	brne	.+104    	; 0x49e8 <DISP_REFRESH()+0x1b4>
    4980:	e0 91 e2 28 	lds	r30, 0x28E2	; 0x8028e2 <digits2+0x4>
    4984:	f0 91 e3 28 	lds	r31, 0x28E3	; 0x8028e3 <digits2+0x5>
    4988:	ec 5e       	subi	r30, 0xEC	; 236
    498a:	f7 44       	sbci	r31, 0x47	; 71
    498c:	40 81       	ld	r20, Z
    498e:	41 60       	ori	r20, 0x01	; 1
    4990:	6e e1       	ldi	r22, 0x1E	; 30
    4992:	8f e1       	ldi	r24, 0x1F	; 31
    4994:	25 df       	rcall	.-438    	; 0x47e0 <shiftOut.constprop.37>
    4996:	f8 01       	movw	r30, r16
    4998:	e4 5f       	subi	r30, 0xF4	; 244
    499a:	f7 44       	sbci	r31, 0x47	; 71
    499c:	60 e0       	ldi	r22, 0x00	; 0
    499e:	80 81       	ld	r24, Z
    49a0:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    49a4:	61 e0       	ldi	r22, 0x01	; 1
    49a6:	80 e2       	ldi	r24, 0x20	; 32
    49a8:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    49ac:	21 96       	adiw	r28, 0x01	; 1
    49ae:	c4 30       	cpi	r28, 0x04	; 4
    49b0:	d1 05       	cpc	r29, r1
    49b2:	24 f5       	brge	.+72     	; 0x49fc <DISP_REFRESH()+0x1c8>
    49b4:	c0 93 34 28 	sts	0x2834, r28	; 0x802834 <count2>
    49b8:	d0 93 35 28 	sts	0x2835, r29	; 0x802835 <count2+0x1>
DISP_REFRESH():
    49bc:	df 91       	pop	r29
    49be:	cf 91       	pop	r28
    49c0:	1f 91       	pop	r17
    49c2:	0f 91       	pop	r16
    49c4:	08 95       	ret
DISPLAY_NUMBER1():
    49c6:	88 0f       	add	r24, r24
    49c8:	99 1f       	adc	r25, r25
    49ca:	fc 01       	movw	r30, r24
    49cc:	ea 52       	subi	r30, 0x2A	; 42
    49ce:	f7 4d       	sbci	r31, 0xD7	; 215
    49d0:	01 90       	ld	r0, Z+
    49d2:	f0 81       	ld	r31, Z
    49d4:	e0 2d       	mov	r30, r0
    49d6:	ec 5e       	subi	r30, 0xEC	; 236
    49d8:	f7 44       	sbci	r31, 0x47	; 71
    49da:	40 81       	ld	r20, Z
    49dc:	7d cf       	rjmp	.-262    	; 0x48d8 <DISP_REFRESH()+0xa4>
    49de:	10 92 32 28 	sts	0x2832, r1	; 0x802832 <count1>
    49e2:	10 92 33 28 	sts	0x2833, r1	; 0x802833 <count1+0x1>
    49e6:	95 cf       	rjmp	.-214    	; 0x4912 <DISP_REFRESH()+0xde>
DISPLAY_NUMBER2():
    49e8:	f8 01       	movw	r30, r16
    49ea:	e2 52       	subi	r30, 0x22	; 34
    49ec:	f7 4d       	sbci	r31, 0xD7	; 215
    49ee:	01 90       	ld	r0, Z+
    49f0:	f0 81       	ld	r31, Z
    49f2:	e0 2d       	mov	r30, r0
    49f4:	ec 5e       	subi	r30, 0xEC	; 236
    49f6:	f7 44       	sbci	r31, 0x47	; 71
    49f8:	40 81       	ld	r20, Z
    49fa:	ca cf       	rjmp	.-108    	; 0x4990 <DISP_REFRESH()+0x15c>
    49fc:	10 92 34 28 	sts	0x2834, r1	; 0x802834 <count2>
    4a00:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <count2+0x1>
    4a04:	10 92 32 28 	sts	0x2832, r1	; 0x802832 <count1>
    4a08:	10 92 33 28 	sts	0x2833, r1	; 0x802833 <count1+0x1>
    4a0c:	d7 cf       	rjmp	.-82     	; 0x49bc <DISP_REFRESH()+0x188>

00004a0e <__vector_32>:
__vector_32():
    4a0e:	1f 92       	push	r1
    4a10:	0f 92       	push	r0
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	0f 92       	push	r0
    4a16:	11 24       	eor	r1, r1
    4a18:	2f 93       	push	r18
    4a1a:	3f 93       	push	r19
    4a1c:	4f 93       	push	r20
    4a1e:	5f 93       	push	r21
    4a20:	6f 93       	push	r22
    4a22:	7f 93       	push	r23
    4a24:	8f 93       	push	r24
    4a26:	9f 93       	push	r25
    4a28:	af 93       	push	r26
    4a2a:	bf 93       	push	r27
    4a2c:	ef 93       	push	r30
    4a2e:	ff 93       	push	r31
    4a30:	86 e5       	ldi	r24, 0x56	; 86
    4a32:	99 e2       	ldi	r25, 0x29	; 41
    4a34:	0e 94 a3 07 	call	0xf46	; 0xf46 <UartClass::_tx_data_empty_irq()>
    4a38:	ff 91       	pop	r31
    4a3a:	ef 91       	pop	r30
    4a3c:	bf 91       	pop	r27
    4a3e:	af 91       	pop	r26
    4a40:	9f 91       	pop	r25
    4a42:	8f 91       	pop	r24
    4a44:	7f 91       	pop	r23
    4a46:	6f 91       	pop	r22
    4a48:	5f 91       	pop	r21
    4a4a:	4f 91       	pop	r20
    4a4c:	3f 91       	pop	r19
    4a4e:	2f 91       	pop	r18
    4a50:	0f 90       	pop	r0
    4a52:	0f be       	out	0x3f, r0	; 63
    4a54:	0f 90       	pop	r0
    4a56:	1f 90       	pop	r1
    4a58:	18 95       	reti

00004a5a <__vector_31>:
__vector_31():
    4a5a:	1f 92       	push	r1
    4a5c:	0f 92       	push	r0
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	0f 92       	push	r0
    4a62:	11 24       	eor	r1, r1
    4a64:	2f 93       	push	r18
    4a66:	8f 93       	push	r24
    4a68:	9f 93       	push	r25
    4a6a:	ef 93       	push	r30
    4a6c:	ff 93       	push	r31
_rx_complete_irq():
    4a6e:	e0 91 62 29 	lds	r30, 0x2962	; 0x802962 <Serial2+0xc>
    4a72:	f0 91 63 29 	lds	r31, 0x2963	; 0x802963 <Serial2+0xd>
    4a76:	81 81       	ldd	r24, Z+1	; 0x01
    4a78:	81 fd       	sbrc	r24, 1
    4a7a:	1b c0       	rjmp	.+54     	; 0x4ab2 <__vector_31+0x58>
    4a7c:	90 81       	ld	r25, Z
    4a7e:	80 91 6c 29 	lds	r24, 0x296C	; 0x80296c <Serial2+0x16>
    4a82:	8f 5f       	subi	r24, 0xFF	; 255
    4a84:	8f 73       	andi	r24, 0x3F	; 63
    4a86:	20 91 6d 29 	lds	r18, 0x296D	; 0x80296d <Serial2+0x17>
    4a8a:	82 17       	cp	r24, r18
    4a8c:	41 f0       	breq	.+16     	; 0x4a9e <__vector_31+0x44>
    4a8e:	e0 91 6c 29 	lds	r30, 0x296C	; 0x80296c <Serial2+0x16>
    4a92:	f0 e0       	ldi	r31, 0x00	; 0
    4a94:	ea 5a       	subi	r30, 0xAA	; 170
    4a96:	f6 4d       	sbci	r31, 0xD6	; 214
    4a98:	95 8f       	std	Z+29, r25	; 0x1d
    4a9a:	80 93 6c 29 	sts	0x296C, r24	; 0x80296c <Serial2+0x16>
__vector_31():
    4a9e:	ff 91       	pop	r31
    4aa0:	ef 91       	pop	r30
    4aa2:	9f 91       	pop	r25
    4aa4:	8f 91       	pop	r24
    4aa6:	2f 91       	pop	r18
    4aa8:	0f 90       	pop	r0
    4aaa:	0f be       	out	0x3f, r0	; 63
    4aac:	0f 90       	pop	r0
    4aae:	1f 90       	pop	r1
    4ab0:	18 95       	reti
_rx_complete_irq():
    4ab2:	80 81       	ld	r24, Z
    4ab4:	f4 cf       	rjmp	.-24     	; 0x4a9e <__vector_31+0x44>

00004ab6 <__vector_25>:
__vector_25():
    4ab6:	1f 92       	push	r1
    4ab8:	0f 92       	push	r0
    4aba:	0f b6       	in	r0, 0x3f	; 63
    4abc:	0f 92       	push	r0
    4abe:	11 24       	eor	r1, r1
    4ac0:	8f 93       	push	r24
    4ac2:	9f 93       	push	r25
    4ac4:	af 93       	push	r26
    4ac6:	bf 93       	push	r27
    4ac8:	80 91 45 28 	lds	r24, 0x2845	; 0x802845 <timer_millis>
    4acc:	90 91 46 28 	lds	r25, 0x2846	; 0x802846 <timer_millis+0x1>
    4ad0:	a0 91 47 28 	lds	r26, 0x2847	; 0x802847 <timer_millis+0x2>
    4ad4:	b0 91 48 28 	lds	r27, 0x2848	; 0x802848 <timer_millis+0x3>
    4ad8:	01 96       	adiw	r24, 0x01	; 1
    4ada:	a1 1d       	adc	r26, r1
    4adc:	b1 1d       	adc	r27, r1
    4ade:	80 93 45 28 	sts	0x2845, r24	; 0x802845 <timer_millis>
    4ae2:	90 93 46 28 	sts	0x2846, r25	; 0x802846 <timer_millis+0x1>
    4ae6:	a0 93 47 28 	sts	0x2847, r26	; 0x802847 <timer_millis+0x2>
    4aea:	b0 93 48 28 	sts	0x2848, r27	; 0x802848 <timer_millis+0x3>
    4aee:	81 e0       	ldi	r24, 0x01	; 1
    4af0:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
    4af4:	bf 91       	pop	r27
    4af6:	af 91       	pop	r26
    4af8:	9f 91       	pop	r25
    4afa:	8f 91       	pop	r24
    4afc:	0f 90       	pop	r0
    4afe:	0f be       	out	0x3f, r0	; 63
    4b00:	0f 90       	pop	r0
    4b02:	1f 90       	pop	r1
    4b04:	18 95       	reti

00004b06 <__vector_7>:
__vector_7():
    4b06:	1f 92       	push	r1
    4b08:	0f 92       	push	r0
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	0f 92       	push	r0
    4b0e:	11 24       	eor	r1, r1
    4b10:	4f 92       	push	r4
    4b12:	5f 92       	push	r5
    4b14:	6f 92       	push	r6
    4b16:	7f 92       	push	r7
    4b18:	8f 92       	push	r8
    4b1a:	9f 92       	push	r9
    4b1c:	af 92       	push	r10
    4b1e:	bf 92       	push	r11
    4b20:	cf 92       	push	r12
    4b22:	df 92       	push	r13
    4b24:	ef 92       	push	r14
    4b26:	ff 92       	push	r15
    4b28:	2f 93       	push	r18
    4b2a:	3f 93       	push	r19
    4b2c:	4f 93       	push	r20
    4b2e:	5f 93       	push	r21
    4b30:	6f 93       	push	r22
    4b32:	7f 93       	push	r23
    4b34:	8f 93       	push	r24
    4b36:	9f 93       	push	r25
    4b38:	af 93       	push	r26
    4b3a:	bf 93       	push	r27
    4b3c:	ef 93       	push	r30
    4b3e:	ff 93       	push	r31
TICKER_UPDATE():
    4b40:	80 ed       	ldi	r24, 0xD0	; 208
    4b42:	9b e2       	ldi	r25, 0x2B	; 43
    4b44:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
    4b48:	85 eb       	ldi	r24, 0xB5	; 181
    4b4a:	9b e2       	ldi	r25, 0x2B	; 43
    4b4c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
SSR_fail_show_ticker_update():
    4b50:	82 e7       	ldi	r24, 0x72	; 114
    4b52:	9c e2       	ldi	r25, 0x2C	; 44
    4b54:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
TICKER_UPDATE():
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	43 ec       	ldi	r20, 0xC3	; 195
    4b5e:	53 e4       	ldi	r21, 0x43	; 67
    4b60:	60 91 12 28 	lds	r22, 0x2812	; 0x802812 <TEMP_DEG>
    4b64:	70 91 13 28 	lds	r23, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    4b68:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    4b6c:	90 91 15 28 	lds	r25, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    4b70:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    4b74:	87 fd       	sbrc	r24, 7
    4b76:	05 c0       	rjmp	.+10     	; 0x4b82 <__vector_7+0x7c>
digitalWrite():
    4b78:	60 e0       	ldi	r22, 0x00	; 0
    4b7a:	88 e1       	ldi	r24, 0x18	; 24
    4b7c:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    4b80:	08 c0       	rjmp	.+16     	; 0x4b92 <__vector_7+0x8c>
TICKER_UPDATE():
    4b82:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    4b86:	81 11       	cpse	r24, r1
    4b88:	84 c0       	rjmp	.+264    	; 0x4c92 <__vector_7+0x18c>
    4b8a:	8a e9       	ldi	r24, 0x9A	; 154
    4b8c:	9b e2       	ldi	r25, 0x2B	; 43
    4b8e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
    4b92:	84 e6       	ldi	r24, 0x64	; 100
    4b94:	9b e2       	ldi	r25, 0x2B	; 43
    4b96:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
    4b9a:	89 e4       	ldi	r24, 0x49	; 73
    4b9c:	9b e2       	ldi	r25, 0x2B	; 43
    4b9e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
    4ba2:	8f e7       	ldi	r24, 0x7F	; 127
    4ba4:	9b e2       	ldi	r25, 0x2B	; 43
    4ba6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
Temp_Tick_Update():
    4baa:	8b ee       	ldi	r24, 0xEB	; 235
    4bac:	9b e2       	ldi	r25, 0x2B	; 43
    4bae:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
    4bb2:	81 e2       	ldi	r24, 0x21	; 33
    4bb4:	9c e2       	ldi	r25, 0x2C	; 44
    4bb6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
__vector_7():
    4bba:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    4bbe:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    4bc2:	01 96       	adiw	r24, 0x01	; 1
    4bc4:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    4bc8:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
TIME_CAL():
    4bcc:	80 91 b8 28 	lds	r24, 0x28B8	; 0x8028b8 <COUNTDOWN_START>
    4bd0:	88 23       	and	r24, r24
    4bd2:	21 f1       	breq	.+72     	; 0x4c1c <__vector_7+0x116>
    4bd4:	80 91 aa 28 	lds	r24, 0x28AA	; 0x8028aa <TIME_INC>
    4bd8:	90 91 ab 28 	lds	r25, 0x28AB	; 0x8028ab <TIME_INC+0x1>
    4bdc:	01 96       	adiw	r24, 0x01	; 1
    4bde:	80 93 aa 28 	sts	0x28AA, r24	; 0x8028aa <TIME_INC>
    4be2:	90 93 ab 28 	sts	0x28AB, r25	; 0x8028ab <TIME_INC+0x1>
    4be6:	80 3b       	cpi	r24, 0xB0	; 176
    4be8:	9e 40       	sbci	r25, 0x0E	; 14
    4bea:	c1 f4       	brne	.+48     	; 0x4c1c <__vector_7+0x116>
    4bec:	80 91 66 28 	lds	r24, 0x2866	; 0x802866 <ElapsedTime>
    4bf0:	81 11       	cpse	r24, r1
    4bf2:	be c0       	rjmp	.+380    	; 0x4d70 <__vector_7+0x26a>
    4bf4:	80 91 bb 28 	lds	r24, 0x28BB	; 0x8028bb <SET_MIN>
    4bf8:	90 91 bc 28 	lds	r25, 0x28BC	; 0x8028bc <SET_MIN+0x1>
    4bfc:	01 97       	sbiw	r24, 0x01	; 1
    4bfe:	80 93 bb 28 	sts	0x28BB, r24	; 0x8028bb <SET_MIN>
    4c02:	90 93 bc 28 	sts	0x28BC, r25	; 0x8028bc <SET_MIN+0x1>
    4c06:	10 92 aa 28 	sts	0x28AA, r1	; 0x8028aa <TIME_INC>
    4c0a:	10 92 ab 28 	sts	0x28AB, r1	; 0x8028ab <TIME_INC+0x1>
    4c0e:	89 2b       	or	r24, r25
    4c10:	29 f4       	brne	.+10     	; 0x4c1c <__vector_7+0x116>
    4c12:	81 e0       	ldi	r24, 0x01	; 1
    4c14:	80 93 ae 28 	sts	0x28AE, r24	; 0x8028ae <ExitFromProcess>
    4c18:	10 92 b8 28 	sts	0x28B8, r1	; 0x8028b8 <COUNTDOWN_START>
__vector_7():
    4c1c:	80 91 c1 28 	lds	r24, 0x28C1	; 0x8028c1 <currentMillis>
    4c20:	90 91 c2 28 	lds	r25, 0x28C2	; 0x8028c2 <currentMillis+0x1>
    4c24:	01 96       	adiw	r24, 0x01	; 1
    4c26:	80 93 c1 28 	sts	0x28C1, r24	; 0x8028c1 <currentMillis>
    4c2a:	90 93 c2 28 	sts	0x28C2, r25	; 0x8028c2 <currentMillis+0x1>
    4c2e:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <currentMillis1>
    4c32:	90 91 ba 28 	lds	r25, 0x28BA	; 0x8028ba <currentMillis1+0x1>
    4c36:	01 96       	adiw	r24, 0x01	; 1
    4c38:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <currentMillis1>
    4c3c:	90 93 ba 28 	sts	0x28BA, r25	; 0x8028ba <currentMillis1+0x1>
    4c40:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <INTERATION>
    4c44:	90 91 30 28 	lds	r25, 0x2830	; 0x802830 <INTERATION+0x1>
    4c48:	01 96       	adiw	r24, 0x01	; 1
    4c4a:	80 93 2f 28 	sts	0x282F, r24	; 0x80282f <INTERATION>
    4c4e:	90 93 30 28 	sts	0x2830, r25	; 0x802830 <INTERATION+0x1>
    4c52:	81 e0       	ldi	r24, 0x01	; 1
    4c54:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
    4c58:	ff 91       	pop	r31
    4c5a:	ef 91       	pop	r30
    4c5c:	bf 91       	pop	r27
    4c5e:	af 91       	pop	r26
    4c60:	9f 91       	pop	r25
    4c62:	8f 91       	pop	r24
    4c64:	7f 91       	pop	r23
    4c66:	6f 91       	pop	r22
    4c68:	5f 91       	pop	r21
    4c6a:	4f 91       	pop	r20
    4c6c:	3f 91       	pop	r19
    4c6e:	2f 91       	pop	r18
    4c70:	ff 90       	pop	r15
    4c72:	ef 90       	pop	r14
    4c74:	df 90       	pop	r13
    4c76:	cf 90       	pop	r12
    4c78:	bf 90       	pop	r11
    4c7a:	af 90       	pop	r10
    4c7c:	9f 90       	pop	r9
    4c7e:	8f 90       	pop	r8
    4c80:	7f 90       	pop	r7
    4c82:	6f 90       	pop	r6
    4c84:	5f 90       	pop	r5
    4c86:	4f 90       	pop	r4
    4c88:	0f 90       	pop	r0
    4c8a:	0f be       	out	0x3f, r0	; 63
    4c8c:	0f 90       	pop	r0
    4c8e:	1f 90       	pop	r1
    4c90:	18 95       	reti
TICKER_UPDATE():
    4c92:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    4c96:	85 30       	cpi	r24, 0x05	; 5
    4c98:	09 f0       	breq	.+2      	; 0x4c9c <__vector_7+0x196>
    4c9a:	7b cf       	rjmp	.-266    	; 0x4b92 <__vector_7+0x8c>
EnergyModeOn():
    4c9c:	80 91 a7 28 	lds	r24, 0x28A7	; 0x8028a7 <EnergySetValue>
    4ca0:	88 23       	and	r24, r24
    4ca2:	09 f4       	brne	.+2      	; 0x4ca6 <__vector_7+0x1a0>
    4ca4:	69 cf       	rjmp	.-302    	; 0x4b78 <__vector_7+0x72>
    4ca6:	8a 30       	cpi	r24, 0x0A	; 10
    4ca8:	11 f4       	brne	.+4      	; 0x4cae <__vector_7+0x1a8>
digitalWrite():
    4caa:	61 e0       	ldi	r22, 0x01	; 1
    4cac:	66 cf       	rjmp	.-308    	; 0x4b7a <__vector_7+0x74>
EnergyModeOn():
    4cae:	24 e0       	ldi	r18, 0x04	; 4
    4cb0:	82 02       	muls	r24, r18
    4cb2:	c0 01       	movw	r24, r0
    4cb4:	11 24       	eor	r1, r1
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	e4 52       	subi	r30, 0x24	; 36
    4cba:	f8 44       	sbci	r31, 0x48	; 72
    4cbc:	c0 80       	ld	r12, Z
    4cbe:	d1 80       	ldd	r13, Z+1	; 0x01
    4cc0:	e2 80       	ldd	r14, Z+2	; 0x02
    4cc2:	f3 80       	ldd	r15, Z+3	; 0x03
    4cc4:	8c 54       	subi	r24, 0x4C	; 76
    4cc6:	98 44       	sbci	r25, 0x48	; 72
    4cc8:	fc 01       	movw	r30, r24
    4cca:	40 80       	ld	r4, Z
    4ccc:	51 80       	ldd	r5, Z+1	; 0x01
    4cce:	62 80       	ldd	r6, Z+2	; 0x02
    4cd0:	73 80       	ldd	r7, Z+3	; 0x03
check():
    4cd2:	c0 92 2b 28 	sts	0x282B, r12	; 0x80282b <_OFF_DURATION>
    4cd6:	d0 92 2c 28 	sts	0x282C, r13	; 0x80282c <_OFF_DURATION+0x1>
    4cda:	e0 92 2d 28 	sts	0x282D, r14	; 0x80282d <_OFF_DURATION+0x2>
    4cde:	f0 92 2e 28 	sts	0x282E, r15	; 0x80282e <_OFF_DURATION+0x3>
    4ce2:	40 92 27 28 	sts	0x2827, r4	; 0x802827 <_ON_DURATION>
    4ce6:	50 92 28 28 	sts	0x2828, r5	; 0x802828 <_ON_DURATION+0x1>
    4cea:	60 92 29 28 	sts	0x2829, r6	; 0x802829 <_ON_DURATION+0x2>
    4cee:	70 92 2a 28 	sts	0x282A, r7	; 0x80282a <_ON_DURATION+0x3>
    4cf2:	80 90 22 28 	lds	r8, 0x2822	; 0x802822 <__data_end>
    4cf6:	90 90 23 28 	lds	r9, 0x2823	; 0x802823 <__data_end+0x1>
    4cfa:	a0 90 24 28 	lds	r10, 0x2824	; 0x802824 <__data_end+0x2>
    4cfe:	b0 90 25 28 	lds	r11, 0x2825	; 0x802825 <__data_end+0x3>
    4d02:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <_PIN_STATUS>
    4d06:	81 11       	cpse	r24, r1
    4d08:	1a c0       	rjmp	.+52     	; 0x4d3e <__vector_7+0x238>
    4d0a:	0e 94 39 0a 	call	0x1472	; 0x1472 <millis>
    4d0e:	68 19       	sub	r22, r8
    4d10:	79 09       	sbc	r23, r9
    4d12:	8a 09       	sbc	r24, r10
    4d14:	9b 09       	sbc	r25, r11
    4d16:	64 15       	cp	r22, r4
    4d18:	75 05       	cpc	r23, r5
    4d1a:	86 05       	cpc	r24, r6
    4d1c:	97 05       	cpc	r25, r7
    4d1e:	08 f4       	brcc	.+2      	; 0x4d22 <__vector_7+0x21c>
    4d20:	2b cf       	rjmp	.-426    	; 0x4b78 <__vector_7+0x72>
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <_PIN_STATUS>
    4d28:	0e 94 39 0a 	call	0x1472	; 0x1472 <millis>
    4d2c:	60 93 22 28 	sts	0x2822, r22	; 0x802822 <__data_end>
    4d30:	70 93 23 28 	sts	0x2823, r23	; 0x802823 <__data_end+0x1>
    4d34:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <__data_end+0x2>
    4d38:	90 93 25 28 	sts	0x2825, r25	; 0x802825 <__data_end+0x3>
    4d3c:	1d cf       	rjmp	.-454    	; 0x4b78 <__vector_7+0x72>
    4d3e:	0e 94 39 0a 	call	0x1472	; 0x1472 <millis>
    4d42:	68 19       	sub	r22, r8
    4d44:	79 09       	sbc	r23, r9
    4d46:	8a 09       	sbc	r24, r10
    4d48:	9b 09       	sbc	r25, r11
    4d4a:	6c 15       	cp	r22, r12
    4d4c:	7d 05       	cpc	r23, r13
    4d4e:	8e 05       	cpc	r24, r14
    4d50:	9f 05       	cpc	r25, r15
    4d52:	08 f4       	brcc	.+2      	; 0x4d56 <__vector_7+0x250>
    4d54:	aa cf       	rjmp	.-172    	; 0x4caa <__vector_7+0x1a4>
    4d56:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <_PIN_STATUS>
    4d5a:	0e 94 39 0a 	call	0x1472	; 0x1472 <millis>
    4d5e:	60 93 22 28 	sts	0x2822, r22	; 0x802822 <__data_end>
    4d62:	70 93 23 28 	sts	0x2823, r23	; 0x802823 <__data_end+0x1>
    4d66:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <__data_end+0x2>
    4d6a:	90 93 25 28 	sts	0x2825, r25	; 0x802825 <__data_end+0x3>
    4d6e:	9d cf       	rjmp	.-198    	; 0x4caa <__vector_7+0x1a4>
TIME_CAL():
    4d70:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <ElapsedMinute>
    4d74:	90 91 a6 28 	lds	r25, 0x28A6	; 0x8028a6 <ElapsedMinute+0x1>
    4d78:	01 96       	adiw	r24, 0x01	; 1
    4d7a:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <ElapsedMinute>
    4d7e:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <ElapsedMinute+0x1>
    4d82:	10 92 aa 28 	sts	0x28AA, r1	; 0x8028aa <TIME_INC>
    4d86:	10 92 ab 28 	sts	0x28AB, r1	; 0x8028ab <TIME_INC+0x1>
    4d8a:	80 37       	cpi	r24, 0x70	; 112
    4d8c:	97 41       	sbci	r25, 0x17	; 23
    4d8e:	08 f4       	brcc	.+2      	; 0x4d92 <__vector_7+0x28c>
    4d90:	45 cf       	rjmp	.-374    	; 0x4c1c <__vector_7+0x116>
    4d92:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <ElapsedMinute>
    4d96:	10 92 a6 28 	sts	0x28A6, r1	; 0x8028a6 <ElapsedMinute+0x1>
    4d9a:	3b cf       	rjmp	.-394    	; 0x4c12 <__vector_7+0x10c>

00004d9c <global constructors keyed to 65535_0_Butn.cpp.o.4055>:
_GLOBAL__I_65535_0_Butn.cpp.o.4055():
    4d9c:	4f 92       	push	r4
    4d9e:	5f 92       	push	r5
    4da0:	6f 92       	push	r6
    4da2:	7f 92       	push	r7
    4da4:	8f 92       	push	r8
    4da6:	9f 92       	push	r9
    4da8:	af 92       	push	r10
    4daa:	bf 92       	push	r11
    4dac:	cf 92       	push	r12
    4dae:	df 92       	push	r13
    4db0:	ef 92       	push	r14
    4db2:	ff 92       	push	r15
    4db4:	cf 93       	push	r28
    4db6:	df 93       	push	r29
    4db8:	10 92 58 29 	sts	0x2958, r1	; 0x802958 <Serial2+0x2>
    4dbc:	10 92 59 29 	sts	0x2959, r1	; 0x802959 <Serial2+0x3>
    4dc0:	88 ee       	ldi	r24, 0xE8	; 232
    4dc2:	93 e0       	ldi	r25, 0x03	; 3
    4dc4:	a0 e0       	ldi	r26, 0x00	; 0
    4dc6:	b0 e0       	ldi	r27, 0x00	; 0
    4dc8:	80 93 5a 29 	sts	0x295A, r24	; 0x80295a <Serial2+0x4>
    4dcc:	90 93 5b 29 	sts	0x295B, r25	; 0x80295b <Serial2+0x5>
    4dd0:	a0 93 5c 29 	sts	0x295C, r26	; 0x80295c <Serial2+0x6>
    4dd4:	b0 93 5d 29 	sts	0x295D, r27	; 0x80295d <Serial2+0x7>
    4dd8:	2f ed       	ldi	r18, 0xDF	; 223
    4dda:	38 eb       	ldi	r19, 0xB8	; 184
    4ddc:	20 93 56 29 	sts	0x2956, r18	; 0x802956 <Serial2>
    4de0:	30 93 57 29 	sts	0x2957, r19	; 0x802957 <Serial2+0x1>
    4de4:	20 e4       	ldi	r18, 0x40	; 64
    4de6:	38 e0       	ldi	r19, 0x08	; 8
    4de8:	20 93 62 29 	sts	0x2962, r18	; 0x802962 <Serial2+0xc>
    4dec:	30 93 63 29 	sts	0x2963, r19	; 0x802963 <Serial2+0xd>
    4df0:	23 e2       	ldi	r18, 0x23	; 35
    4df2:	20 93 64 29 	sts	0x2964, r18	; 0x802964 <Serial2+0xe>
    4df6:	22 e2       	ldi	r18, 0x22	; 34
    4df8:	20 93 65 29 	sts	0x2965, r18	; 0x802965 <Serial2+0xf>
    4dfc:	10 92 66 29 	sts	0x2966, r1	; 0x802966 <Serial2+0x10>
    4e00:	27 e2       	ldi	r18, 0x27	; 39
    4e02:	20 93 67 29 	sts	0x2967, r18	; 0x802967 <Serial2+0x11>
    4e06:	26 e2       	ldi	r18, 0x26	; 38
    4e08:	20 93 68 29 	sts	0x2968, r18	; 0x802968 <Serial2+0x12>
    4e0c:	20 e1       	ldi	r18, 0x10	; 16
    4e0e:	20 93 69 29 	sts	0x2969, r18	; 0x802969 <Serial2+0x13>
    4e12:	10 92 6a 29 	sts	0x296A, r1	; 0x80296a <Serial2+0x14>
    4e16:	10 92 6b 29 	sts	0x296B, r1	; 0x80296b <Serial2+0x15>
    4e1a:	10 92 6c 29 	sts	0x296C, r1	; 0x80296c <Serial2+0x16>
    4e1e:	10 92 6d 29 	sts	0x296D, r1	; 0x80296d <Serial2+0x17>
    4e22:	10 92 6e 29 	sts	0x296E, r1	; 0x80296e <Serial2+0x18>
    4e26:	10 92 6f 29 	sts	0x296F, r1	; 0x80296f <Serial2+0x19>
    4e2a:	20 e2       	ldi	r18, 0x20	; 32
    4e2c:	20 93 70 29 	sts	0x2970, r18	; 0x802970 <Serial2+0x1a>
    4e30:	10 92 71 29 	sts	0x2971, r1	; 0x802971 <Serial2+0x1b>
    4e34:	10 92 72 29 	sts	0x2972, r1	; 0x802972 <Serial2+0x1c>
    4e38:	24 e0       	ldi	r18, 0x04	; 4
    4e3a:	20 93 33 2a 	sts	0x2A33, r18	; 0x802a33 <DEFAULT_SPI_SETTINGS+0x1>
    4e3e:	21 e2       	ldi	r18, 0x21	; 33
    4e40:	20 93 32 2a 	sts	0x2A32, r18	; 0x802a32 <DEFAULT_SPI_SETTINGS>
    4e44:	10 92 f8 29 	sts	0x29F8, r1	; 0x8029f8 <SPI+0x5>
    4e48:	10 92 f7 29 	sts	0x29F7, r1	; 0x8029f7 <SPI+0x4>
    4e4c:	c1 e0       	ldi	r28, 0x01	; 1
    4e4e:	d0 e0       	ldi	r29, 0x00	; 0
    4e50:	c0 93 45 2c 	sts	0x2C45, r28	; 0x802c45 <flahDisplay+0x9>
    4e54:	d0 93 46 2c 	sts	0x2C46, r29	; 0x802c46 <flahDisplay+0xa>
    4e58:	44 ef       	ldi	r20, 0xF4	; 244
    4e5a:	51 e0       	ldi	r21, 0x01	; 1
    4e5c:	60 e0       	ldi	r22, 0x00	; 0
    4e5e:	70 e0       	ldi	r23, 0x00	; 0
    4e60:	40 93 3d 2c 	sts	0x2C3D, r20	; 0x802c3d <flahDisplay+0x1>
    4e64:	50 93 3e 2c 	sts	0x2C3E, r21	; 0x802c3e <flahDisplay+0x2>
    4e68:	60 93 3f 2c 	sts	0x2C3F, r22	; 0x802c3f <flahDisplay+0x3>
    4e6c:	70 93 40 2c 	sts	0x2C40, r23	; 0x802c40 <flahDisplay+0x4>
    4e70:	10 92 41 2c 	sts	0x2C41, r1	; 0x802c41 <flahDisplay+0x5>
    4e74:	10 92 42 2c 	sts	0x2C42, r1	; 0x802c42 <flahDisplay+0x6>
    4e78:	10 92 43 2c 	sts	0x2C43, r1	; 0x802c43 <flahDisplay+0x7>
    4e7c:	10 92 44 2c 	sts	0x2C44, r1	; 0x802c44 <flahDisplay+0x8>
    4e80:	2d e9       	ldi	r18, 0x9D	; 157
    4e82:	31 e0       	ldi	r19, 0x01	; 1
    4e84:	20 93 4d 2c 	sts	0x2C4D, r18	; 0x802c4d <flahDisplay+0x11>
    4e88:	30 93 4e 2c 	sts	0x2C4E, r19	; 0x802c4e <flahDisplay+0x12>
    4e8c:	10 92 3c 2c 	sts	0x2C3C, r1	; 0x802c3c <flahDisplay>
    4e90:	10 92 4f 2c 	sts	0x2C4F, r1	; 0x802c4f <flahDisplay+0x13>
    4e94:	10 92 50 2c 	sts	0x2C50, r1	; 0x802c50 <flahDisplay+0x14>
    4e98:	10 92 51 2c 	sts	0x2C51, r1	; 0x802c51 <flahDisplay+0x15>
    4e9c:	10 92 52 2c 	sts	0x2C52, r1	; 0x802c52 <flahDisplay+0x16>
    4ea0:	10 92 47 2c 	sts	0x2C47, r1	; 0x802c47 <flahDisplay+0xb>
    4ea4:	10 92 48 2c 	sts	0x2C48, r1	; 0x802c48 <flahDisplay+0xc>
    4ea8:	10 92 49 2c 	sts	0x2C49, r1	; 0x802c49 <flahDisplay+0xd>
    4eac:	10 92 4a 2c 	sts	0x2C4A, r1	; 0x802c4a <flahDisplay+0xe>
    4eb0:	c0 93 60 2c 	sts	0x2C60, r28	; 0x802c60 <tempRiseCheck+0x9>
    4eb4:	d0 93 61 2c 	sts	0x2C61, r29	; 0x802c61 <tempRiseCheck+0xa>
    4eb8:	40 e3       	ldi	r20, 0x30	; 48
    4eba:	55 e7       	ldi	r21, 0x75	; 117
    4ebc:	60 e0       	ldi	r22, 0x00	; 0
    4ebe:	70 e0       	ldi	r23, 0x00	; 0
    4ec0:	40 93 58 2c 	sts	0x2C58, r20	; 0x802c58 <tempRiseCheck+0x1>
    4ec4:	50 93 59 2c 	sts	0x2C59, r21	; 0x802c59 <tempRiseCheck+0x2>
    4ec8:	60 93 5a 2c 	sts	0x2C5A, r22	; 0x802c5a <tempRiseCheck+0x3>
    4ecc:	70 93 5b 2c 	sts	0x2C5B, r23	; 0x802c5b <tempRiseCheck+0x4>
    4ed0:	10 92 5c 2c 	sts	0x2C5C, r1	; 0x802c5c <tempRiseCheck+0x5>
    4ed4:	10 92 5d 2c 	sts	0x2C5D, r1	; 0x802c5d <tempRiseCheck+0x6>
    4ed8:	10 92 5e 2c 	sts	0x2C5E, r1	; 0x802c5e <tempRiseCheck+0x7>
    4edc:	10 92 5f 2c 	sts	0x2C5F, r1	; 0x802c5f <tempRiseCheck+0x8>
    4ee0:	28 ea       	ldi	r18, 0xA8	; 168
    4ee2:	31 e0       	ldi	r19, 0x01	; 1
    4ee4:	20 93 68 2c 	sts	0x2C68, r18	; 0x802c68 <tempRiseCheck+0x11>
    4ee8:	30 93 69 2c 	sts	0x2C69, r19	; 0x802c69 <tempRiseCheck+0x12>
    4eec:	10 92 57 2c 	sts	0x2C57, r1	; 0x802c57 <tempRiseCheck>
    4ef0:	10 92 6a 2c 	sts	0x2C6A, r1	; 0x802c6a <tempRiseCheck+0x13>
    4ef4:	10 92 6b 2c 	sts	0x2C6B, r1	; 0x802c6b <tempRiseCheck+0x14>
    4ef8:	10 92 6c 2c 	sts	0x2C6C, r1	; 0x802c6c <tempRiseCheck+0x15>
    4efc:	10 92 6d 2c 	sts	0x2C6D, r1	; 0x802c6d <tempRiseCheck+0x16>
    4f00:	10 92 62 2c 	sts	0x2C62, r1	; 0x802c62 <tempRiseCheck+0xb>
    4f04:	10 92 63 2c 	sts	0x2C63, r1	; 0x802c63 <tempRiseCheck+0xc>
    4f08:	10 92 64 2c 	sts	0x2C64, r1	; 0x802c64 <tempRiseCheck+0xd>
    4f0c:	10 92 65 2c 	sts	0x2C65, r1	; 0x802c65 <tempRiseCheck+0xe>
    4f10:	c0 93 7b 2c 	sts	0x2C7B, r28	; 0x802c7b <toggle_ticker+0x9>
    4f14:	d0 93 7c 2c 	sts	0x2C7C, r29	; 0x802c7c <toggle_ticker+0xa>
    4f18:	80 93 73 2c 	sts	0x2C73, r24	; 0x802c73 <toggle_ticker+0x1>
    4f1c:	90 93 74 2c 	sts	0x2C74, r25	; 0x802c74 <toggle_ticker+0x2>
    4f20:	a0 93 75 2c 	sts	0x2C75, r26	; 0x802c75 <toggle_ticker+0x3>
    4f24:	b0 93 76 2c 	sts	0x2C76, r27	; 0x802c76 <toggle_ticker+0x4>
    4f28:	10 92 77 2c 	sts	0x2C77, r1	; 0x802c77 <toggle_ticker+0x5>
    4f2c:	10 92 78 2c 	sts	0x2C78, r1	; 0x802c78 <toggle_ticker+0x6>
    4f30:	10 92 79 2c 	sts	0x2C79, r1	; 0x802c79 <toggle_ticker+0x7>
    4f34:	10 92 7a 2c 	sts	0x2C7A, r1	; 0x802c7a <toggle_ticker+0x8>
    4f38:	8f ec       	ldi	r24, 0xCF	; 207
    4f3a:	91 e0       	ldi	r25, 0x01	; 1
    4f3c:	80 93 83 2c 	sts	0x2C83, r24	; 0x802c83 <toggle_ticker+0x11>
    4f40:	90 93 84 2c 	sts	0x2C84, r25	; 0x802c84 <toggle_ticker+0x12>
    4f44:	10 92 72 2c 	sts	0x2C72, r1	; 0x802c72 <toggle_ticker>
    4f48:	10 92 85 2c 	sts	0x2C85, r1	; 0x802c85 <toggle_ticker+0x13>
    4f4c:	10 92 86 2c 	sts	0x2C86, r1	; 0x802c86 <toggle_ticker+0x14>
    4f50:	10 92 87 2c 	sts	0x2C87, r1	; 0x802c87 <toggle_ticker+0x15>
    4f54:	10 92 88 2c 	sts	0x2C88, r1	; 0x802c88 <toggle_ticker+0x16>
    4f58:	10 92 7d 2c 	sts	0x2C7D, r1	; 0x802c7d <toggle_ticker+0xb>
    4f5c:	10 92 7e 2c 	sts	0x2C7E, r1	; 0x802c7e <toggle_ticker+0xc>
    4f60:	10 92 7f 2c 	sts	0x2C7F, r1	; 0x802c7f <toggle_ticker+0xd>
    4f64:	10 92 80 2c 	sts	0x2C80, r1	; 0x802c80 <toggle_ticker+0xe>
    4f68:	10 92 f4 2b 	sts	0x2BF4, r1	; 0x802bf4 <TEMP_READING+0x9>
    4f6c:	10 92 f5 2b 	sts	0x2BF5, r1	; 0x802bf5 <TEMP_READING+0xa>
    4f70:	80 e8       	ldi	r24, 0x80	; 128
    4f72:	c8 2e       	mov	r12, r24
    4f74:	84 e8       	ldi	r24, 0x84	; 132
    4f76:	d8 2e       	mov	r13, r24
    4f78:	8e e1       	ldi	r24, 0x1E	; 30
    4f7a:	e8 2e       	mov	r14, r24
    4f7c:	f1 2c       	mov	r15, r1
    4f7e:	c0 92 ec 2b 	sts	0x2BEC, r12	; 0x802bec <TEMP_READING+0x1>
    4f82:	d0 92 ed 2b 	sts	0x2BED, r13	; 0x802bed <TEMP_READING+0x2>
    4f86:	e0 92 ee 2b 	sts	0x2BEE, r14	; 0x802bee <TEMP_READING+0x3>
    4f8a:	f0 92 ef 2b 	sts	0x2BEF, r15	; 0x802bef <TEMP_READING+0x4>
    4f8e:	10 92 f0 2b 	sts	0x2BF0, r1	; 0x802bf0 <TEMP_READING+0x5>
    4f92:	10 92 f1 2b 	sts	0x2BF1, r1	; 0x802bf1 <TEMP_READING+0x6>
    4f96:	10 92 f2 2b 	sts	0x2BF2, r1	; 0x802bf2 <TEMP_READING+0x7>
    4f9a:	10 92 f3 2b 	sts	0x2BF3, r1	; 0x802bf3 <TEMP_READING+0x8>
    4f9e:	88 e7       	ldi	r24, 0x78	; 120
    4fa0:	9f e0       	ldi	r25, 0x0F	; 15
    4fa2:	80 93 fc 2b 	sts	0x2BFC, r24	; 0x802bfc <TEMP_READING+0x11>
    4fa6:	90 93 fd 2b 	sts	0x2BFD, r25	; 0x802bfd <TEMP_READING+0x12>
    4faa:	10 92 eb 2b 	sts	0x2BEB, r1	; 0x802beb <TEMP_READING>
    4fae:	10 92 fe 2b 	sts	0x2BFE, r1	; 0x802bfe <TEMP_READING+0x13>
    4fb2:	10 92 ff 2b 	sts	0x2BFF, r1	; 0x802bff <TEMP_READING+0x14>
    4fb6:	10 92 00 2c 	sts	0x2C00, r1	; 0x802c00 <TEMP_READING+0x15>
    4fba:	10 92 01 2c 	sts	0x2C01, r1	; 0x802c01 <TEMP_READING+0x16>
    4fbe:	10 92 f6 2b 	sts	0x2BF6, r1	; 0x802bf6 <TEMP_READING+0xb>
    4fc2:	10 92 f7 2b 	sts	0x2BF7, r1	; 0x802bf7 <TEMP_READING+0xc>
    4fc6:	10 92 f8 2b 	sts	0x2BF8, r1	; 0x802bf8 <TEMP_READING+0xd>
    4fca:	10 92 f9 2b 	sts	0x2BF9, r1	; 0x802bf9 <TEMP_READING+0xe>
    4fce:	10 92 0f 2c 	sts	0x2C0F, r1	; 0x802c0f <TEMP_Conversion+0x9>
    4fd2:	10 92 10 2c 	sts	0x2C10, r1	; 0x802c10 <TEMP_Conversion+0xa>
    4fd6:	80 ec       	ldi	r24, 0xC0	; 192
    4fd8:	96 ec       	ldi	r25, 0xC6	; 198
    4fda:	ad e2       	ldi	r26, 0x2D	; 45
    4fdc:	b0 e0       	ldi	r27, 0x00	; 0
    4fde:	80 93 07 2c 	sts	0x2C07, r24	; 0x802c07 <TEMP_Conversion+0x1>
    4fe2:	90 93 08 2c 	sts	0x2C08, r25	; 0x802c08 <TEMP_Conversion+0x2>
    4fe6:	a0 93 09 2c 	sts	0x2C09, r26	; 0x802c09 <TEMP_Conversion+0x3>
    4fea:	b0 93 0a 2c 	sts	0x2C0A, r27	; 0x802c0a <TEMP_Conversion+0x4>
    4fee:	10 92 0b 2c 	sts	0x2C0B, r1	; 0x802c0b <TEMP_Conversion+0x5>
    4ff2:	10 92 0c 2c 	sts	0x2C0C, r1	; 0x802c0c <TEMP_Conversion+0x6>
    4ff6:	10 92 0d 2c 	sts	0x2C0D, r1	; 0x802c0d <TEMP_Conversion+0x7>
    4ffa:	10 92 0e 2c 	sts	0x2C0E, r1	; 0x802c0e <TEMP_Conversion+0x8>
    4ffe:	87 e1       	ldi	r24, 0x17	; 23
    5000:	9f e0       	ldi	r25, 0x0F	; 15
    5002:	80 93 17 2c 	sts	0x2C17, r24	; 0x802c17 <TEMP_Conversion+0x11>
    5006:	90 93 18 2c 	sts	0x2C18, r25	; 0x802c18 <TEMP_Conversion+0x12>
    500a:	10 92 06 2c 	sts	0x2C06, r1	; 0x802c06 <TEMP_Conversion>
    500e:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <TEMP_Conversion+0x13>
    5012:	10 92 1a 2c 	sts	0x2C1A, r1	; 0x802c1a <TEMP_Conversion+0x14>
    5016:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <TEMP_Conversion+0x15>
    501a:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <TEMP_Conversion+0x16>
    501e:	10 92 11 2c 	sts	0x2C11, r1	; 0x802c11 <TEMP_Conversion+0xb>
    5022:	10 92 12 2c 	sts	0x2C12, r1	; 0x802c12 <TEMP_Conversion+0xc>
    5026:	10 92 13 2c 	sts	0x2C13, r1	; 0x802c13 <TEMP_Conversion+0xd>
    502a:	10 92 14 2c 	sts	0x2C14, r1	; 0x802c14 <TEMP_Conversion+0xe>
    502e:	10 92 2a 2c 	sts	0x2C2A, r1	; 0x802c2a <Intial_time_for_ktype_read_ticker+0x9>
    5032:	10 92 2b 2c 	sts	0x2C2B, r1	; 0x802c2b <Intial_time_for_ktype_read_ticker+0xa>
    5036:	80 e4       	ldi	r24, 0x40	; 64
    5038:	9b e4       	ldi	r25, 0x4B	; 75
    503a:	ac e4       	ldi	r26, 0x4C	; 76
    503c:	b0 e0       	ldi	r27, 0x00	; 0
    503e:	80 93 22 2c 	sts	0x2C22, r24	; 0x802c22 <Intial_time_for_ktype_read_ticker+0x1>
    5042:	90 93 23 2c 	sts	0x2C23, r25	; 0x802c23 <Intial_time_for_ktype_read_ticker+0x2>
    5046:	a0 93 24 2c 	sts	0x2C24, r26	; 0x802c24 <Intial_time_for_ktype_read_ticker+0x3>
    504a:	b0 93 25 2c 	sts	0x2C25, r27	; 0x802c25 <Intial_time_for_ktype_read_ticker+0x4>
    504e:	41 e0       	ldi	r20, 0x01	; 1
    5050:	50 e0       	ldi	r21, 0x00	; 0
    5052:	60 e0       	ldi	r22, 0x00	; 0
    5054:	70 e0       	ldi	r23, 0x00	; 0
    5056:	40 93 26 2c 	sts	0x2C26, r20	; 0x802c26 <Intial_time_for_ktype_read_ticker+0x5>
    505a:	50 93 27 2c 	sts	0x2C27, r21	; 0x802c27 <Intial_time_for_ktype_read_ticker+0x6>
    505e:	60 93 28 2c 	sts	0x2C28, r22	; 0x802c28 <Intial_time_for_ktype_read_ticker+0x7>
    5062:	70 93 29 2c 	sts	0x2C29, r23	; 0x802c29 <Intial_time_for_ktype_read_ticker+0x8>
    5066:	89 e9       	ldi	r24, 0x99	; 153
    5068:	91 e0       	ldi	r25, 0x01	; 1
    506a:	80 93 32 2c 	sts	0x2C32, r24	; 0x802c32 <Intial_time_for_ktype_read_ticker+0x11>
    506e:	90 93 33 2c 	sts	0x2C33, r25	; 0x802c33 <Intial_time_for_ktype_read_ticker+0x12>
    5072:	10 92 21 2c 	sts	0x2C21, r1	; 0x802c21 <Intial_time_for_ktype_read_ticker>
    5076:	10 92 34 2c 	sts	0x2C34, r1	; 0x802c34 <Intial_time_for_ktype_read_ticker+0x13>
    507a:	10 92 35 2c 	sts	0x2C35, r1	; 0x802c35 <Intial_time_for_ktype_read_ticker+0x14>
    507e:	10 92 36 2c 	sts	0x2C36, r1	; 0x802c36 <Intial_time_for_ktype_read_ticker+0x15>
    5082:	10 92 37 2c 	sts	0x2C37, r1	; 0x802c37 <Intial_time_for_ktype_read_ticker+0x16>
    5086:	10 92 2c 2c 	sts	0x2C2C, r1	; 0x802c2c <Intial_time_for_ktype_read_ticker+0xb>
    508a:	10 92 2d 2c 	sts	0x2C2D, r1	; 0x802c2d <Intial_time_for_ktype_read_ticker+0xc>
    508e:	10 92 2e 2c 	sts	0x2C2E, r1	; 0x802c2e <Intial_time_for_ktype_read_ticker+0xd>
    5092:	10 92 2f 2c 	sts	0x2C2F, r1	; 0x802c2f <Intial_time_for_ktype_read_ticker+0xe>
    5096:	10 92 d9 2b 	sts	0x2BD9, r1	; 0x802bd9 <BUZZ+0x9>
    509a:	10 92 da 2b 	sts	0x2BDA, r1	; 0x802bda <BUZZ+0xa>
    509e:	90 ea       	ldi	r25, 0xA0	; 160
    50a0:	89 2e       	mov	r8, r25
    50a2:	96 e8       	ldi	r25, 0x86	; 134
    50a4:	99 2e       	mov	r9, r25
    50a6:	aa 24       	eor	r10, r10
    50a8:	a3 94       	inc	r10
    50aa:	b1 2c       	mov	r11, r1
    50ac:	80 92 d1 2b 	sts	0x2BD1, r8	; 0x802bd1 <BUZZ+0x1>
    50b0:	90 92 d2 2b 	sts	0x2BD2, r9	; 0x802bd2 <BUZZ+0x2>
    50b4:	a0 92 d3 2b 	sts	0x2BD3, r10	; 0x802bd3 <BUZZ+0x3>
    50b8:	b0 92 d4 2b 	sts	0x2BD4, r11	; 0x802bd4 <BUZZ+0x4>
    50bc:	40 93 d5 2b 	sts	0x2BD5, r20	; 0x802bd5 <BUZZ+0x5>
    50c0:	50 93 d6 2b 	sts	0x2BD6, r21	; 0x802bd6 <BUZZ+0x6>
    50c4:	60 93 d7 2b 	sts	0x2BD7, r22	; 0x802bd7 <BUZZ+0x7>
    50c8:	70 93 d8 2b 	sts	0x2BD8, r23	; 0x802bd8 <BUZZ+0x8>
    50cc:	84 e0       	ldi	r24, 0x04	; 4
    50ce:	93 e1       	ldi	r25, 0x13	; 19
    50d0:	80 93 e1 2b 	sts	0x2BE1, r24	; 0x802be1 <BUZZ+0x11>
    50d4:	90 93 e2 2b 	sts	0x2BE2, r25	; 0x802be2 <BUZZ+0x12>
    50d8:	10 92 d0 2b 	sts	0x2BD0, r1	; 0x802bd0 <BUZZ>
    50dc:	10 92 e3 2b 	sts	0x2BE3, r1	; 0x802be3 <BUZZ+0x13>
    50e0:	10 92 e4 2b 	sts	0x2BE4, r1	; 0x802be4 <BUZZ+0x14>
    50e4:	10 92 e5 2b 	sts	0x2BE5, r1	; 0x802be5 <BUZZ+0x15>
    50e8:	10 92 e6 2b 	sts	0x2BE6, r1	; 0x802be6 <BUZZ+0x16>
    50ec:	10 92 db 2b 	sts	0x2BDB, r1	; 0x802bdb <BUZZ+0xb>
    50f0:	10 92 dc 2b 	sts	0x2BDC, r1	; 0x802bdc <BUZZ+0xc>
    50f4:	10 92 dd 2b 	sts	0x2BDD, r1	; 0x802bdd <BUZZ+0xd>
    50f8:	10 92 de 2b 	sts	0x2BDE, r1	; 0x802bde <BUZZ+0xe>
    50fc:	10 92 be 2b 	sts	0x2BBE, r1	; 0x802bbe <Toggle1+0x9>
    5100:	10 92 bf 2b 	sts	0x2BBF, r1	; 0x802bbf <Toggle1+0xa>
    5104:	80 e4       	ldi	r24, 0x40	; 64
    5106:	92 e4       	ldi	r25, 0x42	; 66
    5108:	af e0       	ldi	r26, 0x0F	; 15
    510a:	b0 e0       	ldi	r27, 0x00	; 0
    510c:	80 93 b6 2b 	sts	0x2BB6, r24	; 0x802bb6 <Toggle1+0x1>
    5110:	90 93 b7 2b 	sts	0x2BB7, r25	; 0x802bb7 <Toggle1+0x2>
    5114:	a0 93 b8 2b 	sts	0x2BB8, r26	; 0x802bb8 <Toggle1+0x3>
    5118:	b0 93 b9 2b 	sts	0x2BB9, r27	; 0x802bb9 <Toggle1+0x4>
    511c:	10 92 ba 2b 	sts	0x2BBA, r1	; 0x802bba <Toggle1+0x5>
    5120:	10 92 bb 2b 	sts	0x2BBB, r1	; 0x802bbb <Toggle1+0x6>
    5124:	10 92 bc 2b 	sts	0x2BBC, r1	; 0x802bbc <Toggle1+0x7>
    5128:	10 92 bd 2b 	sts	0x2BBD, r1	; 0x802bbd <Toggle1+0x8>
    512c:	2a e7       	ldi	r18, 0x7A	; 122
    512e:	31 e1       	ldi	r19, 0x11	; 17
    5130:	20 93 c6 2b 	sts	0x2BC6, r18	; 0x802bc6 <Toggle1+0x11>
    5134:	30 93 c7 2b 	sts	0x2BC7, r19	; 0x802bc7 <Toggle1+0x12>
    5138:	10 92 b5 2b 	sts	0x2BB5, r1	; 0x802bb5 <Toggle1>
    513c:	10 92 c8 2b 	sts	0x2BC8, r1	; 0x802bc8 <Toggle1+0x13>
    5140:	10 92 c9 2b 	sts	0x2BC9, r1	; 0x802bc9 <Toggle1+0x14>
    5144:	10 92 ca 2b 	sts	0x2BCA, r1	; 0x802bca <Toggle1+0x15>
    5148:	10 92 cb 2b 	sts	0x2BCB, r1	; 0x802bcb <Toggle1+0x16>
    514c:	10 92 c0 2b 	sts	0x2BC0, r1	; 0x802bc0 <Toggle1+0xb>
    5150:	10 92 c1 2b 	sts	0x2BC1, r1	; 0x802bc1 <Toggle1+0xc>
    5154:	10 92 c2 2b 	sts	0x2BC2, r1	; 0x802bc2 <Toggle1+0xd>
    5158:	10 92 c3 2b 	sts	0x2BC3, r1	; 0x802bc3 <Toggle1+0xe>
    515c:	10 92 a3 2b 	sts	0x2BA3, r1	; 0x802ba3 <PID_EXE+0x9>
    5160:	10 92 a4 2b 	sts	0x2BA4, r1	; 0x802ba4 <PID_EXE+0xa>
    5164:	20 e8       	ldi	r18, 0x80	; 128
    5166:	42 2e       	mov	r4, r18
    5168:	2a e1       	ldi	r18, 0x1A	; 26
    516a:	52 2e       	mov	r5, r18
    516c:	26 e0       	ldi	r18, 0x06	; 6
    516e:	62 2e       	mov	r6, r18
    5170:	71 2c       	mov	r7, r1
    5172:	40 92 9b 2b 	sts	0x2B9B, r4	; 0x802b9b <PID_EXE+0x1>
    5176:	50 92 9c 2b 	sts	0x2B9C, r5	; 0x802b9c <PID_EXE+0x2>
    517a:	60 92 9d 2b 	sts	0x2B9D, r6	; 0x802b9d <PID_EXE+0x3>
    517e:	70 92 9e 2b 	sts	0x2B9E, r7	; 0x802b9e <PID_EXE+0x4>
    5182:	10 92 9f 2b 	sts	0x2B9F, r1	; 0x802b9f <PID_EXE+0x5>
    5186:	10 92 a0 2b 	sts	0x2BA0, r1	; 0x802ba0 <PID_EXE+0x6>
    518a:	10 92 a1 2b 	sts	0x2BA1, r1	; 0x802ba1 <PID_EXE+0x7>
    518e:	10 92 a2 2b 	sts	0x2BA2, r1	; 0x802ba2 <PID_EXE+0x8>
    5192:	29 e8       	ldi	r18, 0x89	; 137
    5194:	31 e1       	ldi	r19, 0x11	; 17
    5196:	20 93 ab 2b 	sts	0x2BAB, r18	; 0x802bab <PID_EXE+0x11>
    519a:	30 93 ac 2b 	sts	0x2BAC, r19	; 0x802bac <PID_EXE+0x12>
    519e:	10 92 9a 2b 	sts	0x2B9A, r1	; 0x802b9a <PID_EXE>
    51a2:	10 92 ad 2b 	sts	0x2BAD, r1	; 0x802bad <PID_EXE+0x13>
    51a6:	10 92 ae 2b 	sts	0x2BAE, r1	; 0x802bae <PID_EXE+0x14>
    51aa:	10 92 af 2b 	sts	0x2BAF, r1	; 0x802baf <PID_EXE+0x15>
    51ae:	10 92 b0 2b 	sts	0x2BB0, r1	; 0x802bb0 <PID_EXE+0x16>
    51b2:	10 92 a5 2b 	sts	0x2BA5, r1	; 0x802ba5 <PID_EXE+0xb>
    51b6:	10 92 a6 2b 	sts	0x2BA6, r1	; 0x802ba6 <PID_EXE+0xc>
    51ba:	10 92 a7 2b 	sts	0x2BA7, r1	; 0x802ba7 <PID_EXE+0xd>
    51be:	10 92 a8 2b 	sts	0x2BA8, r1	; 0x802ba8 <PID_EXE+0xe>
    51c2:	10 92 88 2b 	sts	0x2B88, r1	; 0x802b88 <TEMP_UPDATE+0x9>
    51c6:	10 92 89 2b 	sts	0x2B89, r1	; 0x802b89 <TEMP_UPDATE+0xa>
    51ca:	80 92 80 2b 	sts	0x2B80, r8	; 0x802b80 <TEMP_UPDATE+0x1>
    51ce:	90 92 81 2b 	sts	0x2B81, r9	; 0x802b81 <TEMP_UPDATE+0x2>
    51d2:	a0 92 82 2b 	sts	0x2B82, r10	; 0x802b82 <TEMP_UPDATE+0x3>
    51d6:	b0 92 83 2b 	sts	0x2B83, r11	; 0x802b83 <TEMP_UPDATE+0x4>
    51da:	10 92 84 2b 	sts	0x2B84, r1	; 0x802b84 <TEMP_UPDATE+0x5>
    51de:	10 92 85 2b 	sts	0x2B85, r1	; 0x802b85 <TEMP_UPDATE+0x6>
    51e2:	10 92 86 2b 	sts	0x2B86, r1	; 0x802b86 <TEMP_UPDATE+0x7>
    51e6:	10 92 87 2b 	sts	0x2B87, r1	; 0x802b87 <TEMP_UPDATE+0x8>
    51ea:	23 ed       	ldi	r18, 0xD3	; 211
    51ec:	3f e0       	ldi	r19, 0x0F	; 15
    51ee:	20 93 90 2b 	sts	0x2B90, r18	; 0x802b90 <TEMP_UPDATE+0x11>
    51f2:	30 93 91 2b 	sts	0x2B91, r19	; 0x802b91 <TEMP_UPDATE+0x12>
    51f6:	10 92 7f 2b 	sts	0x2B7F, r1	; 0x802b7f <TEMP_UPDATE>
    51fa:	10 92 92 2b 	sts	0x2B92, r1	; 0x802b92 <TEMP_UPDATE+0x13>
    51fe:	10 92 93 2b 	sts	0x2B93, r1	; 0x802b93 <TEMP_UPDATE+0x14>
    5202:	10 92 94 2b 	sts	0x2B94, r1	; 0x802b94 <TEMP_UPDATE+0x15>
    5206:	10 92 95 2b 	sts	0x2B95, r1	; 0x802b95 <TEMP_UPDATE+0x16>
    520a:	10 92 8a 2b 	sts	0x2B8A, r1	; 0x802b8a <TEMP_UPDATE+0xb>
    520e:	10 92 8b 2b 	sts	0x2B8B, r1	; 0x802b8b <TEMP_UPDATE+0xc>
    5212:	10 92 8c 2b 	sts	0x2B8C, r1	; 0x802b8c <TEMP_UPDATE+0xd>
    5216:	10 92 8d 2b 	sts	0x2B8D, r1	; 0x802b8d <TEMP_UPDATE+0xe>
    521a:	10 92 6d 2b 	sts	0x2B6D, r1	; 0x802b6d <BUZZ_TICK1+0x9>
    521e:	10 92 6e 2b 	sts	0x2B6E, r1	; 0x802b6e <BUZZ_TICK1+0xa>
    5222:	c0 92 65 2b 	sts	0x2B65, r12	; 0x802b65 <BUZZ_TICK1+0x1>
    5226:	d0 92 66 2b 	sts	0x2B66, r13	; 0x802b66 <BUZZ_TICK1+0x2>
    522a:	e0 92 67 2b 	sts	0x2B67, r14	; 0x802b67 <BUZZ_TICK1+0x3>
    522e:	f0 92 68 2b 	sts	0x2B68, r15	; 0x802b68 <BUZZ_TICK1+0x4>
    5232:	10 92 69 2b 	sts	0x2B69, r1	; 0x802b69 <BUZZ_TICK1+0x5>
    5236:	10 92 6a 2b 	sts	0x2B6A, r1	; 0x802b6a <BUZZ_TICK1+0x6>
    523a:	10 92 6b 2b 	sts	0x2B6B, r1	; 0x802b6b <BUZZ_TICK1+0x7>
    523e:	10 92 6c 2b 	sts	0x2B6C, r1	; 0x802b6c <BUZZ_TICK1+0x8>
    5242:	28 e5       	ldi	r18, 0x58	; 88
    5244:	31 e1       	ldi	r19, 0x11	; 17
    5246:	20 93 75 2b 	sts	0x2B75, r18	; 0x802b75 <BUZZ_TICK1+0x11>
    524a:	30 93 76 2b 	sts	0x2B76, r19	; 0x802b76 <BUZZ_TICK1+0x12>
    524e:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    5252:	10 92 77 2b 	sts	0x2B77, r1	; 0x802b77 <BUZZ_TICK1+0x13>
    5256:	10 92 78 2b 	sts	0x2B78, r1	; 0x802b78 <BUZZ_TICK1+0x14>
    525a:	10 92 79 2b 	sts	0x2B79, r1	; 0x802b79 <BUZZ_TICK1+0x15>
    525e:	10 92 7a 2b 	sts	0x2B7A, r1	; 0x802b7a <BUZZ_TICK1+0x16>
    5262:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    5266:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    526a:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    526e:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    5272:	10 92 52 2b 	sts	0x2B52, r1	; 0x802b52 <BUZZ_TICK2+0x9>
    5276:	10 92 53 2b 	sts	0x2B53, r1	; 0x802b53 <BUZZ_TICK2+0xa>
    527a:	80 93 4a 2b 	sts	0x2B4A, r24	; 0x802b4a <BUZZ_TICK2+0x1>
    527e:	90 93 4b 2b 	sts	0x2B4B, r25	; 0x802b4b <BUZZ_TICK2+0x2>
    5282:	a0 93 4c 2b 	sts	0x2B4C, r26	; 0x802b4c <BUZZ_TICK2+0x3>
    5286:	b0 93 4d 2b 	sts	0x2B4D, r27	; 0x802b4d <BUZZ_TICK2+0x4>
    528a:	40 93 4e 2b 	sts	0x2B4E, r20	; 0x802b4e <BUZZ_TICK2+0x5>
    528e:	50 93 4f 2b 	sts	0x2B4F, r21	; 0x802b4f <BUZZ_TICK2+0x6>
    5292:	60 93 50 2b 	sts	0x2B50, r22	; 0x802b50 <BUZZ_TICK2+0x7>
    5296:	70 93 51 2b 	sts	0x2B51, r23	; 0x802b51 <BUZZ_TICK2+0x8>
    529a:	2f e5       	ldi	r18, 0x5F	; 95
    529c:	31 e1       	ldi	r19, 0x11	; 17
    529e:	20 93 5a 2b 	sts	0x2B5A, r18	; 0x802b5a <BUZZ_TICK2+0x11>
    52a2:	30 93 5b 2b 	sts	0x2B5B, r19	; 0x802b5b <BUZZ_TICK2+0x12>
    52a6:	10 92 49 2b 	sts	0x2B49, r1	; 0x802b49 <BUZZ_TICK2>
    52aa:	10 92 5c 2b 	sts	0x2B5C, r1	; 0x802b5c <BUZZ_TICK2+0x13>
    52ae:	10 92 5d 2b 	sts	0x2B5D, r1	; 0x802b5d <BUZZ_TICK2+0x14>
    52b2:	10 92 5e 2b 	sts	0x2B5E, r1	; 0x802b5e <BUZZ_TICK2+0x15>
    52b6:	10 92 5f 2b 	sts	0x2B5F, r1	; 0x802b5f <BUZZ_TICK2+0x16>
    52ba:	10 92 54 2b 	sts	0x2B54, r1	; 0x802b54 <BUZZ_TICK2+0xb>
    52be:	10 92 55 2b 	sts	0x2B55, r1	; 0x802b55 <BUZZ_TICK2+0xc>
    52c2:	10 92 56 2b 	sts	0x2B56, r1	; 0x802b56 <BUZZ_TICK2+0xd>
    52c6:	10 92 57 2b 	sts	0x2B57, r1	; 0x802b57 <BUZZ_TICK2+0xe>
    52ca:	22 e0       	ldi	r18, 0x02	; 2
    52cc:	30 e0       	ldi	r19, 0x00	; 0
    52ce:	20 93 37 2b 	sts	0x2B37, r18	; 0x802b37 <DISP+0x9>
    52d2:	30 93 38 2b 	sts	0x2B38, r19	; 0x802b38 <DISP+0xa>
    52d6:	40 ea       	ldi	r20, 0xA0	; 160
    52d8:	5f e0       	ldi	r21, 0x0F	; 15
    52da:	60 e0       	ldi	r22, 0x00	; 0
    52dc:	70 e0       	ldi	r23, 0x00	; 0
    52de:	40 93 2f 2b 	sts	0x2B2F, r20	; 0x802b2f <DISP+0x1>
    52e2:	50 93 30 2b 	sts	0x2B30, r21	; 0x802b30 <DISP+0x2>
    52e6:	60 93 31 2b 	sts	0x2B31, r22	; 0x802b31 <DISP+0x3>
    52ea:	70 93 32 2b 	sts	0x2B32, r23	; 0x802b32 <DISP+0x4>
    52ee:	10 92 33 2b 	sts	0x2B33, r1	; 0x802b33 <DISP+0x5>
    52f2:	10 92 34 2b 	sts	0x2B34, r1	; 0x802b34 <DISP+0x6>
    52f6:	10 92 35 2b 	sts	0x2B35, r1	; 0x802b35 <DISP+0x7>
    52fa:	10 92 36 2b 	sts	0x2B36, r1	; 0x802b36 <DISP+0x8>
    52fe:	2a e1       	ldi	r18, 0x1A	; 26
    5300:	34 e2       	ldi	r19, 0x24	; 36
    5302:	20 93 3f 2b 	sts	0x2B3F, r18	; 0x802b3f <DISP+0x11>
    5306:	30 93 40 2b 	sts	0x2B40, r19	; 0x802b40 <DISP+0x12>
    530a:	10 92 2e 2b 	sts	0x2B2E, r1	; 0x802b2e <DISP>
    530e:	10 92 41 2b 	sts	0x2B41, r1	; 0x802b41 <DISP+0x13>
    5312:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <DISP+0x14>
    5316:	10 92 43 2b 	sts	0x2B43, r1	; 0x802b43 <DISP+0x15>
    531a:	10 92 44 2b 	sts	0x2B44, r1	; 0x802b44 <DISP+0x16>
    531e:	10 92 39 2b 	sts	0x2B39, r1	; 0x802b39 <DISP+0xb>
    5322:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <DISP+0xc>
    5326:	10 92 3b 2b 	sts	0x2B3B, r1	; 0x802b3b <DISP+0xd>
    532a:	10 92 3c 2b 	sts	0x2B3C, r1	; 0x802b3c <DISP+0xe>
    532e:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <AUTO+0x9>
    5332:	10 92 1d 2b 	sts	0x2B1D, r1	; 0x802b1d <AUTO+0xa>
    5336:	80 93 14 2b 	sts	0x2B14, r24	; 0x802b14 <AUTO+0x1>
    533a:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <AUTO+0x2>
    533e:	a0 93 16 2b 	sts	0x2B16, r26	; 0x802b16 <AUTO+0x3>
    5342:	b0 93 17 2b 	sts	0x2B17, r27	; 0x802b17 <AUTO+0x4>
    5346:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <AUTO+0x5>
    534a:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <AUTO+0x6>
    534e:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <AUTO+0x7>
    5352:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <AUTO+0x8>
    5356:	2a e7       	ldi	r18, 0x7A	; 122
    5358:	31 e0       	ldi	r19, 0x01	; 1
    535a:	20 93 24 2b 	sts	0x2B24, r18	; 0x802b24 <AUTO+0x11>
    535e:	30 93 25 2b 	sts	0x2B25, r19	; 0x802b25 <AUTO+0x12>
    5362:	10 92 13 2b 	sts	0x2B13, r1	; 0x802b13 <AUTO>
    5366:	10 92 26 2b 	sts	0x2B26, r1	; 0x802b26 <AUTO+0x13>
    536a:	10 92 27 2b 	sts	0x2B27, r1	; 0x802b27 <AUTO+0x14>
    536e:	10 92 28 2b 	sts	0x2B28, r1	; 0x802b28 <AUTO+0x15>
    5372:	10 92 29 2b 	sts	0x2B29, r1	; 0x802b29 <AUTO+0x16>
    5376:	10 92 1e 2b 	sts	0x2B1E, r1	; 0x802b1e <AUTO+0xb>
    537a:	10 92 1f 2b 	sts	0x2B1F, r1	; 0x802b1f <AUTO+0xc>
    537e:	10 92 20 2b 	sts	0x2B20, r1	; 0x802b20 <AUTO+0xd>
    5382:	10 92 21 2b 	sts	0x2B21, r1	; 0x802b21 <AUTO+0xe>
    5386:	10 92 01 2b 	sts	0x2B01, r1	; 0x802b01 <DATA_PRINT+0x9>
    538a:	10 92 02 2b 	sts	0x2B02, r1	; 0x802b02 <DATA_PRINT+0xa>
    538e:	80 93 f9 2a 	sts	0x2AF9, r24	; 0x802af9 <DATA_PRINT+0x1>
    5392:	90 93 fa 2a 	sts	0x2AFA, r25	; 0x802afa <DATA_PRINT+0x2>
    5396:	a0 93 fb 2a 	sts	0x2AFB, r26	; 0x802afb <DATA_PRINT+0x3>
    539a:	b0 93 fc 2a 	sts	0x2AFC, r27	; 0x802afc <DATA_PRINT+0x4>
    539e:	10 92 fd 2a 	sts	0x2AFD, r1	; 0x802afd <DATA_PRINT+0x5>
    53a2:	10 92 fe 2a 	sts	0x2AFE, r1	; 0x802afe <DATA_PRINT+0x6>
    53a6:	10 92 ff 2a 	sts	0x2AFF, r1	; 0x802aff <DATA_PRINT+0x7>
    53aa:	10 92 00 2b 	sts	0x2B00, r1	; 0x802b00 <DATA_PRINT+0x8>
    53ae:	88 e9       	ldi	r24, 0x98	; 152
    53b0:	91 e0       	ldi	r25, 0x01	; 1
    53b2:	80 93 09 2b 	sts	0x2B09, r24	; 0x802b09 <DATA_PRINT+0x11>
    53b6:	90 93 0a 2b 	sts	0x2B0A, r25	; 0x802b0a <DATA_PRINT+0x12>
    53ba:	10 92 f8 2a 	sts	0x2AF8, r1	; 0x802af8 <DATA_PRINT>
    53be:	10 92 0b 2b 	sts	0x2B0B, r1	; 0x802b0b <DATA_PRINT+0x13>
    53c2:	10 92 0c 2b 	sts	0x2B0C, r1	; 0x802b0c <DATA_PRINT+0x14>
    53c6:	10 92 0d 2b 	sts	0x2B0D, r1	; 0x802b0d <DATA_PRINT+0x15>
    53ca:	10 92 0e 2b 	sts	0x2B0E, r1	; 0x802b0e <DATA_PRINT+0x16>
    53ce:	10 92 03 2b 	sts	0x2B03, r1	; 0x802b03 <DATA_PRINT+0xb>
    53d2:	10 92 04 2b 	sts	0x2B04, r1	; 0x802b04 <DATA_PRINT+0xc>
    53d6:	10 92 05 2b 	sts	0x2B05, r1	; 0x802b05 <DATA_PRINT+0xd>
    53da:	10 92 06 2b 	sts	0x2B06, r1	; 0x802b06 <DATA_PRINT+0xe>
    53de:	63 e2       	ldi	r22, 0x23	; 35
    53e0:	70 e0       	ldi	r23, 0x00	; 0
    53e2:	89 ed       	ldi	r24, 0xD9	; 217
    53e4:	9a e2       	ldi	r25, 0x2A	; 42
    53e6:	0e 94 2f 09 	call	0x125e	; 0x125e <OneButton::OneButton(int, int) [clone .constprop.32]>
    53ea:	65 e2       	ldi	r22, 0x25	; 37
    53ec:	70 e0       	ldi	r23, 0x00	; 0
    53ee:	8a eb       	ldi	r24, 0xBA	; 186
    53f0:	9a e2       	ldi	r25, 0x2A	; 42
    53f2:	0e 94 2f 09 	call	0x125e	; 0x125e <OneButton::OneButton(int, int) [clone .constprop.32]>
    53f6:	64 e2       	ldi	r22, 0x24	; 36
    53f8:	70 e0       	ldi	r23, 0x00	; 0
    53fa:	8b e9       	ldi	r24, 0x9B	; 155
    53fc:	9a e2       	ldi	r25, 0x2A	; 42
    53fe:	0e 94 2f 09 	call	0x125e	; 0x125e <OneButton::OneButton(int, int) [clone .constprop.32]>
    5402:	62 e2       	ldi	r22, 0x22	; 34
    5404:	70 e0       	ldi	r23, 0x00	; 0
    5406:	8c e7       	ldi	r24, 0x7C	; 124
    5408:	9a e2       	ldi	r25, 0x2A	; 42
    540a:	0e 94 2f 09 	call	0x125e	; 0x125e <OneButton::OneButton(int, int) [clone .constprop.32]>
    540e:	c0 90 1e 28 	lds	r12, 0x281E	; 0x80281e <Kd>
    5412:	d0 90 1f 28 	lds	r13, 0x281F	; 0x80281f <Kd+0x1>
    5416:	e0 90 20 28 	lds	r14, 0x2820	; 0x802820 <Kd+0x2>
    541a:	f0 90 21 28 	lds	r15, 0x2821	; 0x802821 <Kd+0x3>
    541e:	80 90 1a 28 	lds	r8, 0x281A	; 0x80281a <Ki>
    5422:	90 90 1b 28 	lds	r9, 0x281B	; 0x80281b <Ki+0x1>
    5426:	a0 90 1c 28 	lds	r10, 0x281C	; 0x80281c <Ki+0x2>
    542a:	b0 90 1d 28 	lds	r11, 0x281D	; 0x80281d <Ki+0x3>
    542e:	40 90 16 28 	lds	r4, 0x2816	; 0x802816 <Kp>
    5432:	50 90 17 28 	lds	r5, 0x2817	; 0x802817 <Kp+0x1>
    5436:	60 90 18 28 	lds	r6, 0x2818	; 0x802818 <Kp+0x2>
    543a:	70 90 19 28 	lds	r7, 0x2819	; 0x802819 <Kp+0x3>
    543e:	88 e3       	ldi	r24, 0x38	; 56
    5440:	9a e2       	ldi	r25, 0x2A	; 42
    5442:	80 93 5e 2a 	sts	0x2A5E, r24	; 0x802a5e <myPID+0x1e>
    5446:	90 93 5f 2a 	sts	0x2A5F, r25	; 0x802a5f <myPID+0x1f>
    544a:	8c e3       	ldi	r24, 0x3C	; 60
    544c:	9a e2       	ldi	r25, 0x2A	; 42
    544e:	80 93 5c 2a 	sts	0x2A5C, r24	; 0x802a5c <myPID+0x1c>
    5452:	90 93 5d 2a 	sts	0x2A5D, r25	; 0x802a5d <myPID+0x1d>
    5456:	84 e3       	ldi	r24, 0x34	; 52
    5458:	9a e2       	ldi	r25, 0x2A	; 42
    545a:	80 93 60 2a 	sts	0x2A60, r24	; 0x802a60 <myPID+0x20>
    545e:	90 93 61 2a 	sts	0x2A61, r25	; 0x802a61 <myPID+0x21>
    5462:	10 92 7a 2a 	sts	0x2A7A, r1	; 0x802a7a <myPID+0x3a>
    5466:	10 92 72 2a 	sts	0x2A72, r1	; 0x802a72 <myPID+0x32>
    546a:	10 92 73 2a 	sts	0x2A73, r1	; 0x802a73 <myPID+0x33>
    546e:	10 92 74 2a 	sts	0x2A74, r1	; 0x802a74 <myPID+0x34>
    5472:	10 92 75 2a 	sts	0x2A75, r1	; 0x802a75 <myPID+0x35>
    5476:	80 e0       	ldi	r24, 0x00	; 0
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	af e7       	ldi	r26, 0x7F	; 127
    547c:	b3 e4       	ldi	r27, 0x43	; 67
    547e:	80 93 76 2a 	sts	0x2A76, r24	; 0x802a76 <myPID+0x36>
    5482:	90 93 77 2a 	sts	0x2A77, r25	; 0x802a77 <myPID+0x37>
    5486:	a0 93 78 2a 	sts	0x2A78, r26	; 0x802a78 <myPID+0x38>
    548a:	b0 93 79 2a 	sts	0x2A79, r27	; 0x802a79 <myPID+0x39>
    548e:	84 e6       	ldi	r24, 0x64	; 100
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	a0 e0       	ldi	r26, 0x00	; 0
    5494:	b0 e0       	ldi	r27, 0x00	; 0
    5496:	80 93 6e 2a 	sts	0x2A6E, r24	; 0x802a6e <myPID+0x2e>
    549a:	90 93 6f 2a 	sts	0x2A6F, r25	; 0x802a6f <myPID+0x2f>
    549e:	a0 93 70 2a 	sts	0x2A70, r26	; 0x802a70 <myPID+0x30>
    54a2:	b0 93 71 2a 	sts	0x2A71, r27	; 0x802a71 <myPID+0x31>
    54a6:	10 92 58 2a 	sts	0x2A58, r1	; 0x802a58 <myPID+0x18>
    54aa:	10 92 59 2a 	sts	0x2A59, r1	; 0x802a59 <myPID+0x19>
    54ae:	20 e0       	ldi	r18, 0x00	; 0
    54b0:	30 e0       	ldi	r19, 0x00	; 0
    54b2:	a9 01       	movw	r20, r18
    54b4:	c3 01       	movw	r24, r6
    54b6:	b2 01       	movw	r22, r4
    54b8:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    54bc:	87 fd       	sbrc	r24, 7
    54be:	59 c0       	rjmp	.+178    	; 0x5572 <global constructors keyed to 65535_0_Butn.cpp.o.4055+0x7d6>
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	30 e0       	ldi	r19, 0x00	; 0
    54c4:	a9 01       	movw	r20, r18
    54c6:	c5 01       	movw	r24, r10
    54c8:	b4 01       	movw	r22, r8
    54ca:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    54ce:	87 fd       	sbrc	r24, 7
    54d0:	50 c0       	rjmp	.+160    	; 0x5572 <global constructors keyed to 65535_0_Butn.cpp.o.4055+0x7d6>
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	30 e0       	ldi	r19, 0x00	; 0
    54d6:	a9 01       	movw	r20, r18
    54d8:	c7 01       	movw	r24, r14
    54da:	b6 01       	movw	r22, r12
    54dc:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    54e0:	87 fd       	sbrc	r24, 7
    54e2:	47 c0       	rjmp	.+142    	; 0x5572 <global constructors keyed to 65535_0_Butn.cpp.o.4055+0x7d6>
    54e4:	c0 93 5a 2a 	sts	0x2A5A, r28	; 0x802a5a <myPID+0x1a>
    54e8:	d0 93 5b 2a 	sts	0x2A5B, r29	; 0x802a5b <myPID+0x1b>
    54ec:	81 e0       	ldi	r24, 0x01	; 1
    54ee:	80 93 7b 2a 	sts	0x2A7B, r24	; 0x802a7b <myPID+0x3b>
    54f2:	40 92 40 2a 	sts	0x2A40, r4	; 0x802a40 <myPID>
    54f6:	50 92 41 2a 	sts	0x2A41, r5	; 0x802a41 <myPID+0x1>
    54fa:	60 92 42 2a 	sts	0x2A42, r6	; 0x802a42 <myPID+0x2>
    54fe:	70 92 43 2a 	sts	0x2A43, r7	; 0x802a43 <myPID+0x3>
    5502:	80 92 44 2a 	sts	0x2A44, r8	; 0x802a44 <myPID+0x4>
    5506:	90 92 45 2a 	sts	0x2A45, r9	; 0x802a45 <myPID+0x5>
    550a:	a0 92 46 2a 	sts	0x2A46, r10	; 0x802a46 <myPID+0x6>
    550e:	b0 92 47 2a 	sts	0x2A47, r11	; 0x802a47 <myPID+0x7>
    5512:	c0 92 48 2a 	sts	0x2A48, r12	; 0x802a48 <myPID+0x8>
    5516:	d0 92 49 2a 	sts	0x2A49, r13	; 0x802a49 <myPID+0x9>
    551a:	e0 92 4a 2a 	sts	0x2A4A, r14	; 0x802a4a <myPID+0xa>
    551e:	f0 92 4b 2a 	sts	0x2A4B, r15	; 0x802a4b <myPID+0xb>
    5522:	40 92 4c 2a 	sts	0x2A4C, r4	; 0x802a4c <myPID+0xc>
    5526:	50 92 4d 2a 	sts	0x2A4D, r5	; 0x802a4d <myPID+0xd>
    552a:	60 92 4e 2a 	sts	0x2A4E, r6	; 0x802a4e <myPID+0xe>
    552e:	70 92 4f 2a 	sts	0x2A4F, r7	; 0x802a4f <myPID+0xf>
    5532:	2d ec       	ldi	r18, 0xCD	; 205
    5534:	3c ec       	ldi	r19, 0xCC	; 204
    5536:	4c ec       	ldi	r20, 0xCC	; 204
    5538:	5d e3       	ldi	r21, 0x3D	; 61
    553a:	c5 01       	movw	r24, r10
    553c:	b4 01       	movw	r22, r8
    553e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    5542:	60 93 50 2a 	sts	0x2A50, r22	; 0x802a50 <myPID+0x10>
    5546:	70 93 51 2a 	sts	0x2A51, r23	; 0x802a51 <myPID+0x11>
    554a:	80 93 52 2a 	sts	0x2A52, r24	; 0x802a52 <myPID+0x12>
    554e:	90 93 53 2a 	sts	0x2A53, r25	; 0x802a53 <myPID+0x13>
    5552:	2d ec       	ldi	r18, 0xCD	; 205
    5554:	3c ec       	ldi	r19, 0xCC	; 204
    5556:	4c ec       	ldi	r20, 0xCC	; 204
    5558:	5d e3       	ldi	r21, 0x3D	; 61
    555a:	c7 01       	movw	r24, r14
    555c:	b6 01       	movw	r22, r12
    555e:	0e 94 96 39 	call	0x732c	; 0x732c <__divsf3>
    5562:	60 93 54 2a 	sts	0x2A54, r22	; 0x802a54 <myPID+0x14>
    5566:	70 93 55 2a 	sts	0x2A55, r23	; 0x802a55 <myPID+0x15>
    556a:	80 93 56 2a 	sts	0x2A56, r24	; 0x802a56 <myPID+0x16>
    556e:	90 93 57 2a 	sts	0x2A57, r25	; 0x802a57 <myPID+0x17>
    5572:	0e 94 39 0a 	call	0x1472	; 0x1472 <millis>
    5576:	c0 90 6e 2a 	lds	r12, 0x2A6E	; 0x802a6e <myPID+0x2e>
    557a:	d0 90 6f 2a 	lds	r13, 0x2A6F	; 0x802a6f <myPID+0x2f>
    557e:	e0 90 70 2a 	lds	r14, 0x2A70	; 0x802a70 <myPID+0x30>
    5582:	f0 90 71 2a 	lds	r15, 0x2A71	; 0x802a71 <myPID+0x31>
    5586:	6c 19       	sub	r22, r12
    5588:	7d 09       	sbc	r23, r13
    558a:	8e 09       	sbc	r24, r14
    558c:	9f 09       	sbc	r25, r15
    558e:	60 93 62 2a 	sts	0x2A62, r22	; 0x802a62 <myPID+0x22>
    5592:	70 93 63 2a 	sts	0x2A63, r23	; 0x802a63 <myPID+0x23>
    5596:	80 93 64 2a 	sts	0x2A64, r24	; 0x802a64 <myPID+0x24>
    559a:	90 93 65 2a 	sts	0x2A65, r25	; 0x802a65 <myPID+0x25>
    559e:	df 91       	pop	r29
    55a0:	cf 91       	pop	r28
    55a2:	ff 90       	pop	r15
    55a4:	ef 90       	pop	r14
    55a6:	df 90       	pop	r13
    55a8:	cf 90       	pop	r12
    55aa:	bf 90       	pop	r11
    55ac:	af 90       	pop	r10
    55ae:	9f 90       	pop	r9
    55b0:	8f 90       	pop	r8
    55b2:	7f 90       	pop	r7
    55b4:	6f 90       	pop	r6
    55b6:	5f 90       	pop	r5
    55b8:	4f 90       	pop	r4
    55ba:	08 95       	ret

000055bc <main>:
main():
    55bc:	cf 93       	push	r28
    55be:	df 93       	push	r29
    55c0:	00 d0       	rcall	.+0      	; 0x55c2 <main+0x6>
    55c2:	cd b7       	in	r28, 0x3d	; 61
    55c4:	de b7       	in	r29, 0x3e	; 62
init():
    55c6:	88 ed       	ldi	r24, 0xD8	; 216
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	84 bf       	out	0x34, r24	; 52
    55cc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
    55d0:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    55d4:	86 60       	ori	r24, 0x06	; 6
    55d6:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    55da:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
    55de:	81 60       	ori	r24, 0x01	; 1
    55e0:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
analogReference():
    55e4:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    55e8:	8f 7c       	andi	r24, 0xCF	; 207
    55ea:	80 65       	ori	r24, 0x50	; 80
    55ec:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
init():
    55f0:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
setup_timers():
    55f4:	82 e0       	ldi	r24, 0x02	; 2
    55f6:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f4a03>
    5600:	8e ef       	ldi	r24, 0xFE	; 254
    5602:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
    5606:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
    560a:	80 e8       	ldi	r24, 0x80	; 128
    560c:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7f4a2d>
    5610:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7f4a2b>
    5614:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
    5618:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7f4a2c>
    561c:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7f4a2a>
    5620:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f4a28>
    5624:	8b e0       	ldi	r24, 0x0B	; 11
    5626:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
    562a:	87 e0       	ldi	r24, 0x07	; 7
    562c:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7f45e5>
main():
    5630:	e0 e8       	ldi	r30, 0x80	; 128
    5632:	fa e0       	ldi	r31, 0x0A	; 10
setup_timers():
    5634:	37 e0       	ldi	r19, 0x07	; 7
    5636:	2e ef       	ldi	r18, 0xFE	; 254
    5638:	90 e8       	ldi	r25, 0x80	; 128
    563a:	85 e0       	ldi	r24, 0x05	; 5
    563c:	31 83       	std	Z+1, r19	; 0x01
    563e:	24 87       	std	Z+12, r18	; 0x0c
    5640:	95 87       	std	Z+13, r25	; 0x0d
    5642:	80 83       	st	Z, r24
    5644:	70 96       	adiw	r30, 0x10	; 16
    5646:	e0 3c       	cpi	r30, 0xC0	; 192
    5648:	4a e0       	ldi	r20, 0x0A	; 10
    564a:	f4 07       	cpc	r31, r20
    564c:	b9 f7       	brne	.-18     	; 0x563c <main+0x80>
init():
    564e:	10 92 a1 0a 	sts	0x0AA1, r1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7f4aa1>
    5652:	8f e7       	ldi	r24, 0x7F	; 127
    5654:	9e e3       	ldi	r25, 0x3E	; 62
    5656:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <__TEXT_REGION_LENGTH__+0x7f4aac>
    565a:	90 93 ad 0a 	sts	0x0AAD, r25	; 0x800aad <__TEXT_REGION_LENGTH__+0x7f4aad>
    565e:	80 91 a5 0a 	lds	r24, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
    5662:	81 60       	ori	r24, 0x01	; 1
    5664:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
    5668:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    566c:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    5670:	81 60       	ori	r24, 0x01	; 1
    5672:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    5676:	78 94       	sei
swap():
    5678:	81 e0       	ldi	r24, 0x01	; 1
    567a:	80 93 6a 29 	sts	0x296A, r24	; 0x80296a <Serial2+0x14>
setup():
    567e:	47 e2       	ldi	r20, 0x27	; 39
    5680:	66 e2       	ldi	r22, 0x26	; 38
    5682:	86 e5       	ldi	r24, 0x56	; 86
    5684:	99 e2       	ldi	r25, 0x29	; 41
    5686:	0e 94 80 07 	call	0xf00	; 0xf00 <UartClass::pins(unsigned char, unsigned char)>
    568a:	40 e8       	ldi	r20, 0x80	; 128
    568c:	55 e2       	ldi	r21, 0x25	; 37
    568e:	60 e0       	ldi	r22, 0x00	; 0
    5690:	70 e0       	ldi	r23, 0x00	; 0
    5692:	86 e5       	ldi	r24, 0x56	; 86
    5694:	99 e2       	ldi	r25, 0x29	; 41
    5696:	9b d8       	rcall	.-3786   	; 0x47ce <UartClass::begin(unsigned long)>
    5698:	10 92 49 28 	sts	0x2849, r1	; 0x802849 <lup>
    569c:	10 92 4a 28 	sts	0x284A, r1	; 0x80284a <lup+0x1>
    56a0:	10 92 4b 28 	sts	0x284B, r1	; 0x80284b <lup+0x2>
    56a4:	10 92 4c 28 	sts	0x284C, r1	; 0x80284c <lup+0x3>
    56a8:	10 92 62 28 	sts	0x2862, r1	; 0x802862 <RESUME_SET_TEMP>
    56ac:	10 92 63 28 	sts	0x2863, r1	; 0x802863 <RESUME_SET_TEMP+0x1>
    56b0:	10 92 52 28 	sts	0x2852, r1	; 0x802852 <TEMP_BUFF>
    56b4:	10 92 53 28 	sts	0x2853, r1	; 0x802853 <TEMP_BUFF+0x1>
    56b8:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <RESUME_Temp>
    56bc:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <RESUME_Temp+0x1>
    56c0:	10 92 64 28 	sts	0x2864, r1	; 0x802864 <TEMP_FLAG>
    56c4:	10 92 65 28 	sts	0x2865, r1	; 0x802865 <TEMP_FLAG+0x1>
    56c8:	10 92 56 28 	sts	0x2856, r1	; 0x802856 <ErroR>
    56cc:	10 92 57 28 	sts	0x2857, r1	; 0x802857 <ErroR+0x1>
    56d0:	83 e1       	ldi	r24, 0x13	; 19
    56d2:	9b e2       	ldi	r25, 0x2B	; 43
    56d4:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
    56d8:	88 ef       	ldi	r24, 0xF8	; 248
    56da:	9a e2       	ldi	r25, 0x2A	; 42
    56dc:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
SETUP():
    56e0:	61 e0       	ldi	r22, 0x01	; 1
    56e2:	8b e0       	ldi	r24, 0x0B	; 11
    56e4:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    56e8:	61 e0       	ldi	r22, 0x01	; 1
    56ea:	8a e0       	ldi	r24, 0x0A	; 10
    56ec:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    56f0:	61 e0       	ldi	r22, 0x01	; 1
    56f2:	89 e0       	ldi	r24, 0x09	; 9
    56f4:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    56f8:	61 e0       	ldi	r22, 0x01	; 1
    56fa:	88 e0       	ldi	r24, 0x08	; 8
    56fc:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5700:	61 e0       	ldi	r22, 0x01	; 1
    5702:	84 e0       	ldi	r24, 0x04	; 4
    5704:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5708:	61 e0       	ldi	r22, 0x01	; 1
    570a:	85 e0       	ldi	r24, 0x05	; 5
    570c:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5710:	61 e0       	ldi	r22, 0x01	; 1
    5712:	86 e0       	ldi	r24, 0x06	; 6
    5714:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5718:	61 e0       	ldi	r22, 0x01	; 1
    571a:	87 e0       	ldi	r24, 0x07	; 7
    571c:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5720:	61 e0       	ldi	r22, 0x01	; 1
    5722:	84 e1       	ldi	r24, 0x14	; 20
    5724:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5728:	61 e0       	ldi	r22, 0x01	; 1
    572a:	83 e1       	ldi	r24, 0x13	; 19
    572c:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5730:	61 e0       	ldi	r22, 0x01	; 1
    5732:	82 e1       	ldi	r24, 0x12	; 18
    5734:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5738:	61 e0       	ldi	r22, 0x01	; 1
    573a:	8e e1       	ldi	r24, 0x1E	; 30
    573c:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5740:	61 e0       	ldi	r22, 0x01	; 1
    5742:	80 e2       	ldi	r24, 0x20	; 32
    5744:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5748:	61 e0       	ldi	r22, 0x01	; 1
    574a:	8f e1       	ldi	r24, 0x1F	; 31
    574c:	0e 94 be 08 	call	0x117c	; 0x117c <pinMode>
    5750:	61 e0       	ldi	r22, 0x01	; 1
    5752:	8b e0       	ldi	r24, 0x0B	; 11
    5754:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    5758:	61 e0       	ldi	r22, 0x01	; 1
    575a:	8a e0       	ldi	r24, 0x0A	; 10
    575c:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    5760:	61 e0       	ldi	r22, 0x01	; 1
    5762:	89 e0       	ldi	r24, 0x09	; 9
    5764:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    5768:	61 e0       	ldi	r22, 0x01	; 1
    576a:	88 e0       	ldi	r24, 0x08	; 8
    576c:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    5770:	61 e0       	ldi	r22, 0x01	; 1
    5772:	84 e0       	ldi	r24, 0x04	; 4
    5774:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    5778:	61 e0       	ldi	r22, 0x01	; 1
    577a:	85 e0       	ldi	r24, 0x05	; 5
    577c:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    5780:	61 e0       	ldi	r22, 0x01	; 1
    5782:	86 e0       	ldi	r24, 0x06	; 6
    5784:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
    5788:	61 e0       	ldi	r22, 0x01	; 1
    578a:	87 e0       	ldi	r24, 0x07	; 7
    578c:	0e 94 2b 09 	call	0x1256	; 0x1256 <digitalWrite>
pinMode():
    5790:	61 e0       	ldi	r22, 0x01	; 1
    5792:	8c e0       	ldi	r24, 0x0C	; 12
    5794:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    5798:	61 e0       	ldi	r22, 0x01	; 1
    579a:	8d e0       	ldi	r24, 0x0D	; 13
    579c:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
digitalWrite():
    57a0:	60 e0       	ldi	r22, 0x00	; 0
    57a2:	8c e0       	ldi	r24, 0x0C	; 12
    57a4:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    57a8:	60 e0       	ldi	r22, 0x00	; 0
    57aa:	8d e0       	ldi	r24, 0x0D	; 13
    57ac:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
pinMode():
    57b0:	61 e0       	ldi	r22, 0x01	; 1
    57b2:	81 e2       	ldi	r24, 0x21	; 33
    57b4:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
digitalWrite():
    57b8:	60 e0       	ldi	r22, 0x00	; 0
    57ba:	81 e2       	ldi	r24, 0x21	; 33
    57bc:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
interval():
    57c0:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <tempRiseCheck+0x9>
    57c4:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <tempRiseCheck+0xa>
    57c8:	89 2b       	or	r24, r25
    57ca:	09 f4       	brne	.+2      	; 0x57ce <main+0x212>
    57cc:	a2 c0       	rjmp	.+324    	; 0x5912 <main+0x356>
    57ce:	80 e3       	ldi	r24, 0x30	; 48
    57d0:	95 e7       	ldi	r25, 0x75	; 117
    57d2:	a0 e0       	ldi	r26, 0x00	; 0
    57d4:	b0 e0       	ldi	r27, 0x00	; 0
    57d6:	80 93 58 2c 	sts	0x2C58, r24	; 0x802c58 <tempRiseCheck+0x1>
    57da:	90 93 59 2c 	sts	0x2C59, r25	; 0x802c59 <tempRiseCheck+0x2>
    57de:	a0 93 5a 2c 	sts	0x2C5A, r26	; 0x802c5a <tempRiseCheck+0x3>
    57e2:	b0 93 5b 2c 	sts	0x2C5B, r27	; 0x802c5b <tempRiseCheck+0x4>
SETUP():
    57e6:	8c e3       	ldi	r24, 0x3C	; 60
    57e8:	9c e2       	ldi	r25, 0x2C	; 44
    57ea:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
    57ee:	87 e5       	ldi	r24, 0x57	; 87
    57f0:	9c e2       	ldi	r25, 0x2C	; 44
    57f2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
    57f6:	82 e7       	ldi	r24, 0x72	; 114
    57f8:	9c e2       	ldi	r25, 0x2C	; 44
    57fa:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
    57fe:	80 ea       	ldi	r24, 0xA0	; 160
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5806:	91 e0       	ldi	r25, 0x01	; 1
    5808:	81 11       	cpse	r24, r1
    580a:	01 c0       	rjmp	.+2      	; 0x580e <main+0x252>
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <Inprocess_autoresume_flag>
pinMode():
    5812:	61 e0       	ldi	r22, 0x01	; 1
    5814:	8b e1       	ldi	r24, 0x1B	; 27
    5816:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    581a:	61 e0       	ldi	r22, 0x01	; 1
    581c:	8c e1       	ldi	r24, 0x1C	; 28
    581e:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    5822:	61 e0       	ldi	r22, 0x01	; 1
    5824:	8d e1       	ldi	r24, 0x1D	; 29
    5826:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    582a:	61 e0       	ldi	r22, 0x01	; 1
    582c:	8a e1       	ldi	r24, 0x1A	; 26
    582e:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    5832:	61 e0       	ldi	r22, 0x01	; 1
    5834:	85 e1       	ldi	r24, 0x15	; 21
    5836:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    583a:	61 e0       	ldi	r22, 0x01	; 1
    583c:	88 e1       	ldi	r24, 0x18	; 24
    583e:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
digitalWrite():
    5842:	60 e0       	ldi	r22, 0x00	; 0
    5844:	85 e1       	ldi	r24, 0x15	; 21
    5846:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    584a:	60 e0       	ldi	r22, 0x00	; 0
    584c:	88 e1       	ldi	r24, 0x18	; 24
    584e:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SETUP():
    5852:	60 91 0c 28 	lds	r22, 0x280C	; 0x80280c <WINDOW_SIZE>
    5856:	70 91 0d 28 	lds	r23, 0x280D	; 0x80280d <WINDOW_SIZE+0x1>
    585a:	07 2e       	mov	r0, r23
    585c:	00 0c       	add	r0, r0
    585e:	88 0b       	sbc	r24, r24
    5860:	99 0b       	sbc	r25, r25
    5862:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    5866:	6b 01       	movw	r12, r22
    5868:	7c 01       	movw	r14, r24
SetOutputLimits():
    586a:	20 e0       	ldi	r18, 0x00	; 0
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	a9 01       	movw	r20, r18
    5870:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    5874:	18 16       	cp	r1, r24
    5876:	0c f0       	brlt	.+2      	; 0x587a <main+0x2be>
    5878:	70 c0       	rjmp	.+224    	; 0x595a <main+0x39e>
    587a:	10 92 72 2a 	sts	0x2A72, r1	; 0x802a72 <myPID+0x32>
    587e:	10 92 73 2a 	sts	0x2A73, r1	; 0x802a73 <myPID+0x33>
    5882:	10 92 74 2a 	sts	0x2A74, r1	; 0x802a74 <myPID+0x34>
    5886:	10 92 75 2a 	sts	0x2A75, r1	; 0x802a75 <myPID+0x35>
    588a:	c0 92 76 2a 	sts	0x2A76, r12	; 0x802a76 <myPID+0x36>
    588e:	d0 92 77 2a 	sts	0x2A77, r13	; 0x802a77 <myPID+0x37>
    5892:	e0 92 78 2a 	sts	0x2A78, r14	; 0x802a78 <myPID+0x38>
    5896:	f0 92 79 2a 	sts	0x2A79, r15	; 0x802a79 <myPID+0x39>
    589a:	80 91 7a 2a 	lds	r24, 0x2A7A	; 0x802a7a <myPID+0x3a>
    589e:	88 23       	and	r24, r24
    58a0:	09 f4       	brne	.+2      	; 0x58a4 <main+0x2e8>
    58a2:	5b c0       	rjmp	.+182    	; 0x595a <main+0x39e>
    58a4:	00 91 5e 2a 	lds	r16, 0x2A5E	; 0x802a5e <myPID+0x1e>
    58a8:	10 91 5f 2a 	lds	r17, 0x2A5F	; 0x802a5f <myPID+0x1f>
    58ac:	f8 01       	movw	r30, r16
    58ae:	80 80       	ld	r8, Z
    58b0:	91 80       	ldd	r9, Z+1	; 0x01
    58b2:	a2 80       	ldd	r10, Z+2	; 0x02
    58b4:	b3 80       	ldd	r11, Z+3	; 0x03
    58b6:	a5 01       	movw	r20, r10
    58b8:	94 01       	movw	r18, r8
    58ba:	c7 01       	movw	r24, r14
    58bc:	b6 01       	movw	r22, r12
    58be:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    58c2:	87 ff       	sbrs	r24, 7
    58c4:	2b c0       	rjmp	.+86     	; 0x591c <main+0x360>
    58c6:	f8 01       	movw	r30, r16
    58c8:	c0 82       	st	Z, r12
    58ca:	d1 82       	std	Z+1, r13	; 0x01
    58cc:	e2 82       	std	Z+2, r14	; 0x02
    58ce:	f3 82       	std	Z+3, r15	; 0x03
    58d0:	80 90 66 2a 	lds	r8, 0x2A66	; 0x802a66 <myPID+0x26>
    58d4:	90 90 67 2a 	lds	r9, 0x2A67	; 0x802a67 <myPID+0x27>
    58d8:	a0 90 68 2a 	lds	r10, 0x2A68	; 0x802a68 <myPID+0x28>
    58dc:	b0 90 69 2a 	lds	r11, 0x2A69	; 0x802a69 <myPID+0x29>
    58e0:	c0 90 76 2a 	lds	r12, 0x2A76	; 0x802a76 <myPID+0x36>
    58e4:	d0 90 77 2a 	lds	r13, 0x2A77	; 0x802a77 <myPID+0x37>
    58e8:	e0 90 78 2a 	lds	r14, 0x2A78	; 0x802a78 <myPID+0x38>
    58ec:	f0 90 79 2a 	lds	r15, 0x2A79	; 0x802a79 <myPID+0x39>
    58f0:	a7 01       	movw	r20, r14
    58f2:	96 01       	movw	r18, r12
    58f4:	c5 01       	movw	r24, r10
    58f6:	b4 01       	movw	r22, r8
    58f8:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    58fc:	18 16       	cp	r1, r24
    58fe:	ec f4       	brge	.+58     	; 0x593a <main+0x37e>
    5900:	c0 92 66 2a 	sts	0x2A66, r12	; 0x802a66 <myPID+0x26>
    5904:	d0 92 67 2a 	sts	0x2A67, r13	; 0x802a67 <myPID+0x27>
    5908:	e0 92 68 2a 	sts	0x2A68, r14	; 0x802a68 <myPID+0x28>
    590c:	f0 92 69 2a 	sts	0x2A69, r15	; 0x802a69 <myPID+0x29>
    5910:	24 c0       	rjmp	.+72     	; 0x595a <main+0x39e>
main():
    5912:	80 e8       	ldi	r24, 0x80	; 128
    5914:	93 ec       	ldi	r25, 0xC3	; 195
    5916:	a9 ec       	ldi	r26, 0xC9	; 201
    5918:	b1 e0       	ldi	r27, 0x01	; 1
    591a:	5d cf       	rjmp	.-326    	; 0x57d6 <main+0x21a>
SetOutputLimits():
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	a9 01       	movw	r20, r18
    5922:	c5 01       	movw	r24, r10
    5924:	b4 01       	movw	r22, r8
    5926:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    592a:	87 ff       	sbrs	r24, 7
    592c:	d1 cf       	rjmp	.-94     	; 0x58d0 <main+0x314>
    592e:	f8 01       	movw	r30, r16
    5930:	10 82       	st	Z, r1
    5932:	11 82       	std	Z+1, r1	; 0x01
    5934:	12 82       	std	Z+2, r1	; 0x02
    5936:	13 82       	std	Z+3, r1	; 0x03
    5938:	cb cf       	rjmp	.-106    	; 0x58d0 <main+0x314>
    593a:	c0 90 72 2a 	lds	r12, 0x2A72	; 0x802a72 <myPID+0x32>
    593e:	d0 90 73 2a 	lds	r13, 0x2A73	; 0x802a73 <myPID+0x33>
    5942:	e0 90 74 2a 	lds	r14, 0x2A74	; 0x802a74 <myPID+0x34>
    5946:	f0 90 75 2a 	lds	r15, 0x2A75	; 0x802a75 <myPID+0x35>
    594a:	a7 01       	movw	r20, r14
    594c:	96 01       	movw	r18, r12
    594e:	c5 01       	movw	r24, r10
    5950:	b4 01       	movw	r22, r8
    5952:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    5956:	87 fd       	sbrc	r24, 7
    5958:	d3 cf       	rjmp	.-90     	; 0x5900 <main+0x344>
SETUP():
    595a:	0e 94 39 0a 	call	0x1472	; 0x1472 <millis>
    595e:	60 93 4f 29 	sts	0x294F, r22	; 0x80294f <WINDOW_START_TIME>
    5962:	70 93 50 29 	sts	0x2950, r23	; 0x802950 <WINDOW_START_TIME+0x1>
    5966:	80 93 51 29 	sts	0x2951, r24	; 0x802951 <WINDOW_START_TIME+0x2>
    596a:	90 93 52 29 	sts	0x2952, r25	; 0x802952 <WINDOW_START_TIME+0x3>
SetMode():
    596e:	80 91 7a 2a 	lds	r24, 0x2A7A	; 0x802a7a <myPID+0x3a>
    5972:	81 11       	cpse	r24, r1
    5974:	49 c0       	rjmp	.+146    	; 0x5a08 <main+0x44c>
Initialize():
    5976:	e0 91 5e 2a 	lds	r30, 0x2A5E	; 0x802a5e <myPID+0x1e>
    597a:	f0 91 5f 2a 	lds	r31, 0x2A5F	; 0x802a5f <myPID+0x1f>
    597e:	c0 80       	ld	r12, Z
    5980:	d1 80       	ldd	r13, Z+1	; 0x01
    5982:	e2 80       	ldd	r14, Z+2	; 0x02
    5984:	f3 80       	ldd	r15, Z+3	; 0x03
    5986:	c0 92 66 2a 	sts	0x2A66, r12	; 0x802a66 <myPID+0x26>
    598a:	d0 92 67 2a 	sts	0x2A67, r13	; 0x802a67 <myPID+0x27>
    598e:	e0 92 68 2a 	sts	0x2A68, r14	; 0x802a68 <myPID+0x28>
    5992:	f0 92 69 2a 	sts	0x2A69, r15	; 0x802a69 <myPID+0x29>
    5996:	e0 91 5c 2a 	lds	r30, 0x2A5C	; 0x802a5c <myPID+0x1c>
    599a:	f0 91 5d 2a 	lds	r31, 0x2A5D	; 0x802a5d <myPID+0x1d>
    599e:	80 81       	ld	r24, Z
    59a0:	91 81       	ldd	r25, Z+1	; 0x01
    59a2:	a2 81       	ldd	r26, Z+2	; 0x02
    59a4:	b3 81       	ldd	r27, Z+3	; 0x03
    59a6:	80 93 6a 2a 	sts	0x2A6A, r24	; 0x802a6a <myPID+0x2a>
    59aa:	90 93 6b 2a 	sts	0x2A6B, r25	; 0x802a6b <myPID+0x2b>
    59ae:	a0 93 6c 2a 	sts	0x2A6C, r26	; 0x802a6c <myPID+0x2c>
    59b2:	b0 93 6d 2a 	sts	0x2A6D, r27	; 0x802a6d <myPID+0x2d>
    59b6:	80 90 76 2a 	lds	r8, 0x2A76	; 0x802a76 <myPID+0x36>
    59ba:	90 90 77 2a 	lds	r9, 0x2A77	; 0x802a77 <myPID+0x37>
    59be:	a0 90 78 2a 	lds	r10, 0x2A78	; 0x802a78 <myPID+0x38>
    59c2:	b0 90 79 2a 	lds	r11, 0x2A79	; 0x802a79 <myPID+0x39>
    59c6:	a5 01       	movw	r20, r10
    59c8:	94 01       	movw	r18, r8
    59ca:	c7 01       	movw	r24, r14
    59cc:	b6 01       	movw	r22, r12
    59ce:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    59d2:	18 16       	cp	r1, r24
    59d4:	4c f4       	brge	.+18     	; 0x59e8 <main+0x42c>
    59d6:	80 92 66 2a 	sts	0x2A66, r8	; 0x802a66 <myPID+0x26>
    59da:	90 92 67 2a 	sts	0x2A67, r9	; 0x802a67 <myPID+0x27>
    59de:	a0 92 68 2a 	sts	0x2A68, r10	; 0x802a68 <myPID+0x28>
    59e2:	b0 92 69 2a 	sts	0x2A69, r11	; 0x802a69 <myPID+0x29>
    59e6:	10 c0       	rjmp	.+32     	; 0x5a08 <main+0x44c>
    59e8:	80 90 72 2a 	lds	r8, 0x2A72	; 0x802a72 <myPID+0x32>
    59ec:	90 90 73 2a 	lds	r9, 0x2A73	; 0x802a73 <myPID+0x33>
    59f0:	a0 90 74 2a 	lds	r10, 0x2A74	; 0x802a74 <myPID+0x34>
    59f4:	b0 90 75 2a 	lds	r11, 0x2A75	; 0x802a75 <myPID+0x35>
    59f8:	a5 01       	movw	r20, r10
    59fa:	94 01       	movw	r18, r8
    59fc:	c7 01       	movw	r24, r14
    59fe:	b6 01       	movw	r22, r12
    5a00:	0e 94 92 39 	call	0x7324	; 0x7324 <__cmpsf2>
    5a04:	87 fd       	sbrc	r24, 7
    5a06:	e7 cf       	rjmp	.-50     	; 0x59d6 <main+0x41a>
SetMode():
    5a08:	11 e0       	ldi	r17, 0x01	; 1
    5a0a:	10 93 7a 2a 	sts	0x2A7A, r17	; 0x802a7a <myPID+0x3a>
SETUP():
    5a0e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    5a12:	f8 94       	cli
    5a14:	10 93 0a 0a 	sts	0x0A0A, r17	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7f4a0a>
    5a18:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    5a1c:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
    5a20:	8e 7f       	andi	r24, 0xFE	; 254
    5a22:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
    5a26:	8a ef       	ldi	r24, 0xFA	; 250
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
    5a2e:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
    5a32:	8f e0       	ldi	r24, 0x0F	; 15
    5a34:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
    5a38:	78 94       	sei
swap():
    5a3a:	82 e0       	ldi	r24, 0x02	; 2
    5a3c:	80 93 f7 29 	sts	0x29F7, r24	; 0x8029f7 <SPI+0x4>
Setup():
    5a40:	47 e2       	ldi	r20, 0x27	; 39
    5a42:	66 e2       	ldi	r22, 0x26	; 38
    5a44:	86 e5       	ldi	r24, 0x56	; 86
    5a46:	99 e2       	ldi	r25, 0x29	; 41
    5a48:	0e 94 80 07 	call	0xf00	; 0xf00 <UartClass::pins(unsigned char, unsigned char)>
    5a4c:	40 e8       	ldi	r20, 0x80	; 128
    5a4e:	55 e2       	ldi	r21, 0x25	; 37
    5a50:	60 e0       	ldi	r22, 0x00	; 0
    5a52:	70 e0       	ldi	r23, 0x00	; 0
    5a54:	86 e5       	ldi	r24, 0x56	; 86
    5a56:	99 e2       	ldi	r25, 0x29	; 41
    5a58:	0e 94 e7 23 	call	0x47ce	; 0x47ce <UartClass::begin(unsigned long)>
pinMode():
    5a5c:	61 e0       	ldi	r22, 0x01	; 1
    5a5e:	8f e0       	ldi	r24, 0x0F	; 15
    5a60:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    5a64:	61 e0       	ldi	r22, 0x01	; 1
    5a66:	80 e1       	ldi	r24, 0x10	; 16
    5a68:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    5a6c:	61 e0       	ldi	r22, 0x01	; 1
    5a6e:	83 e0       	ldi	r24, 0x03	; 3
    5a70:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    5a74:	61 e0       	ldi	r22, 0x01	; 1
    5a76:	82 e0       	ldi	r24, 0x02	; 2
    5a78:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
Setup():
    5a7c:	8b ee       	ldi	r24, 0xEB	; 235
    5a7e:	9b e2       	ldi	r25, 0x2B	; 43
    5a80:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
    5a84:	86 e0       	ldi	r24, 0x06	; 6
    5a86:	9c e2       	ldi	r25, 0x2C	; 44
    5a88:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
    5a8c:	81 e2       	ldi	r24, 0x21	; 33
    5a8e:	9c e2       	ldi	r25, 0x2C	; 44
    5a90:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
setup():
    5a94:	8f e7       	ldi	r24, 0x7F	; 127
    5a96:	9b e2       	ldi	r25, 0x2B	; 43
    5a98:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
    5a9c:	8a e9       	ldi	r24, 0x9A	; 154
    5a9e:	9b e2       	ldi	r25, 0x2B	; 43
    5aa0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
    5aa4:	85 eb       	ldi	r24, 0xB5	; 181
    5aa6:	9b e2       	ldi	r25, 0x2B	; 43
    5aa8:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
pinMode():
    5aac:	62 e0       	ldi	r22, 0x02	; 2
    5aae:	83 e2       	ldi	r24, 0x23	; 35
    5ab0:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    5ab4:	62 e0       	ldi	r22, 0x02	; 2
    5ab6:	85 e2       	ldi	r24, 0x25	; 37
    5ab8:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    5abc:	62 e0       	ldi	r22, 0x02	; 2
    5abe:	84 e2       	ldi	r24, 0x24	; 36
    5ac0:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
    5ac4:	62 e0       	ldi	r22, 0x02	; 2
    5ac6:	82 e2       	ldi	r24, 0x22	; 34
    5ac8:	0e 94 8a 08 	call	0x1114	; 0x1114 <pinMode.part.1>
attachClick():
    5acc:	85 ef       	ldi	r24, 0xF5	; 245
    5ace:	90 e2       	ldi	r25, 0x20	; 32
    5ad0:	80 93 e6 2a 	sts	0x2AE6, r24	; 0x802ae6 <button1+0xd>
    5ad4:	90 93 e7 2a 	sts	0x2AE7, r25	; 0x802ae7 <button1+0xe>
attachLongPressStart():
    5ad8:	8c e3       	ldi	r24, 0x3C	; 60
    5ada:	91 e1       	ldi	r25, 0x11	; 17
    5adc:	80 93 ec 2a 	sts	0x2AEC, r24	; 0x802aec <button1+0x13>
    5ae0:	90 93 ed 2a 	sts	0x2AED, r25	; 0x802aed <button1+0x14>
attachLongPressStop():
    5ae4:	87 e5       	ldi	r24, 0x57	; 87
    5ae6:	91 e1       	ldi	r25, 0x11	; 17
    5ae8:	80 93 ee 2a 	sts	0x2AEE, r24	; 0x802aee <button1+0x15>
    5aec:	90 93 ef 2a 	sts	0x2AEF, r25	; 0x802aef <button1+0x16>
attachClick():
    5af0:	8a e5       	ldi	r24, 0x5A	; 90
    5af2:	90 e1       	ldi	r25, 0x10	; 16
    5af4:	80 93 c7 2a 	sts	0x2AC7, r24	; 0x802ac7 <button2+0xd>
    5af8:	90 93 c8 2a 	sts	0x2AC8, r25	; 0x802ac8 <button2+0xe>
attachLongPressStart():
    5afc:	83 ee       	ldi	r24, 0xE3	; 227
    5afe:	90 e1       	ldi	r25, 0x10	; 16
    5b00:	80 93 cd 2a 	sts	0x2ACD, r24	; 0x802acd <button2+0x13>
    5b04:	90 93 ce 2a 	sts	0x2ACE, r25	; 0x802ace <button2+0x14>
attachDuringLongPress():
    5b08:	80 ec       	ldi	r24, 0xC0	; 192
    5b0a:	90 e1       	ldi	r25, 0x10	; 16
    5b0c:	80 93 d1 2a 	sts	0x2AD1, r24	; 0x802ad1 <button2+0x17>
    5b10:	90 93 d2 2a 	sts	0x2AD2, r25	; 0x802ad2 <button2+0x18>
attachLongPressStop():
    5b14:	88 ee       	ldi	r24, 0xE8	; 232
    5b16:	96 e0       	ldi	r25, 0x06	; 6
    5b18:	80 93 cf 2a 	sts	0x2ACF, r24	; 0x802acf <button2+0x15>
    5b1c:	90 93 d0 2a 	sts	0x2AD0, r25	; 0x802ad0 <button2+0x16>
attachLongPressStart():
    5b20:	89 e5       	ldi	r24, 0x59	; 89
    5b22:	90 e1       	ldi	r25, 0x10	; 16
    5b24:	80 93 ae 2a 	sts	0x2AAE, r24	; 0x802aae <button3+0x13>
    5b28:	90 93 af 2a 	sts	0x2AAF, r25	; 0x802aaf <button3+0x14>
attachClick():
    5b2c:	84 ee       	ldi	r24, 0xE4	; 228
    5b2e:	90 e1       	ldi	r25, 0x10	; 16
    5b30:	80 93 a8 2a 	sts	0x2AA8, r24	; 0x802aa8 <button3+0xd>
    5b34:	90 93 a9 2a 	sts	0x2AA9, r25	; 0x802aa9 <button3+0xe>
attachDuringLongPress():
    5b38:	86 e3       	ldi	r24, 0x36	; 54
    5b3a:	90 e1       	ldi	r25, 0x10	; 16
    5b3c:	80 93 b2 2a 	sts	0x2AB2, r24	; 0x802ab2 <button3+0x17>
    5b40:	90 93 b3 2a 	sts	0x2AB3, r25	; 0x802ab3 <button3+0x18>
attachLongPressStop():
    5b44:	8d ed       	ldi	r24, 0xDD	; 221
    5b46:	96 e0       	ldi	r25, 0x06	; 6
    5b48:	80 93 b0 2a 	sts	0x2AB0, r24	; 0x802ab0 <button3+0x15>
    5b4c:	90 93 b1 2a 	sts	0x2AB1, r25	; 0x802ab1 <button3+0x16>
attachClick():
    5b50:	85 ed       	ldi	r24, 0xD5	; 213
    5b52:	9f e0       	ldi	r25, 0x0F	; 15
    5b54:	80 93 89 2a 	sts	0x2A89, r24	; 0x802a89 <button4+0xd>
    5b58:	90 93 8a 2a 	sts	0x2A8A, r25	; 0x802a8a <button4+0xe>
attachLongPressStart():
    5b5c:	8e ef       	ldi	r24, 0xFE	; 254
    5b5e:	93 e1       	ldi	r25, 0x13	; 19
    5b60:	80 93 8f 2a 	sts	0x2A8F, r24	; 0x802a8f <button4+0x13>
    5b64:	90 93 90 2a 	sts	0x2A90, r25	; 0x802a90 <button4+0x14>
attachLongPressStop():
    5b68:	84 ed       	ldi	r24, 0xD4	; 212
    5b6a:	9f e0       	ldi	r25, 0x0F	; 15
    5b6c:	80 93 91 2a 	sts	0x2A91, r24	; 0x802a91 <button4+0x15>
    5b70:	90 93 92 2a 	sts	0x2A92, r25	; 0x802a92 <button4+0x16>
setup():
    5b74:	86 e9       	ldi	r24, 0x96	; 150
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5b7c:	08 2f       	mov	r16, r24
    5b7e:	87 e9       	ldi	r24, 0x97	; 151
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5b86:	10 e0       	ldi	r17, 0x00	; 0
    5b88:	10 2f       	mov	r17, r16
    5b8a:	00 27       	eor	r16, r16
    5b8c:	08 0f       	add	r16, r24
    5b8e:	11 1d       	adc	r17, r1
    5b90:	00 93 a8 28 	sts	0x28A8, r16	; 0x8028a8 <SET_TEMP_DEG>
    5b94:	10 93 a9 28 	sts	0x28A9, r17	; 0x8028a9 <SET_TEMP_DEG+0x1>
    5b98:	84 eb       	ldi	r24, 0xB4	; 180
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5ba0:	80 93 a7 28 	sts	0x28A7, r24	; 0x8028a7 <EnergySetValue>
    5ba4:	88 e9       	ldi	r24, 0x98	; 152
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5bac:	f8 2e       	mov	r15, r24
    5bae:	89 e9       	ldi	r24, 0x99	; 153
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5bb6:	2f 2d       	mov	r18, r15
    5bb8:	30 e0       	ldi	r19, 0x00	; 0
    5bba:	32 2f       	mov	r19, r18
    5bbc:	22 27       	eor	r18, r18
    5bbe:	82 0f       	add	r24, r18
    5bc0:	93 2f       	mov	r25, r19
    5bc2:	91 1d       	adc	r25, r1
    5bc4:	80 93 14 29 	sts	0x2914, r24	; 0x802914 <SET_VALUE+0x6>
    5bc8:	90 93 15 29 	sts	0x2915, r25	; 0x802915 <SET_VALUE+0x7>
    5bcc:	8a e9       	ldi	r24, 0x9A	; 154
    5bce:	90 e0       	ldi	r25, 0x00	; 0
    5bd0:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5bd4:	f8 2e       	mov	r15, r24
    5bd6:	8b e9       	ldi	r24, 0x9B	; 155
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5bde:	2f 2d       	mov	r18, r15
    5be0:	30 e0       	ldi	r19, 0x00	; 0
    5be2:	32 2f       	mov	r19, r18
    5be4:	22 27       	eor	r18, r18
    5be6:	82 0f       	add	r24, r18
    5be8:	93 2f       	mov	r25, r19
    5bea:	91 1d       	adc	r25, r1
    5bec:	80 93 16 29 	sts	0x2916, r24	; 0x802916 <SET_VALUE+0x8>
    5bf0:	90 93 17 29 	sts	0x2917, r25	; 0x802917 <SET_VALUE+0x9>
    5bf4:	00 93 10 29 	sts	0x2910, r16	; 0x802910 <SET_VALUE+0x2>
    5bf8:	10 93 11 29 	sts	0x2911, r17	; 0x802911 <SET_VALUE+0x3>
    5bfc:	87 e3       	ldi	r24, 0x37	; 55
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5c04:	91 e0       	ldi	r25, 0x01	; 1
    5c06:	81 11       	cpse	r24, r1
    5c08:	01 c0       	rjmp	.+2      	; 0x5c0c <main+0x650>
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	90 93 a3 28 	sts	0x28A3, r25	; 0x8028a3 <EEPROM_AUTO_RESUM_SET>
    5c10:	90 93 bf 28 	sts	0x28BF, r25	; 0x8028bf <AUTO_RESUM_SET>
    5c14:	68 e5       	ldi	r22, 0x58	; 88
    5c16:	78 e2       	ldi	r23, 0x28	; 40
    5c18:	82 e3       	ldi	r24, 0x32	; 50
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	0e 94 62 13 	call	0x26c4	; 0x26c4 <int& EEPROMClass::get<int>(int, int&) [clone .isra.11]>
    5c20:	6a e5       	ldi	r22, 0x5A	; 90
    5c22:	78 e2       	ldi	r23, 0x28	; 40
    5c24:	8c e3       	ldi	r24, 0x3C	; 60
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	0e 94 62 13 	call	0x26c4	; 0x26c4 <int& EEPROMClass::get<int>(int, int&) [clone .isra.11]>
    5c2c:	88 ec       	ldi	r24, 0xC8	; 200
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
    5c30:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5c34:	18 2f       	mov	r17, r24
    5c36:	89 ec       	ldi	r24, 0xC9	; 201
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5c3e:	21 2f       	mov	r18, r17
    5c40:	30 e0       	ldi	r19, 0x00	; 0
    5c42:	32 2f       	mov	r19, r18
    5c44:	22 27       	eor	r18, r18
    5c46:	82 0f       	add	r24, r18
    5c48:	93 2f       	mov	r25, r19
    5c4a:	91 1d       	adc	r25, r1
    5c4c:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <SAFE_VALUE_SET>
    5c50:	90 93 0c 29 	sts	0x290C, r25	; 0x80290c <SAFE_VALUE_SET+0x1>
_ZN11EEPROMClass3getIbEERT_iS2_.isra.12():
    5c54:	19 82       	std	Y+1, r1	; 0x01
    5c56:	1a 82       	std	Y+2, r1	; 0x02
_ZNK5EERefcvhEv():
    5c58:	ce 01       	movw	r24, r28
    5c5a:	01 96       	adiw	r24, 0x01	; 1
    5c5c:	0e 94 11 13 	call	0x2622	; 0x2622 <EERef::operator*() const>
_ZN11EEPROMClass3getIbEERT_iS2_.isra.12():
    5c60:	80 93 c0 28 	sts	0x28C0, r24	; 0x8028c0 <TIME_SOCK_OR_TOTAL>
setup():
    5c64:	82 e0       	ldi	r24, 0x02	; 2
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5c6c:	91 e0       	ldi	r25, 0x01	; 1
    5c6e:	81 11       	cpse	r24, r1
    5c70:	01 c0       	rjmp	.+2      	; 0x5c74 <main+0x6b8>
    5c72:	90 e0       	ldi	r25, 0x00	; 0
    5c74:	90 93 0d 29 	sts	0x290D, r25	; 0x80290d <SAFE_VALUE_SET_DEG>
    5c78:	8f e0       	ldi	r24, 0x0F	; 15
    5c7a:	90 e0       	ldi	r25, 0x00	; 0
    5c7c:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5c80:	91 e0       	ldi	r25, 0x01	; 1
    5c82:	81 11       	cpse	r24, r1
    5c84:	01 c0       	rjmp	.+2      	; 0x5c88 <main+0x6cc>
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <Energy_Mode>
    5c8c:	e6 e0       	ldi	r30, 0x06	; 6
    5c8e:	ee 2e       	mov	r14, r30
    5c90:	e9 e2       	ldi	r30, 0x29	; 41
    5c92:	fe 2e       	mov	r15, r30
main():
    5c94:	06 e4       	ldi	r16, 0x46	; 70
    5c96:	10 e0       	ldi	r17, 0x00	; 0
_ZN11EEPROMClass3getIdEERT_iS2_.isra.13():
    5c98:	09 83       	std	Y+1, r16	; 0x01
    5c9a:	1a 83       	std	Y+2, r17	; 0x02
_ZNK5EERefcvhEv():
    5c9c:	ce 01       	movw	r24, r28
    5c9e:	01 96       	adiw	r24, 0x01	; 1
    5ca0:	0e 94 11 13 	call	0x2622	; 0x2622 <EERef::operator*() const>
_ZN11EEPROMClass3getIdEERT_iS2_.isra.13():
    5ca4:	f7 01       	movw	r30, r14
    5ca6:	81 93       	st	Z+, r24
    5ca8:	7f 01       	movw	r14, r30
_ZN5EEPtrppEv():
    5caa:	0f 5f       	subi	r16, 0xFF	; 255
    5cac:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getIdEERT_iS2_.isra.13():
    5cae:	0a 34       	cpi	r16, 0x4A	; 74
    5cb0:	11 05       	cpc	r17, r1
    5cb2:	91 f7       	brne	.-28     	; 0x5c98 <main+0x6dc>
setup():
    5cb4:	87 e0       	ldi	r24, 0x07	; 7
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5cbc:	91 e0       	ldi	r25, 0x01	; 1
    5cbe:	81 11       	cpse	r24, r1
    5cc0:	01 c0       	rjmp	.+2      	; 0x5cc4 <main+0x708>
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <SIGN>
    5cc8:	88 e0       	ldi	r24, 0x08	; 8
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5cd0:	91 e0       	ldi	r25, 0x01	; 1
    5cd2:	81 11       	cpse	r24, r1
    5cd4:	01 c0       	rjmp	.+2      	; 0x5cd8 <main+0x71c>
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	90 93 f8 28 	sts	0x28F8, r25	; 0x8028f8 <ERROR_SET_IN_DEG_FLAG>
    5cdc:	89 e0       	ldi	r24, 0x09	; 9
    5cde:	90 e0       	ldi	r25, 0x00	; 0
    5ce0:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5ce4:	91 e0       	ldi	r25, 0x01	; 1
    5ce6:	81 11       	cpse	r24, r1
    5ce8:	01 c0       	rjmp	.+2      	; 0x5cec <main+0x730>
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	90 93 b7 28 	sts	0x28B7, r25	; 0x8028b7 <ERROR_SET_IN_FAH_FLAG>
    5cf0:	62 ef       	ldi	r22, 0xF2	; 242
    5cf2:	78 e2       	ldi	r23, 0x28	; 40
    5cf4:	80 e5       	ldi	r24, 0x50	; 80
    5cf6:	90 e0       	ldi	r25, 0x00	; 0
    5cf8:	0e 94 30 13 	call	0x2660	; 0x2660 <long& EEPROMClass::get<long>(int, long&) [clone .isra.14]>
    5cfc:	6e ee       	ldi	r22, 0xEE	; 238
    5cfe:	78 e2       	ldi	r23, 0x28	; 40
    5d00:	8a e5       	ldi	r24, 0x5A	; 90
    5d02:	90 e0       	ldi	r25, 0x00	; 0
    5d04:	0e 94 30 13 	call	0x2660	; 0x2660 <long& EEPROMClass::get<long>(int, long&) [clone .isra.14]>
    5d08:	6a ee       	ldi	r22, 0xEA	; 234
    5d0a:	78 e2       	ldi	r23, 0x28	; 40
    5d0c:	84 e6       	ldi	r24, 0x64	; 100
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	0e 94 30 13 	call	0x2660	; 0x2660 <long& EEPROMClass::get<long>(int, long&) [clone .isra.14]>
    5d14:	66 ee       	ldi	r22, 0xE6	; 230
    5d16:	78 e2       	ldi	r23, 0x28	; 40
    5d18:	8e e6       	ldi	r24, 0x6E	; 110
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	0e 94 30 13 	call	0x2660	; 0x2660 <long& EEPROMClass::get<long>(int, long&) [clone .isra.14]>
    5d20:	85 e0       	ldi	r24, 0x05	; 5
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    5d28:	90 e0       	ldi	r25, 0x00	; 0
    5d2a:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <CAL_SELECT_VALUE>
    5d2e:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <CAL_SELECT_VALUE+0x1>
    5d32:	10 92 af 28 	sts	0x28AF, r1	; 0x8028af <PRES>
    5d36:	10 92 b0 28 	sts	0x28B0, r1	; 0x8028b0 <PRES+0x1>
    5d3a:	10 92 b1 28 	sts	0x28B1, r1	; 0x8028b1 <PRES+0x2>
    5d3e:	10 92 b2 28 	sts	0x28B2, r1	; 0x8028b2 <PRES+0x3>
    5d42:	8e e2       	ldi	r24, 0x2E	; 46
    5d44:	9b e2       	ldi	r25, 0x2B	; 43
    5d46:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Ticker::start()>
DISPLAY_DIGIT2():
    5d4a:	00 e1       	ldi	r16, 0x10	; 16
    5d4c:	10 e0       	ldi	r17, 0x00	; 0
DISPLAY_DIGIT1():
    5d4e:	67 e1       	ldi	r22, 0x17	; 23
    5d50:	e6 2e       	mov	r14, r22
    5d52:	f1 2c       	mov	r15, r1
SET_SHORT_PRESS_FUNCTION():
    5d54:	88 24       	eor	r8, r8
    5d56:	83 94       	inc	r8
    5d58:	91 2c       	mov	r9, r1
loop():
    5d5a:	8e e2       	ldi	r24, 0x2E	; 46
    5d5c:	9b e2       	ldi	r25, 0x2B	; 43
    5d5e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
    5d62:	0e 94 48 05 	call	0xa90	; 0xa90 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]>
    5d66:	80 91 b3 28 	lds	r24, 0x28B3	; 0x8028b3 <data>
    5d6a:	90 91 b4 28 	lds	r25, 0x28B4	; 0x8028b4 <data+0x1>
    5d6e:	a0 91 b5 28 	lds	r26, 0x28B5	; 0x8028b5 <data+0x2>
    5d72:	b0 91 b6 28 	lds	r27, 0x28B6	; 0x8028b6 <data+0x3>
    5d76:	01 96       	adiw	r24, 0x01	; 1
    5d78:	a1 1d       	adc	r26, r1
    5d7a:	b1 1d       	adc	r27, r1
    5d7c:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <data>
    5d80:	90 93 b4 28 	sts	0x28B4, r25	; 0x8028b4 <data+0x1>
    5d84:	a0 93 b5 28 	sts	0x28B5, r26	; 0x8028b5 <data+0x2>
    5d88:	b0 93 b6 28 	sts	0x28B6, r27	; 0x8028b6 <data+0x3>
    5d8c:	40 90 af 28 	lds	r4, 0x28AF	; 0x8028af <PRES>
    5d90:	50 90 b0 28 	lds	r5, 0x28B0	; 0x8028b0 <PRES+0x1>
    5d94:	60 90 b1 28 	lds	r6, 0x28B1	; 0x8028b1 <PRES+0x2>
    5d98:	70 90 b2 28 	lds	r7, 0x28B2	; 0x8028b2 <PRES+0x3>
    5d9c:	f0 e1       	ldi	r31, 0x10	; 16
    5d9e:	4f 16       	cp	r4, r31
    5da0:	f7 e2       	ldi	r31, 0x27	; 39
    5da2:	5f 06       	cpc	r5, r31
    5da4:	61 04       	cpc	r6, r1
    5da6:	71 04       	cpc	r7, r1
    5da8:	0c f0       	brlt	.+2      	; 0x5dac <main+0x7f0>
    5daa:	41 c0       	rjmp	.+130    	; 0x5e2e <main+0x872>
    5dac:	89 e1       	ldi	r24, 0x19	; 25
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Bclass::BUZZ_INTERVAL(int) [clone .constprop.25]>
DISPLAY_DIGIT2():
    5db4:	82 e2       	ldi	r24, 0x22	; 34
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    5dbc:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    5dc0:	88 e1       	ldi	r24, 0x18	; 24
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    5dc8:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    5dcc:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    5dd0:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    5dd4:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    5dd8:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    5ddc:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    5de0:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    5de4:	10 92 d8 28 	sts	0x28D8, r1	; 0x8028d8 <digits1+0x2>
    5de8:	10 92 d9 28 	sts	0x28D9, r1	; 0x8028d9 <digits1+0x3>
    5dec:	10 92 da 28 	sts	0x28DA, r1	; 0x8028da <digits1+0x4>
    5df0:	10 92 db 28 	sts	0x28DB, r1	; 0x8028db <digits1+0x5>
    5df4:	84 e0       	ldi	r24, 0x04	; 4
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    5dfc:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
loop():
    5e00:	81 e0       	ldi	r24, 0x01	; 1
    5e02:	80 93 d4 28 	sts	0x28D4, r24	; 0x8028d4 <DOT1_1>
    5e06:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    5e0a:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    5e0e:	2f ef       	ldi	r18, 0xFF	; 255
    5e10:	42 1a       	sub	r4, r18
    5e12:	52 0a       	sbc	r5, r18
    5e14:	62 0a       	sbc	r6, r18
    5e16:	72 0a       	sbc	r7, r18
    5e18:	40 92 af 28 	sts	0x28AF, r4	; 0x8028af <PRES>
    5e1c:	50 92 b0 28 	sts	0x28B0, r5	; 0x8028b0 <PRES+0x1>
    5e20:	60 92 b1 28 	sts	0x28B1, r6	; 0x8028b1 <PRES+0x2>
    5e24:	70 92 b2 28 	sts	0x28B2, r7	; 0x8028b2 <PRES+0x3>
main():
    5e28:	0e 94 58 08 	call	0x10b0	; 0x10b0 <serialEventRun()>
    5e2c:	96 cf       	rjmp	.-212    	; 0x5d5a <main+0x79e>
loop():
    5e2e:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <LONG_PRESS>
    5e32:	88 23       	and	r24, r24
    5e34:	19 f0       	breq	.+6      	; 0x5e3c <main+0x880>
    5e36:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.16]>
    5e3a:	f6 cf       	rjmp	.-20     	; 0x5e28 <main+0x86c>
SET_SHORT_PRESS_FUNCTION():
    5e3c:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    5e40:	83 30       	cpi	r24, 0x03	; 3
    5e42:	09 f4       	brne	.+2      	; 0x5e46 <main+0x88a>
    5e44:	0d c7       	rjmp	.+3610   	; 0x6c60 <main+0x16a4>
    5e46:	0c f0       	brlt	.+2      	; 0x5e4a <main+0x88e>
    5e48:	4f c0       	rjmp	.+158    	; 0x5ee8 <main+0x92c>
    5e4a:	88 23       	and	r24, r24
    5e4c:	09 f4       	brne	.+2      	; 0x5e50 <main+0x894>
    5e4e:	f4 c2       	rjmp	.+1512   	; 0x6438 <main+0xe7c>
    5e50:	81 30       	cpi	r24, 0x01	; 1
    5e52:	51 f7       	brne	.-44     	; 0x5e28 <main+0x86c>
    5e54:	80 91 70 28 	lds	r24, 0x2870	; 0x802870 <Probe_error_flag>
    5e58:	81 11       	cpse	r24, r1
    5e5a:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    5e5e:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
digitalWrite():
    5e62:	60 e0       	ldi	r22, 0x00	; 0
    5e64:	8d e1       	ldi	r24, 0x1D	; 29
    5e66:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    5e6a:	61 e0       	ldi	r22, 0x01	; 1
    5e6c:	8c e1       	ldi	r24, 0x1C	; 28
    5e6e:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    5e72:	61 e0       	ldi	r22, 0x01	; 1
    5e74:	8c e0       	ldi	r24, 0x0C	; 12
    5e76:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    5e7a:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    5e7e:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
SET_SHORT_PRESS_FUNCTION():
    5e82:	20 91 09 28 	lds	r18, 0x2809	; 0x802809 <Energy_Mode>
    5e86:	21 11       	cpse	r18, r1
    5e88:	ad c6       	rjmp	.+3418   	; 0x6be4 <main+0x1628>
    5e8a:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    5e8e:	49 97       	sbiw	r24, 0x19	; 25
    5e90:	0c f0       	brlt	.+2      	; 0x5e94 <main+0x8d8>
    5e92:	90 c6       	rjmp	.+3360   	; 0x6bb4 <main+0x15f8>
    5e94:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    5e98:	81 11       	cpse	r24, r1
    5e9a:	85 c6       	rjmp	.+3338   	; 0x6ba6 <main+0x15ea>
    5e9c:	88 e1       	ldi	r24, 0x18	; 24
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    5ea4:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    5ea8:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    5eac:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    5eb0:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    5eb4:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    5eb8:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    5ebc:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    5ec0:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    5ec4:	c3 97       	sbiw	r24, 0x33	; 51
    5ec6:	24 f0       	brlt	.+8      	; 0x5ed0 <main+0x914>
    5ec8:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    5ecc:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    5ed0:	8a e0       	ldi	r24, 0x0A	; 10
    5ed2:	90 e0       	ldi	r25, 0x00	; 0
    5ed4:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    5ed8:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
    5edc:	60 e0       	ldi	r22, 0x00	; 0
    5ede:	70 e0       	ldi	r23, 0x00	; 0
    5ee0:	cb 01       	movw	r24, r22
    5ee2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    5ee6:	a0 cf       	rjmp	.-192    	; 0x5e28 <main+0x86c>
    5ee8:	84 30       	cpi	r24, 0x04	; 4
    5eea:	09 f4       	brne	.+2      	; 0x5eee <main+0x932>
    5eec:	4b c7       	rjmp	.+3734   	; 0x6d84 <main+0x17c8>
    5eee:	85 30       	cpi	r24, 0x05	; 5
    5ef0:	09 f0       	breq	.+2      	; 0x5ef4 <main+0x938>
    5ef2:	9a cf       	rjmp	.-204    	; 0x5e28 <main+0x86c>
    5ef4:	80 91 bb 28 	lds	r24, 0x28BB	; 0x8028bb <SET_MIN>
    5ef8:	90 91 bc 28 	lds	r25, 0x28BC	; 0x8028bc <SET_MIN+0x1>
    5efc:	89 2b       	or	r24, r25
    5efe:	09 f0       	breq	.+2      	; 0x5f02 <main+0x946>
    5f00:	f4 c7       	rjmp	.+4072   	; 0x6eea <main+0x192e>
    5f02:	81 e0       	ldi	r24, 0x01	; 1
    5f04:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <ElapsedTime>
    5f08:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    5f0c:	81 11       	cpse	r24, r1
    5f0e:	0c 94 27 39 	jmp	0x724e	; 0x724e <main+0x1c92>
    5f12:	80 91 64 28 	lds	r24, 0x2864	; 0x802864 <TEMP_FLAG>
    5f16:	90 91 65 28 	lds	r25, 0x2865	; 0x802865 <TEMP_FLAG+0x1>
    5f1a:	89 2b       	or	r24, r25
    5f1c:	c9 f4       	brne	.+50     	; 0x5f50 <main+0x994>
    5f1e:	80 91 62 28 	lds	r24, 0x2862	; 0x802862 <RESUME_SET_TEMP>
    5f22:	90 91 63 28 	lds	r25, 0x2863	; 0x802863 <RESUME_SET_TEMP+0x1>
    5f26:	18 16       	cp	r1, r24
    5f28:	19 06       	cpc	r1, r25
    5f2a:	94 f4       	brge	.+36     	; 0x5f50 <main+0x994>
    5f2c:	60 91 12 28 	lds	r22, 0x2812	; 0x802812 <TEMP_DEG>
    5f30:	70 91 13 28 	lds	r23, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    5f34:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    5f38:	90 91 15 28 	lds	r25, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    5f3c:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    5f40:	60 93 60 28 	sts	0x2860, r22	; 0x802860 <RESUME_Temp>
    5f44:	70 93 61 28 	sts	0x2861, r23	; 0x802861 <RESUME_Temp+0x1>
    5f48:	80 92 64 28 	sts	0x2864, r8	; 0x802864 <TEMP_FLAG>
    5f4c:	90 92 65 28 	sts	0x2865, r9	; 0x802865 <TEMP_FLAG+0x1>
    5f50:	c0 90 a8 28 	lds	r12, 0x28A8	; 0x8028a8 <SET_TEMP_DEG>
    5f54:	d0 90 a9 28 	lds	r13, 0x28A9	; 0x8028a9 <SET_TEMP_DEG+0x1>
    5f58:	36 e3       	ldi	r19, 0x36	; 54
    5f5a:	c3 16       	cp	r12, r19
    5f5c:	31 e0       	ldi	r19, 0x01	; 1
    5f5e:	d3 06       	cpc	r13, r19
    5f60:	0c f4       	brge	.+2      	; 0x5f64 <main+0x9a8>
    5f62:	c6 c7       	rjmp	.+3980   	; 0x6ef0 <main+0x1934>
    5f64:	80 e0       	ldi	r24, 0x00	; 0
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	a0 e8       	ldi	r26, 0x80	; 128
    5f6a:	bf e3       	ldi	r27, 0x3F	; 63
    5f6c:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <BUFF>
    5f70:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <BUFF+0x1>
    5f74:	a0 93 03 28 	sts	0x2803, r26	; 0x802803 <BUFF+0x2>
    5f78:	b0 93 04 28 	sts	0x2804, r27	; 0x802804 <BUFF+0x3>
    5f7c:	b6 01       	movw	r22, r12
    5f7e:	0d 2c       	mov	r0, r13
    5f80:	00 0c       	add	r0, r0
    5f82:	88 0b       	sbc	r24, r24
    5f84:	99 0b       	sbc	r25, r25
    5f86:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    5f8a:	9b 01       	movw	r18, r22
    5f8c:	ac 01       	movw	r20, r24
    5f8e:	60 91 01 28 	lds	r22, 0x2801	; 0x802801 <BUFF>
    5f92:	70 91 02 28 	lds	r23, 0x2802	; 0x802802 <BUFF+0x1>
    5f96:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <BUFF+0x2>
    5f9a:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <BUFF+0x3>
    5f9e:	0e 94 2e 39 	call	0x725c	; 0x725c <__addsf3>
    5fa2:	60 93 34 2a 	sts	0x2A34, r22	; 0x802a34 <PID_SETPOINT>
    5fa6:	70 93 35 2a 	sts	0x2A35, r23	; 0x802a35 <PID_SETPOINT+0x1>
    5faa:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <PID_SETPOINT+0x2>
    5fae:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <PID_SETPOINT+0x3>
    5fb2:	6d 2d       	mov	r22, r13
    5fb4:	86 e9       	ldi	r24, 0x96	; 150
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    5fbc:	6c 2d       	mov	r22, r12
    5fbe:	87 e9       	ldi	r24, 0x97	; 151
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    5fc6:	d0 90 6d 28 	lds	r13, 0x286D	; 0x80286d <SET_HOUR>
    5fca:	60 91 6e 28 	lds	r22, 0x286E	; 0x80286e <SET_HOUR+0x1>
    5fce:	88 e9       	ldi	r24, 0x98	; 152
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    5fd6:	6d 2d       	mov	r22, r13
    5fd8:	89 e9       	ldi	r24, 0x99	; 153
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    5fe0:	d0 90 16 29 	lds	r13, 0x2916	; 0x802916 <SET_VALUE+0x8>
    5fe4:	60 91 17 29 	lds	r22, 0x2917	; 0x802917 <SET_VALUE+0x9>
    5fe8:	8a e9       	ldi	r24, 0x9A	; 154
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    5ff0:	6d 2d       	mov	r22, r13
    5ff2:	8b e9       	ldi	r24, 0x9B	; 155
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
interval():
    5ffa:	80 91 45 2c 	lds	r24, 0x2C45	; 0x802c45 <flahDisplay+0x9>
    5ffe:	90 91 46 2c 	lds	r25, 0x2C46	; 0x802c46 <flahDisplay+0xa>
    6002:	89 2b       	or	r24, r25
    6004:	09 f4       	brne	.+2      	; 0x6008 <main+0xa4c>
    6006:	7d c7       	rjmp	.+3834   	; 0x6f02 <main+0x1946>
    6008:	88 ee       	ldi	r24, 0xE8	; 232
    600a:	93 e0       	ldi	r25, 0x03	; 3
    600c:	a0 e0       	ldi	r26, 0x00	; 0
    600e:	b0 e0       	ldi	r27, 0x00	; 0
    6010:	80 93 3d 2c 	sts	0x2C3D, r24	; 0x802c3d <flahDisplay+0x1>
    6014:	90 93 3e 2c 	sts	0x2C3E, r25	; 0x802c3e <flahDisplay+0x2>
    6018:	a0 93 3f 2c 	sts	0x2C3F, r26	; 0x802c3f <flahDisplay+0x3>
    601c:	b0 93 40 2c 	sts	0x2C40, r27	; 0x802c40 <flahDisplay+0x4>
stop():
    6020:	10 92 57 2c 	sts	0x2C57, r1	; 0x802c57 <tempRiseCheck>
    6024:	10 92 62 2c 	sts	0x2C62, r1	; 0x802c62 <tempRiseCheck+0xb>
    6028:	10 92 63 2c 	sts	0x2C63, r1	; 0x802c63 <tempRiseCheck+0xc>
    602c:	10 92 64 2c 	sts	0x2C64, r1	; 0x802c64 <tempRiseCheck+0xd>
    6030:	10 92 65 2c 	sts	0x2C65, r1	; 0x802c65 <tempRiseCheck+0xe>
    6034:	10 92 66 2c 	sts	0x2C66, r1	; 0x802c66 <tempRiseCheck+0xf>
    6038:	10 92 67 2c 	sts	0x2C67, r1	; 0x802c67 <tempRiseCheck+0x10>
digitalWrite():
    603c:	61 e0       	ldi	r22, 0x01	; 1
    603e:	81 e2       	ldi	r24, 0x21	; 33
    6040:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6044:	61 e0       	ldi	r22, 0x01	; 1
    6046:	80 ea       	ldi	r24, 0xA0	; 160
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    604e:	8f e0       	ldi	r24, 0x0F	; 15
    6050:	28 2e       	mov	r2, r24
    6052:	31 2c       	mov	r3, r1
    6054:	80 91 ae 28 	lds	r24, 0x28AE	; 0x8028ae <ExitFromProcess>
    6058:	81 11       	cpse	r24, r1
    605a:	0c 94 c5 38 	jmp	0x718a	; 0x718a <main+0x1bce>
    605e:	81 e0       	ldi	r24, 0x01	; 1
    6060:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <Inprocess_flag>
    6064:	90 91 70 28 	lds	r25, 0x2870	; 0x802870 <Probe_error_flag>
    6068:	99 23       	and	r25, r25
    606a:	21 f0       	breq	.+8      	; 0x6074 <main+0xab8>
    606c:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    6070:	80 93 ae 28 	sts	0x28AE, r24	; 0x8028ae <ExitFromProcess>
    6074:	20 e0       	ldi	r18, 0x00	; 0
    6076:	30 e0       	ldi	r19, 0x00	; 0
    6078:	47 ed       	ldi	r20, 0xD7	; 215
    607a:	53 e4       	ldi	r21, 0x43	; 67
    607c:	60 91 12 28 	lds	r22, 0x2812	; 0x802812 <TEMP_DEG>
    6080:	70 91 13 28 	lds	r23, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    6084:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    6088:	90 91 15 28 	lds	r25, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    608c:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    6090:	87 fd       	sbrc	r24, 7
    6092:	3c c7       	rjmp	.+3704   	; 0x6f0c <main+0x1950>
    6094:	dd 24       	eor	r13, r13
    6096:	d3 94       	inc	r13
    6098:	d0 92 88 28 	sts	0x2888, r13	; 0x802888 <checkTempRaised>
digitalWrite():
    609c:	60 e0       	ldi	r22, 0x00	; 0
    609e:	81 e2       	ldi	r24, 0x21	; 33
    60a0:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    60a4:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    60a8:	60 e0       	ldi	r22, 0x00	; 0
    60aa:	80 ea       	ldi	r24, 0xA0	; 160
    60ac:	90 e0       	ldi	r25, 0x00	; 0
    60ae:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    60b2:	d0 92 ae 28 	sts	0x28AE, r13	; 0x8028ae <ExitFromProcess>
digitalWrite():
    60b6:	60 e0       	ldi	r22, 0x00	; 0
    60b8:	8b e1       	ldi	r24, 0x1B	; 27
    60ba:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    60be:	0e 94 48 05 	call	0xa90	; 0xa90 <Bclass::RTD_TEMP_CONV() [clone .constprop.21]>
DISPLAY_UPDATE():
    60c2:	8e e2       	ldi	r24, 0x2E	; 46
    60c4:	9b e2       	ldi	r25, 0x2B	; 43
    60c6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
SET_SHORT_PRESS_FUNCTION():
    60ca:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    60ce:	81 11       	cpse	r24, r1
    60d0:	65 c7       	rjmp	.+3786   	; 0x6f9c <main+0x19e0>
    60d2:	80 91 67 28 	lds	r24, 0x2867	; 0x802867 <flag>
    60d6:	90 91 68 28 	lds	r25, 0x2868	; 0x802868 <flag+0x1>
    60da:	89 2b       	or	r24, r25
    60dc:	c1 f4       	brne	.+48     	; 0x610e <main+0xb52>
    60de:	80 92 5e 28 	sts	0x285E, r8	; 0x80285e <TIME_FACT>
    60e2:	90 92 5f 28 	sts	0x285F, r9	; 0x80285f <TIME_FACT+0x1>
    60e6:	80 91 bb 28 	lds	r24, 0x28BB	; 0x8028bb <SET_MIN>
    60ea:	90 91 bc 28 	lds	r25, 0x28BC	; 0x8028bc <SET_MIN+0x1>
    60ee:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CURRENT_TIME>
    60f2:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CURRENT_TIME+0x1>
    60f6:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <SET_TEMP_DEG>
    60fa:	90 91 a9 28 	lds	r25, 0x28A9	; 0x8028a9 <SET_TEMP_DEG+0x1>
    60fe:	80 93 5a 28 	sts	0x285A, r24	; 0x80285a <RESUME_TEMP>
    6102:	90 93 5b 28 	sts	0x285B, r25	; 0x80285b <RESUME_TEMP+0x1>
    6106:	80 92 67 28 	sts	0x2867, r8	; 0x802867 <flag>
    610a:	90 92 68 28 	sts	0x2868, r9	; 0x802868 <flag+0x1>
    610e:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <AUTO_RESUM_SET>
    6112:	88 23       	and	r24, r24
    6114:	51 f1       	breq	.+84     	; 0x616a <main+0xbae>
    6116:	20 91 bb 28 	lds	r18, 0x28BB	; 0x8028bb <SET_MIN>
    611a:	30 91 bc 28 	lds	r19, 0x28BC	; 0x8028bc <SET_MIN+0x1>
    611e:	80 91 5c 28 	lds	r24, 0x285C	; 0x80285c <CURRENT_TIME>
    6122:	90 91 5d 28 	lds	r25, 0x285D	; 0x80285d <CURRENT_TIME+0x1>
    6126:	40 91 5e 28 	lds	r20, 0x285E	; 0x80285e <TIME_FACT>
    612a:	50 91 5f 28 	lds	r21, 0x285F	; 0x80285f <TIME_FACT+0x1>
    612e:	84 1b       	sub	r24, r20
    6130:	95 0b       	sbc	r25, r21
    6132:	82 17       	cp	r24, r18
    6134:	93 07       	cpc	r25, r19
    6136:	09 f0       	breq	.+2      	; 0x613a <main+0xb7e>
    6138:	ec c6       	rjmp	.+3544   	; 0x6f12 <main+0x1956>
    613a:	82 30       	cpi	r24, 0x02	; 2
    613c:	91 05       	cpc	r25, r1
    613e:	0c f4       	brge	.+2      	; 0x6142 <main+0xb86>
    6140:	e8 c6       	rjmp	.+3536   	; 0x6f12 <main+0x1956>
    6142:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CURRENT_TIME>
    6146:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CURRENT_TIME+0x1>
    614a:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <RESUME_TIME>
    614e:	90 93 59 28 	sts	0x2859, r25	; 0x802859 <RESUME_TIME+0x1>
    6152:	68 e5       	ldi	r22, 0x58	; 88
    6154:	78 e2       	ldi	r23, 0x28	; 40
    6156:	82 e3       	ldi	r24, 0x32	; 50
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]>
    615e:	6a e5       	ldi	r22, 0x5A	; 90
    6160:	78 e2       	ldi	r23, 0x28	; 40
    6162:	8c e3       	ldi	r24, 0x3C	; 60
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]>
    616a:	81 e0       	ldi	r24, 0x01	; 1
    616c:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <EXECUTE_PID_LOOP>
    6170:	a0 90 62 28 	lds	r10, 0x2862	; 0x802862 <RESUME_SET_TEMP>
    6174:	b0 90 63 28 	lds	r11, 0x2863	; 0x802863 <RESUME_SET_TEMP+0x1>
    6178:	1a 14       	cp	r1, r10
    617a:	1b 04       	cpc	r1, r11
    617c:	0c f0       	brlt	.+2      	; 0x6180 <main+0xbc4>
    617e:	49 c0       	rjmp	.+146    	; 0x6212 <main+0xc56>
    6180:	80 91 64 28 	lds	r24, 0x2864	; 0x802864 <TEMP_FLAG>
    6184:	90 91 65 28 	lds	r25, 0x2865	; 0x802865 <TEMP_FLAG+0x1>
    6188:	03 97       	sbiw	r24, 0x03	; 3
    618a:	09 f0       	breq	.+2      	; 0x618e <main+0xbd2>
    618c:	42 c0       	rjmp	.+132    	; 0x6212 <main+0xc56>
    618e:	20 91 12 28 	lds	r18, 0x2812	; 0x802812 <TEMP_DEG>
    6192:	30 91 13 28 	lds	r19, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    6196:	40 91 14 28 	lds	r20, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    619a:	50 91 15 28 	lds	r21, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    619e:	60 91 34 2a 	lds	r22, 0x2A34	; 0x802a34 <PID_SETPOINT>
    61a2:	70 91 35 2a 	lds	r23, 0x2A35	; 0x802a35 <PID_SETPOINT+0x1>
    61a6:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <PID_SETPOINT+0x2>
    61aa:	90 91 37 2a 	lds	r25, 0x2A37	; 0x802a37 <PID_SETPOINT+0x3>
    61ae:	0e 94 2d 39 	call	0x725a	; 0x725a <__subsf3>
    61b2:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__fixsfsi>
    61b6:	fb 01       	movw	r30, r22
    61b8:	60 93 56 28 	sts	0x2856, r22	; 0x802856 <ErroR>
    61bc:	70 93 57 28 	sts	0x2857, r23	; 0x802857 <ErroR+0x1>
    61c0:	95 01       	movw	r18, r10
    61c2:	22 58       	subi	r18, 0x82	; 130
    61c4:	31 09       	sbc	r19, r1
    61c6:	22 33       	cpi	r18, 0x32	; 50
    61c8:	31 05       	cpc	r19, r1
    61ca:	08 f0       	brcs	.+2      	; 0x61ce <main+0xc12>
    61cc:	c8 c6       	rjmp	.+3472   	; 0x6f5e <main+0x19a2>
    61ce:	66 50       	subi	r22, 0x06	; 6
    61d0:	71 09       	sbc	r23, r1
    61d2:	64 31       	cpi	r22, 0x14	; 20
    61d4:	71 05       	cpc	r23, r1
    61d6:	30 f4       	brcc	.+12     	; 0x61e4 <main+0xc28>
    61d8:	23 e0       	ldi	r18, 0x03	; 3
    61da:	30 e0       	ldi	r19, 0x00	; 0
    61dc:	20 93 54 28 	sts	0x2854, r18	; 0x802854 <DIV_FACT>
    61e0:	30 93 55 28 	sts	0x2855, r19	; 0x802855 <DIV_FACT+0x1>
    61e4:	60 91 54 28 	lds	r22, 0x2854	; 0x802854 <DIV_FACT>
    61e8:	70 91 55 28 	lds	r23, 0x2855	; 0x802855 <DIV_FACT+0x1>
    61ec:	cf 01       	movw	r24, r30
    61ee:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <__divmodhi4>
    61f2:	80 91 60 28 	lds	r24, 0x2860	; 0x802860 <RESUME_Temp>
    61f6:	90 91 61 28 	lds	r25, 0x2861	; 0x802861 <RESUME_Temp+0x1>
    61fa:	68 0f       	add	r22, r24
    61fc:	79 1f       	adc	r23, r25
    61fe:	60 93 52 28 	sts	0x2852, r22	; 0x802852 <TEMP_BUFF>
    6202:	70 93 53 28 	sts	0x2853, r23	; 0x802853 <TEMP_BUFF+0x1>
    6206:	84 e0       	ldi	r24, 0x04	; 4
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <TEMP_FLAG>
    620e:	90 93 65 28 	sts	0x2865, r25	; 0x802865 <TEMP_FLAG+0x1>
    6212:	c0 90 56 28 	lds	r12, 0x2856	; 0x802856 <ErroR>
    6216:	d0 90 57 28 	lds	r13, 0x2857	; 0x802857 <ErroR+0x1>
    621a:	9e e1       	ldi	r25, 0x1E	; 30
    621c:	a9 1a       	sub	r10, r25
    621e:	b1 08       	sbc	r11, r1
    6220:	e9 e1       	ldi	r30, 0x19	; 25
    6222:	ae 16       	cp	r10, r30
    6224:	e1 e0       	ldi	r30, 0x01	; 1
    6226:	be 06       	cpc	r11, r30
    6228:	08 f0       	brcs	.+2      	; 0x622c <main+0xc70>
    622a:	a6 c6       	rjmp	.+3404   	; 0x6f78 <main+0x19bc>
    622c:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <ErroRConst>
    6230:	90 91 51 28 	lds	r25, 0x2851	; 0x802851 <ErroRConst+0x1>
    6234:	c8 16       	cp	r12, r24
    6236:	d9 06       	cpc	r13, r25
    6238:	0c f4       	brge	.+2      	; 0x623c <main+0xc80>
    623a:	9e c6       	rjmp	.+3388   	; 0x6f78 <main+0x19bc>
    623c:	60 91 52 28 	lds	r22, 0x2852	; 0x802852 <TEMP_BUFF>
    6240:	70 91 53 28 	lds	r23, 0x2853	; 0x802853 <TEMP_BUFF+0x1>
    6244:	07 2e       	mov	r0, r23
    6246:	00 0c       	add	r0, r0
    6248:	88 0b       	sbc	r24, r24
    624a:	99 0b       	sbc	r25, r25
    624c:	0e 94 31 3a 	call	0x7462	; 0x7462 <__floatsisf>
    6250:	20 91 12 28 	lds	r18, 0x2812	; 0x802812 <TEMP_DEG>
    6254:	30 91 13 28 	lds	r19, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    6258:	40 91 14 28 	lds	r20, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    625c:	50 91 15 28 	lds	r21, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    6260:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    6264:	87 fd       	sbrc	r24, 7
    6266:	88 c6       	rjmp	.+3344   	; 0x6f78 <main+0x19bc>
digitalWrite():
    6268:	61 e0       	ldi	r22, 0x01	; 1
    626a:	88 e1       	ldi	r24, 0x18	; 24
    626c:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6270:	c6 01       	movw	r24, r12
    6272:	05 97       	sbiw	r24, 0x05	; 5
    6274:	23 e0       	ldi	r18, 0x03	; 3
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	05 97       	sbiw	r24, 0x05	; 5
    627a:	08 f4       	brcc	.+2      	; 0x627e <main+0xcc2>
    627c:	8a c6       	rjmp	.+3348   	; 0x6f92 <main+0x19d6>
    627e:	c6 01       	movw	r24, r12
    6280:	0a 97       	sbiw	r24, 0x0a	; 10
    6282:	05 97       	sbiw	r24, 0x05	; 5
    6284:	08 f0       	brcs	.+2      	; 0x6288 <main+0xccc>
    6286:	7b c6       	rjmp	.+3318   	; 0x6f7e <main+0x19c2>
    6288:	85 e0       	ldi	r24, 0x05	; 5
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <ErroRConst>
    6290:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <ErroRConst+0x1>
Data_Update():
    6294:	88 ef       	ldi	r24, 0xF8	; 248
    6296:	9a e2       	ldi	r25, 0x2A	; 42
    6298:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
SET_SHORT_PRESS_FUNCTION():
    629c:	20 91 34 2a 	lds	r18, 0x2A34	; 0x802a34 <PID_SETPOINT>
    62a0:	30 91 35 2a 	lds	r19, 0x2A35	; 0x802a35 <PID_SETPOINT+0x1>
    62a4:	40 91 36 2a 	lds	r20, 0x2A36	; 0x802a36 <PID_SETPOINT+0x2>
    62a8:	50 91 37 2a 	lds	r21, 0x2A37	; 0x802a37 <PID_SETPOINT+0x3>
    62ac:	60 91 12 28 	lds	r22, 0x2812	; 0x802812 <TEMP_DEG>
    62b0:	70 91 13 28 	lds	r23, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    62b4:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    62b8:	90 91 15 28 	lds	r25, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    62bc:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__gesf2>
    62c0:	87 fd       	sbrc	r24, 7
    62c2:	21 c0       	rjmp	.+66     	; 0x6306 <main+0xd4a>
    62c4:	10 92 62 28 	sts	0x2862, r1	; 0x802862 <RESUME_SET_TEMP>
    62c8:	10 92 63 28 	sts	0x2863, r1	; 0x802863 <RESUME_SET_TEMP+0x1>
    62cc:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <RESUME_Temp>
    62d0:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <RESUME_Temp+0x1>
    62d4:	10 92 52 28 	sts	0x2852, r1	; 0x802852 <TEMP_BUFF>
    62d8:	10 92 53 28 	sts	0x2853, r1	; 0x802853 <TEMP_BUFF+0x1>
    62dc:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <REP>
    62e0:	90 91 9e 28 	lds	r25, 0x289E	; 0x80289e <REP+0x1>
    62e4:	89 2b       	or	r24, r25
    62e6:	39 f4       	brne	.+14     	; 0x62f6 <main+0xd3a>
    62e8:	81 e0       	ldi	r24, 0x01	; 1
    62ea:	80 93 8e 28 	sts	0x288E, r24	; 0x80288e <REPETATION_FLAG>
    62ee:	80 92 9d 28 	sts	0x289D, r8	; 0x80289d <REP>
    62f2:	90 92 9e 28 	sts	0x289E, r9	; 0x80289e <REP+0x1>
    62f6:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <FOR_REP>
    62fa:	90 91 98 28 	lds	r25, 0x2898	; 0x802898 <FOR_REP+0x1>
    62fe:	02 97       	sbiw	r24, 0x02	; 2
    6300:	11 f4       	brne	.+4      	; 0x6306 <main+0xd4a>
    6302:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <REPETATION_FLAG>
    6306:	80 91 66 28 	lds	r24, 0x2866	; 0x802866 <ElapsedTime>
    630a:	81 11       	cpse	r24, r1
    630c:	75 c6       	rjmp	.+3306   	; 0x6ff8 <main+0x1a3c>
    630e:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    6312:	81 11       	cpse	r24, r1
    6314:	05 c0       	rjmp	.+10     	; 0x6320 <main+0xd64>
    6316:	80 91 c0 28 	lds	r24, 0x28C0	; 0x8028c0 <TIME_SOCK_OR_TOTAL>
    631a:	88 23       	and	r24, r24
    631c:	09 f4       	brne	.+2      	; 0x6320 <main+0xd64>
    631e:	41 c6       	rjmp	.+3202   	; 0x6fa2 <main+0x19e6>
    6320:	81 e0       	ldi	r24, 0x01	; 1
    6322:	80 93 b8 28 	sts	0x28B8, r24	; 0x8028b8 <COUNTDOWN_START>
    6326:	80 91 bb 28 	lds	r24, 0x28BB	; 0x8028bb <SET_MIN>
    632a:	90 91 bc 28 	lds	r25, 0x28BC	; 0x8028bc <SET_MIN+0x1>
    632e:	6c e3       	ldi	r22, 0x3C	; 60
    6330:	70 e0       	ldi	r23, 0x00	; 0
    6332:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <__divmodhi4>
    6336:	60 93 6d 28 	sts	0x286D, r22	; 0x80286d <SET_HOUR>
    633a:	70 93 6e 28 	sts	0x286E, r23	; 0x80286e <SET_HOUR+0x1>
    633e:	80 93 4e 28 	sts	0x284E, r24	; 0x80284e <REMAIN_MIN>
    6342:	90 93 4f 28 	sts	0x284F, r25	; 0x80284f <REMAIN_MIN+0x1>
    6346:	20 e0       	ldi	r18, 0x00	; 0
    6348:	30 e0       	ldi	r19, 0x00	; 0
    634a:	40 e8       	ldi	r20, 0x80	; 128
    634c:	5f e3       	ldi	r21, 0x3F	; 63
    634e:	60 91 69 28 	lds	r22, 0x2869	; 0x802869 <DISP_INC>
    6352:	70 91 6a 28 	lds	r23, 0x286A	; 0x80286a <DISP_INC+0x1>
    6356:	80 91 6b 28 	lds	r24, 0x286B	; 0x80286b <DISP_INC+0x2>
    635a:	90 91 6c 28 	lds	r25, 0x286C	; 0x80286c <DISP_INC+0x3>
    635e:	7e d7       	rcall	.+3836   	; 0x725c <__addsf3>
    6360:	2b 01       	movw	r4, r22
    6362:	3c 01       	movw	r6, r24
    6364:	40 92 69 28 	sts	0x2869, r4	; 0x802869 <DISP_INC>
    6368:	50 92 6a 28 	sts	0x286A, r5	; 0x80286a <DISP_INC+0x1>
    636c:	60 92 6b 28 	sts	0x286B, r6	; 0x80286b <DISP_INC+0x2>
    6370:	70 92 6c 28 	sts	0x286C, r7	; 0x80286c <DISP_INC+0x3>
    6374:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    6378:	80 91 6d 28 	lds	r24, 0x286D	; 0x80286d <SET_HOUR>
    637c:	90 91 6e 28 	lds	r25, 0x286E	; 0x80286e <SET_HOUR+0x1>
    6380:	24 e6       	ldi	r18, 0x64	; 100
    6382:	28 9f       	mul	r18, r24
    6384:	b0 01       	movw	r22, r0
    6386:	29 9f       	mul	r18, r25
    6388:	70 0d       	add	r23, r0
    638a:	11 24       	eor	r1, r1
    638c:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <REMAIN_MIN>
    6390:	90 91 4f 28 	lds	r25, 0x284F	; 0x80284f <REMAIN_MIN+0x1>
    6394:	68 0f       	add	r22, r24
    6396:	79 1f       	adc	r23, r25
    6398:	07 2e       	mov	r0, r23
    639a:	00 0c       	add	r0, r0
    639c:	88 0b       	sbc	r24, r24
    639e:	99 0b       	sbc	r25, r25
    63a0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    63a4:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <VENT_FLAG>
    63a8:	88 23       	and	r24, r24
    63aa:	09 f4       	brne	.+2      	; 0x63ae <main+0xdf2>
    63ac:	43 c6       	rjmp	.+3206   	; 0x7034 <main+0x1a78>
    63ae:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    63b2:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    63b6:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    63ba:	10 92 9a 28 	sts	0x289A, r1	; 0x80289a <CHANGE1>
    63be:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
digitalWrite():
    63c2:	60 e0       	ldi	r22, 0x00	; 0
    63c4:	8c e0       	ldi	r24, 0x0C	; 12
    63c6:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
DISPLAY_DIGIT2():
    63ca:	00 93 de 28 	sts	0x28DE, r16	; 0x8028de <digits2>
    63ce:	10 93 df 28 	sts	0x28DF, r17	; 0x8028df <digits2+0x1>
    63d2:	89 e1       	ldi	r24, 0x19	; 25
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    63da:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    63de:	e2 e1       	ldi	r30, 0x12	; 18
    63e0:	f0 e0       	ldi	r31, 0x00	; 0
    63e2:	e0 93 e2 28 	sts	0x28E2, r30	; 0x8028e2 <digits2+0x4>
    63e6:	f0 93 e3 28 	sts	0x28E3, r31	; 0x8028e3 <digits2+0x5>
    63ea:	20 92 e4 28 	sts	0x28E4, r2	; 0x8028e4 <digits2+0x6>
    63ee:	30 92 e5 28 	sts	0x28E5, r3	; 0x8028e5 <digits2+0x7>
SET_SHORT_PRESS_FUNCTION():
    63f2:	80 91 c0 28 	lds	r24, 0x28C0	; 0x8028c0 <TIME_SOCK_OR_TOTAL>
    63f6:	81 11       	cpse	r24, r1
    63f8:	0a c6       	rjmp	.+3092   	; 0x700e <main+0x1a52>
DISPLAY_DIGIT1():
    63fa:	8c e0       	ldi	r24, 0x0C	; 12
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    6402:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    6406:	e0 92 d8 28 	sts	0x28D8, r14	; 0x8028d8 <digits1+0x2>
    640a:	f0 92 d9 28 	sts	0x28D9, r15	; 0x8028d9 <digits1+0x3>
    640e:	8d e0       	ldi	r24, 0x0D	; 13
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    6416:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    641a:	8a e0       	ldi	r24, 0x0A	; 10
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    6422:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
SET_SHORT_PRESS_FUNCTION():
    6426:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <currentMillis1>
    642a:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <currentMillis1+0x1>
    642e:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <currentMillis>
    6432:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <currentMillis+0x1>
    6436:	0e ce       	rjmp	.-996    	; 0x6054 <main+0xa98>
    6438:	10 92 ae 28 	sts	0x28AE, r1	; 0x8028ae <ExitFromProcess>
    643c:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <soak_once_flag>
    6440:	10 92 ac 28 	sts	0x28AC, r1	; 0x8028ac <Inprocess_flag>
    6444:	10 92 aa 28 	sts	0x28AA, r1	; 0x8028aa <TIME_INC>
    6448:	10 92 ab 28 	sts	0x28AB, r1	; 0x8028ab <TIME_INC+0x1>
    644c:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    6450:	81 11       	cpse	r24, r1
    6452:	82 c0       	rjmp	.+260    	; 0x6558 <main+0xf9c>
    6454:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <SET_TEMP_DEG>
    6458:	90 91 a9 28 	lds	r25, 0x28A9	; 0x8028a9 <SET_TEMP_DEG+0x1>
    645c:	80 93 10 29 	sts	0x2910, r24	; 0x802910 <SET_VALUE+0x2>
    6460:	90 93 11 29 	sts	0x2911, r25	; 0x802911 <SET_VALUE+0x3>
    6464:	88 e9       	ldi	r24, 0x98	; 152
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    646c:	d8 2e       	mov	r13, r24
    646e:	89 e9       	ldi	r24, 0x99	; 153
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    6476:	2d 2d       	mov	r18, r13
    6478:	30 e0       	ldi	r19, 0x00	; 0
    647a:	32 2f       	mov	r19, r18
    647c:	22 27       	eor	r18, r18
    647e:	82 0f       	add	r24, r18
    6480:	93 2f       	mov	r25, r19
    6482:	91 1d       	adc	r25, r1
    6484:	80 93 14 29 	sts	0x2914, r24	; 0x802914 <SET_VALUE+0x6>
    6488:	90 93 15 29 	sts	0x2915, r25	; 0x802915 <SET_VALUE+0x7>
    648c:	8a e9       	ldi	r24, 0x9A	; 154
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    6494:	d8 2e       	mov	r13, r24
    6496:	8b e9       	ldi	r24, 0x9B	; 155
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	0e 94 21 13 	call	0x2642	; 0x2642 <EEPROMClass::read(int) [clone .isra.0]>
    649e:	2d 2d       	mov	r18, r13
    64a0:	30 e0       	ldi	r19, 0x00	; 0
    64a2:	32 2f       	mov	r19, r18
    64a4:	22 27       	eor	r18, r18
    64a6:	82 0f       	add	r24, r18
    64a8:	93 2f       	mov	r25, r19
    64aa:	91 1d       	adc	r25, r1
    64ac:	80 93 16 29 	sts	0x2916, r24	; 0x802916 <SET_VALUE+0x8>
    64b0:	90 93 17 29 	sts	0x2917, r25	; 0x802917 <SET_VALUE+0x9>
    64b4:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <ElapsedMinute>
    64b8:	10 92 a6 28 	sts	0x28A6, r1	; 0x8028a6 <ElapsedMinute+0x1>
    64bc:	80 91 a4 28 	lds	r24, 0x28A4	; 0x8028a4 <Inprocess_autoresume_flag>
    64c0:	88 23       	and	r24, r24
    64c2:	09 f4       	brne	.+2      	; 0x64c6 <main+0xf0a>
    64c4:	a0 c0       	rjmp	.+320    	; 0x6606 <main+0x104a>
    64c6:	80 91 a3 28 	lds	r24, 0x28A3	; 0x8028a3 <EEPROM_AUTO_RESUM_SET>
    64ca:	88 23       	and	r24, r24
    64cc:	09 f4       	brne	.+2      	; 0x64d0 <main+0xf14>
    64ce:	9b c0       	rjmp	.+310    	; 0x6606 <main+0x104a>
    64d0:	20 e0       	ldi	r18, 0x00	; 0
    64d2:	30 e0       	ldi	r19, 0x00	; 0
    64d4:	40 e4       	ldi	r20, 0x40	; 64
    64d6:	50 e4       	ldi	r21, 0x40	; 64
    64d8:	60 91 9f 28 	lds	r22, 0x289F	; 0x80289f <z>
    64dc:	70 91 a0 28 	lds	r23, 0x28A0	; 0x8028a0 <z+0x1>
    64e0:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <z+0x2>
    64e4:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <z+0x3>
    64e8:	1d d7       	rcall	.+3642   	; 0x7324 <__cmpsf2>
    64ea:	87 ff       	sbrs	r24, 7
    64ec:	88 c0       	rjmp	.+272    	; 0x65fe <main+0x1042>
    64ee:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    64f2:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    64f6:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    64fa:	c0 90 cf 28 	lds	r12, 0x28CF	; 0x8028cf <i>
    64fe:	d0 90 d0 28 	lds	r13, 0x28D0	; 0x8028d0 <i+0x1>
    6502:	3b e4       	ldi	r19, 0x4B	; 75
    6504:	c3 16       	cp	r12, r19
    6506:	d1 04       	cpc	r13, r1
    6508:	8c f5       	brge	.+98     	; 0x656c <main+0xfb0>
digitalWrite():
    650a:	61 e0       	ldi	r22, 0x01	; 1
    650c:	85 e1       	ldi	r24, 0x15	; 21
    650e:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
DISPLAY_DIGIT1():
    6512:	88 e1       	ldi	r24, 0x18	; 24
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    651a:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    651e:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    6522:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    6526:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    652a:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    652e:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    6532:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
DISPLAY_DIGIT2():
    6536:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    653a:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    653e:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    6542:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    6546:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    654a:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    654e:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    6552:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
    6556:	68 cc       	rjmp	.-1840   	; 0x5e28 <main+0x86c>
SET_SHORT_PRESS_FUNCTION():
    6558:	80 91 a7 28 	lds	r24, 0x28A7	; 0x8028a7 <EnergySetValue>
    655c:	08 2e       	mov	r0, r24
    655e:	00 0c       	add	r0, r0
    6560:	99 0b       	sbc	r25, r25
    6562:	80 93 1a 29 	sts	0x291A, r24	; 0x80291a <SET_VALUE+0xc>
    6566:	90 93 1b 29 	sts	0x291B, r25	; 0x80291b <SET_VALUE+0xd>
    656a:	7c cf       	rjmp	.-264    	; 0x6464 <main+0xea8>
digitalWrite():
    656c:	60 e0       	ldi	r22, 0x00	; 0
    656e:	85 e1       	ldi	r24, 0x15	; 21
    6570:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
DISPLAY_DIGIT2():
    6574:	8b e0       	ldi	r24, 0x0B	; 11
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    657c:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6580:	81 e1       	ldi	r24, 0x11	; 17
    6582:	90 e0       	ldi	r25, 0x00	; 0
    6584:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    6588:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    658c:	e0 92 e2 28 	sts	0x28E2, r14	; 0x8028e2 <digits2+0x4>
    6590:	f0 92 e3 28 	sts	0x28E3, r15	; 0x8028e3 <digits2+0x5>
    6594:	2c e0       	ldi	r18, 0x0C	; 12
    6596:	30 e0       	ldi	r19, 0x00	; 0
    6598:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <digits2+0x6>
    659c:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    65a0:	20 93 d6 28 	sts	0x28D6, r18	; 0x8028d6 <digits1>
    65a4:	30 93 d7 28 	sts	0x28D7, r19	; 0x8028d7 <digits1+0x1>
    65a8:	00 93 d8 28 	sts	0x28D8, r16	; 0x8028d8 <digits1+0x2>
    65ac:	10 93 d9 28 	sts	0x28D9, r17	; 0x8028d9 <digits1+0x3>
    65b0:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    65b4:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    65b8:	00 93 dc 28 	sts	0x28DC, r16	; 0x8028dc <digits1+0x6>
    65bc:	10 93 dd 28 	sts	0x28DD, r17	; 0x8028dd <digits1+0x7>
SET_SHORT_PRESS_FUNCTION():
    65c0:	47 e9       	ldi	r20, 0x97	; 151
    65c2:	c4 16       	cp	r12, r20
    65c4:	d1 04       	cpc	r13, r1
    65c6:	0c f4       	brge	.+2      	; 0x65ca <main+0x100e>
    65c8:	2f cc       	rjmp	.-1954   	; 0x5e28 <main+0x86c>
    65ca:	20 e0       	ldi	r18, 0x00	; 0
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	40 e8       	ldi	r20, 0x80	; 128
    65d0:	5f e3       	ldi	r21, 0x3F	; 63
    65d2:	60 91 9f 28 	lds	r22, 0x289F	; 0x80289f <z>
    65d6:	70 91 a0 28 	lds	r23, 0x28A0	; 0x8028a0 <z+0x1>
    65da:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <z+0x2>
    65de:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <z+0x3>
    65e2:	3c d6       	rcall	.+3192   	; 0x725c <__addsf3>
    65e4:	60 93 9f 28 	sts	0x289F, r22	; 0x80289f <z>
    65e8:	70 93 a0 28 	sts	0x28A0, r23	; 0x8028a0 <z+0x1>
    65ec:	80 93 a1 28 	sts	0x28A1, r24	; 0x8028a1 <z+0x2>
    65f0:	90 93 a2 28 	sts	0x28A2, r25	; 0x8028a2 <z+0x3>
    65f4:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    65f8:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    65fc:	15 cc       	rjmp	.-2006   	; 0x5e28 <main+0x86c>
    65fe:	85 e0       	ldi	r24, 0x05	; 5
    6600:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
    6604:	11 cc       	rjmp	.-2014   	; 0x5e28 <main+0x86c>
    6606:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    660a:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <DOT1_0>
    660e:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <DOT1_2>
    6612:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    6616:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <DOT2_0>
    661a:	10 92 9d 28 	sts	0x289D, r1	; 0x80289d <REP>
    661e:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <REP+0x1>
    6622:	10 92 9b 28 	sts	0x289B, r1	; 0x80289b <REP1>
    6626:	10 92 9c 28 	sts	0x289C, r1	; 0x80289c <REP1+0x1>
    662a:	10 92 9a 28 	sts	0x289A, r1	; 0x80289a <CHANGE1>
    662e:	10 92 0a 29 	sts	0x290A, r1	; 0x80290a <VENT_FLAG>
    6632:	10 92 99 28 	sts	0x2899, r1	; 0x802899 <IN_ERROR>
    6636:	10 92 97 28 	sts	0x2897, r1	; 0x802897 <FOR_REP>
    663a:	10 92 98 28 	sts	0x2898, r1	; 0x802898 <FOR_REP+0x1>
    663e:	10 92 95 28 	sts	0x2895, r1	; 0x802895 <FOR_REP2>
    6642:	10 92 96 28 	sts	0x2896, r1	; 0x802896 <FOR_REP2+0x1>
    6646:	10 92 cd 28 	sts	0x28CD, r1	; 0x8028cd <CAL2_START>
    664a:	10 92 34 2a 	sts	0x2A34, r1	; 0x802a34 <PID_SETPOINT>
    664e:	10 92 35 2a 	sts	0x2A35, r1	; 0x802a35 <PID_SETPOINT+0x1>
    6652:	10 92 36 2a 	sts	0x2A36, r1	; 0x802a36 <PID_SETPOINT+0x2>
    6656:	10 92 37 2a 	sts	0x2A37, r1	; 0x802a37 <PID_SETPOINT+0x3>
    665a:	10 92 93 28 	sts	0x2893, r1	; 0x802893 <STOP_PROCESS>
    665e:	10 92 94 28 	sts	0x2894, r1	; 0x802894 <STOP_PROCESS+0x1>
stop():
    6662:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    6666:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    666a:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    666e:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    6672:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    6676:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    667a:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
SET_SHORT_PRESS_FUNCTION():
    667e:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <RATE_OF_HEATING>
    6682:	10 92 90 28 	sts	0x2890, r1	; 0x802890 <RATE_OF_HEATING+0x1>
    6686:	10 92 91 28 	sts	0x2891, r1	; 0x802891 <RATE_OF_HEATING+0x2>
    668a:	10 92 92 28 	sts	0x2892, r1	; 0x802892 <RATE_OF_HEATING+0x3>
    668e:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <MODE_BUT_SINGLE_PRESS_IN_SETTINGS>
    6692:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <EXECUTE_PID_LOOP>
    6696:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <REPETATION_FLAG>
    669a:	81 e0       	ldi	r24, 0x01	; 1
    669c:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <CHECK_RATE_OF_HEATING>
    66a0:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <SELECTION_PARAMETER>
    66a4:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <SELECTION_PARAMETER+0x1>
digitalWrite():
    66a8:	60 e0       	ldi	r22, 0x00	; 0
    66aa:	88 e1       	ldi	r24, 0x18	; 24
    66ac:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    66b0:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <CounT>
    66b4:	90 91 8c 28 	lds	r25, 0x288C	; 0x80288c <CounT+0x1>
    66b8:	01 96       	adiw	r24, 0x01	; 1
    66ba:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <CounT>
    66be:	90 93 8c 28 	sts	0x288C, r25	; 0x80288c <CounT+0x1>
    66c2:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <incArray>
    66c6:	90 91 8a 28 	lds	r25, 0x288A	; 0x80288a <incArray+0x1>
    66ca:	06 97       	sbiw	r24, 0x06	; 6
    66cc:	0c f4       	brge	.+2      	; 0x66d0 <main+0x1114>
    66ce:	6d c0       	rjmp	.+218    	; 0x67aa <main+0x11ee>
    66d0:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <checkTempRaised>
    66d4:	81 11       	cpse	r24, r1
    66d6:	69 c0       	rjmp	.+210    	; 0x67aa <main+0x11ee>
    66d8:	ac e7       	ldi	r26, 0x7C	; 124
    66da:	b8 e2       	ldi	r27, 0x28	; 40
    66dc:	e2 e7       	ldi	r30, 0x72	; 114
    66de:	f8 e2       	ldi	r31, 0x28	; 40
    66e0:	86 e8       	ldi	r24, 0x86	; 134
    66e2:	98 e2       	ldi	r25, 0x28	; 40
    66e4:	4d 91       	ld	r20, X+
    66e6:	5d 91       	ld	r21, X+
    66e8:	2d 91       	ld	r18, X+
    66ea:	3c 91       	ld	r19, X
    66ec:	11 97       	sbiw	r26, 0x01	; 1
    66ee:	42 17       	cp	r20, r18
    66f0:	53 07       	cpc	r21, r19
    66f2:	0c f0       	brlt	.+2      	; 0x66f6 <main+0x113a>
    66f4:	fe c0       	rjmp	.+508    	; 0x68f2 <main+0x1336>
    66f6:	21 e0       	ldi	r18, 0x01	; 1
    66f8:	30 e0       	ldi	r19, 0x00	; 0
    66fa:	20 83       	st	Z, r18
    66fc:	31 83       	std	Z+1, r19	; 0x01
    66fe:	32 96       	adiw	r30, 0x02	; 2
    6700:	8a 17       	cp	r24, r26
    6702:	9b 07       	cpc	r25, r27
    6704:	79 f7       	brne	.-34     	; 0x66e4 <main+0x1128>
    6706:	80 91 72 28 	lds	r24, 0x2872	; 0x802872 <checkArray>
    670a:	90 91 73 28 	lds	r25, 0x2873	; 0x802873 <checkArray+0x1>
    670e:	20 91 74 28 	lds	r18, 0x2874	; 0x802874 <checkArray+0x2>
    6712:	30 91 75 28 	lds	r19, 0x2875	; 0x802875 <checkArray+0x3>
    6716:	82 23       	and	r24, r18
    6718:	93 23       	and	r25, r19
    671a:	20 91 76 28 	lds	r18, 0x2876	; 0x802876 <checkArray+0x4>
    671e:	30 91 77 28 	lds	r19, 0x2877	; 0x802877 <checkArray+0x5>
    6722:	82 23       	and	r24, r18
    6724:	93 23       	and	r25, r19
    6726:	20 91 78 28 	lds	r18, 0x2878	; 0x802878 <checkArray+0x6>
    672a:	30 91 79 28 	lds	r19, 0x2879	; 0x802879 <checkArray+0x7>
    672e:	82 23       	and	r24, r18
    6730:	93 23       	and	r25, r19
    6732:	20 91 7a 28 	lds	r18, 0x287A	; 0x80287a <checkArray+0x8>
    6736:	30 91 7b 28 	lds	r19, 0x287B	; 0x80287b <checkArray+0x9>
    673a:	82 23       	and	r24, r18
    673c:	93 23       	and	r25, r19
    673e:	89 2b       	or	r24, r25
    6740:	09 f4       	brne	.+2      	; 0x6744 <main+0x1188>
    6742:	df c0       	rjmp	.+446    	; 0x6902 <main+0x1346>
interval():
    6744:	80 91 45 2c 	lds	r24, 0x2C45	; 0x802c45 <flahDisplay+0x9>
    6748:	90 91 46 2c 	lds	r25, 0x2C46	; 0x802c46 <flahDisplay+0xa>
    674c:	89 2b       	or	r24, r25
    674e:	09 f4       	brne	.+2      	; 0x6752 <main+0x1196>
    6750:	d3 c0       	rjmp	.+422    	; 0x68f8 <main+0x133c>
    6752:	84 ef       	ldi	r24, 0xF4	; 244
    6754:	91 e0       	ldi	r25, 0x01	; 1
    6756:	a0 e0       	ldi	r26, 0x00	; 0
    6758:	b0 e0       	ldi	r27, 0x00	; 0
    675a:	80 93 3d 2c 	sts	0x2C3D, r24	; 0x802c3d <flahDisplay+0x1>
    675e:	90 93 3e 2c 	sts	0x2C3E, r25	; 0x802c3e <flahDisplay+0x2>
    6762:	a0 93 3f 2c 	sts	0x2C3F, r26	; 0x802c3f <flahDisplay+0x3>
    6766:	b0 93 40 2c 	sts	0x2C40, r27	; 0x802c40 <flahDisplay+0x4>
SET_SHORT_PRESS_FUNCTION():
    676a:	81 e0       	ldi	r24, 0x01	; 1
    676c:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <checkTempRaised>
    6770:	80 91 71 28 	lds	r24, 0x2871	; 0x802871 <processRunUpdates>
    6774:	88 23       	and	r24, r24
    6776:	a9 f0       	breq	.+42     	; 0x67a2 <main+0x11e6>
interval():
    6778:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <tempRiseCheck+0x9>
    677c:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <tempRiseCheck+0xa>
    6780:	89 2b       	or	r24, r25
    6782:	09 f4       	brne	.+2      	; 0x6786 <main+0x11ca>
    6784:	c1 c0       	rjmp	.+386    	; 0x6908 <main+0x134c>
    6786:	80 e3       	ldi	r24, 0x30	; 48
    6788:	95 e7       	ldi	r25, 0x75	; 117
    678a:	a0 e0       	ldi	r26, 0x00	; 0
    678c:	b0 e0       	ldi	r27, 0x00	; 0
    678e:	80 93 58 2c 	sts	0x2C58, r24	; 0x802c58 <tempRiseCheck+0x1>
    6792:	90 93 59 2c 	sts	0x2C59, r25	; 0x802c59 <tempRiseCheck+0x2>
    6796:	a0 93 5a 2c 	sts	0x2C5A, r26	; 0x802c5a <tempRiseCheck+0x3>
    679a:	b0 93 5b 2c 	sts	0x2C5B, r27	; 0x802c5b <tempRiseCheck+0x4>
SET_SHORT_PRESS_FUNCTION():
    679e:	10 92 71 28 	sts	0x2871, r1	; 0x802871 <processRunUpdates>
    67a2:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <incArray>
    67a6:	10 92 8a 28 	sts	0x288A, r1	; 0x80288a <incArray+0x1>
    67aa:	40 90 12 28 	lds	r4, 0x2812	; 0x802812 <TEMP_DEG>
    67ae:	50 90 13 28 	lds	r5, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    67b2:	60 90 14 28 	lds	r6, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    67b6:	70 90 15 28 	lds	r7, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    67ba:	20 e0       	ldi	r18, 0x00	; 0
    67bc:	30 e0       	ldi	r19, 0x00	; 0
    67be:	47 ed       	ldi	r20, 0xD7	; 215
    67c0:	53 e4       	ldi	r21, 0x43	; 67
    67c2:	c3 01       	movw	r24, r6
    67c4:	b2 01       	movw	r22, r4
    67c6:	fd d6       	rcall	.+3578   	; 0x75c2 <__gesf2>
    67c8:	87 fd       	sbrc	r24, 7
    67ca:	04 c0       	rjmp	.+8      	; 0x67d4 <main+0x1218>
digitalWrite():
    67cc:	60 e0       	ldi	r22, 0x00	; 0
    67ce:	81 e2       	ldi	r24, 0x21	; 33
    67d0:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    67d4:	80 91 70 28 	lds	r24, 0x2870	; 0x802870 <Probe_error_flag>
SET_SHORT_PRESS_FUNCTION():
    67d8:	90 91 88 28 	lds	r25, 0x2888	; 0x802888 <checkTempRaised>
    67dc:	91 11       	cpse	r25, r1
    67de:	38 c1       	rjmp	.+624    	; 0x6a50 <main+0x1494>
    67e0:	81 11       	cpse	r24, r1
    67e2:	3c c0       	rjmp	.+120    	; 0x685c <main+0x12a0>
digitalWrite():
    67e4:	60 e0       	ldi	r22, 0x00	; 0
    67e6:	85 e1       	ldi	r24, 0x15	; 21
    67e8:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    67ec:	20 e0       	ldi	r18, 0x00	; 0
    67ee:	30 e0       	ldi	r19, 0x00	; 0
    67f0:	48 e4       	ldi	r20, 0x48	; 72
    67f2:	52 e4       	ldi	r21, 0x42	; 66
    67f4:	c3 01       	movw	r24, r6
    67f6:	b2 01       	movw	r22, r4
    67f8:	e4 d6       	rcall	.+3528   	; 0x75c2 <__gesf2>
    67fa:	87 fd       	sbrc	r24, 7
    67fc:	ee c0       	rjmp	.+476    	; 0x69da <main+0x141e>
    67fe:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    6802:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <CounT>
    6806:	90 91 8c 28 	lds	r25, 0x288C	; 0x80288c <CounT+0x1>
    680a:	80 31       	cpi	r24, 0x10	; 16
    680c:	37 e2       	ldi	r19, 0x27	; 39
    680e:	93 07       	cpc	r25, r19
    6810:	08 f0       	brcs	.+2      	; 0x6814 <main+0x1258>
    6812:	96 c0       	rjmp	.+300    	; 0x6940 <main+0x1384>
    6814:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    6818:	81 11       	cpse	r24, r1
    681a:	7b c0       	rjmp	.+246    	; 0x6912 <main+0x1356>
    681c:	20 e0       	ldi	r18, 0x00	; 0
    681e:	30 e0       	ldi	r19, 0x00	; 0
    6820:	40 e2       	ldi	r20, 0x20	; 32
    6822:	51 e4       	ldi	r21, 0x41	; 65
    6824:	c3 01       	movw	r24, r6
    6826:	b2 01       	movw	r22, r4
    6828:	d0 d6       	rcall	.+3488   	; 0x75ca <__mulsf3>
    682a:	e8 d5       	rcall	.+3024   	; 0x73fc <__fixsfsi>
    682c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    6830:	8a e0       	ldi	r24, 0x0A	; 10
    6832:	90 e0       	ldi	r25, 0x00	; 0
    6834:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    6838:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
    683c:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
digitalWrite():
    6840:	61 e0       	ldi	r22, 0x01	; 1
    6842:	8c e0       	ldi	r24, 0x0C	; 12
    6844:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6848:	60 e0       	ldi	r22, 0x00	; 0
    684a:	70 e0       	ldi	r23, 0x00	; 0
    684c:	cb 01       	movw	r24, r22
    684e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    6852:	80 91 70 28 	lds	r24, 0x2870	; 0x802870 <Probe_error_flag>
    6856:	88 23       	and	r24, r24
    6858:	09 f4       	brne	.+2      	; 0x685c <main+0x12a0>
    685a:	e6 ca       	rjmp	.-2612   	; 0x5e28 <main+0x86c>
    685c:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    6860:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
digitalWrite():
    6864:	60 e0       	ldi	r22, 0x00	; 0
    6866:	88 e1       	ldi	r24, 0x18	; 24
    6868:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    686c:	60 e0       	ldi	r22, 0x00	; 0
    686e:	81 e2       	ldi	r24, 0x21	; 33
    6870:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6874:	61 e0       	ldi	r22, 0x01	; 1
    6876:	8d e1       	ldi	r24, 0x1D	; 29
    6878:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    687c:	61 e0       	ldi	r22, 0x01	; 1
    687e:	8c e1       	ldi	r24, 0x1C	; 28
    6880:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6884:	61 e0       	ldi	r22, 0x01	; 1
    6886:	8b e1       	ldi	r24, 0x1B	; 27
    6888:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    688c:	60 e0       	ldi	r22, 0x00	; 0
    688e:	8d e0       	ldi	r24, 0x0D	; 13
    6890:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6894:	60 e0       	ldi	r22, 0x00	; 0
    6896:	8c e0       	ldi	r24, 0x0C	; 12
    6898:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    689c:	80 91 6f 28 	lds	r24, 0x286F	; 0x80286f <SSR_fail_toggle>
    68a0:	81 11       	cpse	r24, r1
    68a2:	58 c1       	rjmp	.+688    	; 0x6b54 <main+0x1598>
digitalWrite():
    68a4:	60 e0       	ldi	r22, 0x00	; 0
    68a6:	85 e1       	ldi	r24, 0x15	; 21
    68a8:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
DISPLAY_DIGIT2():
    68ac:	88 e1       	ldi	r24, 0x18	; 24
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    68b4:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    68b8:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    68bc:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    68c0:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    68c4:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    68c8:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    68cc:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    68d0:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    68d4:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    68d8:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    68dc:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    68e0:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    68e4:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    68e8:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    68ec:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    68f0:	9b ca       	rjmp	.-2762   	; 0x5e28 <main+0x86c>
SET_SHORT_PRESS_FUNCTION():
    68f2:	10 82       	st	Z, r1
    68f4:	11 82       	std	Z+1, r1	; 0x01
    68f6:	03 cf       	rjmp	.-506    	; 0x66fe <main+0x1142>
main():
    68f8:	80 e2       	ldi	r24, 0x20	; 32
    68fa:	91 ea       	ldi	r25, 0xA1	; 161
    68fc:	a7 e0       	ldi	r26, 0x07	; 7
    68fe:	b0 e0       	ldi	r27, 0x00	; 0
    6900:	2c cf       	rjmp	.-424    	; 0x675a <main+0x119e>
SET_SHORT_PRESS_FUNCTION():
    6902:	10 92 88 28 	sts	0x2888, r1	; 0x802888 <checkTempRaised>
    6906:	34 cf       	rjmp	.-408    	; 0x6770 <main+0x11b4>
main():
    6908:	80 e8       	ldi	r24, 0x80	; 128
    690a:	93 ec       	ldi	r25, 0xC3	; 195
    690c:	a9 ec       	ldi	r26, 0xC9	; 201
    690e:	b1 e0       	ldi	r27, 0x01	; 1
    6910:	3e cf       	rjmp	.-388    	; 0x678e <main+0x11d2>
SET_SHORT_PRESS_FUNCTION():
    6912:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    6916:	81 e0       	ldi	r24, 0x01	; 1
    6918:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <DOT2_1>
    691c:	60 e0       	ldi	r22, 0x00	; 0
    691e:	70 e0       	ldi	r23, 0x00	; 0
    6920:	cb 01       	movw	r24, r22
    6922:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    6926:	8f e0       	ldi	r24, 0x0F	; 15
    6928:	90 e0       	ldi	r25, 0x00	; 0
    692a:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    692e:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6932:	84 e1       	ldi	r24, 0x14	; 20
    6934:	90 e0       	ldi	r25, 0x00	; 0
    6936:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    693a:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    693e:	80 cf       	rjmp	.-256    	; 0x6840 <main+0x1284>
    6940:	9c 01       	movw	r18, r24
    6942:	21 51       	subi	r18, 0x11	; 17
    6944:	37 42       	sbci	r19, 0x27	; 39
    6946:	2f 31       	cpi	r18, 0x1F	; 31
    6948:	3e 44       	sbci	r19, 0x4E	; 78
    694a:	f0 f5       	brcc	.+124    	; 0x69c8 <main+0x140c>
digitalWrite():
    694c:	60 e0       	ldi	r22, 0x00	; 0
    694e:	8c e0       	ldi	r24, 0x0C	; 12
    6950:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6954:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
DISPLAY_DIGIT2():
    6958:	8e e1       	ldi	r24, 0x1E	; 30
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    6960:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6964:	e0 92 e0 28 	sts	0x28E0, r14	; 0x8028e0 <digits2+0x2>
    6968:	f0 92 e1 28 	sts	0x28E1, r15	; 0x8028e1 <digits2+0x3>
    696c:	00 93 e2 28 	sts	0x28E2, r16	; 0x8028e2 <digits2+0x4>
    6970:	10 93 e3 28 	sts	0x28E3, r17	; 0x8028e3 <digits2+0x5>
    6974:	88 e1       	ldi	r24, 0x18	; 24
    6976:	90 e0       	ldi	r25, 0x00	; 0
    6978:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    697c:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    6980:	8c e0       	ldi	r24, 0x0C	; 12
    6982:	90 e0       	ldi	r25, 0x00	; 0
    6984:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    6988:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    698c:	82 e2       	ldi	r24, 0x22	; 34
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    6994:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    6998:	81 e1       	ldi	r24, 0x11	; 17
    699a:	90 e0       	ldi	r25, 0x00	; 0
    699c:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    69a0:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    69a4:	85 e1       	ldi	r24, 0x15	; 21
    69a6:	90 e0       	ldi	r25, 0x00	; 0
    69a8:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    69ac:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
SET_SHORT_PRESS_FUNCTION():
    69b0:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    69b4:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    69b8:	c3 97       	sbiw	r24, 0x33	; 51
    69ba:	0c f4       	brge	.+2      	; 0x69be <main+0x1402>
    69bc:	35 ca       	rjmp	.-2966   	; 0x5e28 <main+0x86c>
    69be:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    69c2:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    69c6:	45 cf       	rjmp	.-374    	; 0x6852 <main+0x1296>
    69c8:	81 33       	cpi	r24, 0x31	; 49
    69ca:	95 47       	sbci	r25, 0x75	; 117
    69cc:	0c f4       	brge	.+2      	; 0x69d0 <main+0x1414>
    69ce:	2c ca       	rjmp	.-2984   	; 0x5e28 <main+0x86c>
    69d0:	10 92 8b 28 	sts	0x288B, r1	; 0x80288b <CounT>
    69d4:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <CounT+0x1>
    69d8:	3c cf       	rjmp	.-392    	; 0x6852 <main+0x1296>
digitalWrite():
    69da:	61 e0       	ldi	r22, 0x01	; 1
    69dc:	8c e0       	ldi	r24, 0x0C	; 12
    69de:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    69e2:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    69e6:	81 11       	cpse	r24, r1
    69e8:	1c c0       	rjmp	.+56     	; 0x6a22 <main+0x1466>
    69ea:	20 e0       	ldi	r18, 0x00	; 0
    69ec:	30 e0       	ldi	r19, 0x00	; 0
    69ee:	40 e2       	ldi	r20, 0x20	; 32
    69f0:	51 e4       	ldi	r21, 0x41	; 65
    69f2:	c3 01       	movw	r24, r6
    69f4:	b2 01       	movw	r22, r4
    69f6:	e9 d5       	rcall	.+3026   	; 0x75ca <__mulsf3>
    69f8:	01 d5       	rcall	.+2562   	; 0x73fc <__fixsfsi>
    69fa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    69fe:	8a e0       	ldi	r24, 0x0A	; 10
    6a00:	90 e0       	ldi	r25, 0x00	; 0
    6a02:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    6a06:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
    6a0a:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    6a0e:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    6a12:	60 e0       	ldi	r22, 0x00	; 0
    6a14:	70 e0       	ldi	r23, 0x00	; 0
    6a16:	cb 01       	movw	r24, r22
    6a18:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    6a1c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Bclass::ALL_LED_OFF() [clone .constprop.41]>
    6a20:	18 cf       	rjmp	.-464    	; 0x6852 <main+0x1296>
    6a22:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    6a26:	81 e0       	ldi	r24, 0x01	; 1
    6a28:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <DOT2_1>
    6a2c:	60 e0       	ldi	r22, 0x00	; 0
    6a2e:	70 e0       	ldi	r23, 0x00	; 0
    6a30:	cb 01       	movw	r24, r22
    6a32:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    6a36:	8f e0       	ldi	r24, 0x0F	; 15
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    6a3e:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6a42:	84 e1       	ldi	r24, 0x14	; 20
    6a44:	90 e0       	ldi	r25, 0x00	; 0
    6a46:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    6a4a:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    6a4e:	e1 cf       	rjmp	.-62     	; 0x6a12 <main+0x1456>
    6a50:	81 11       	cpse	r24, r1
    6a52:	04 cf       	rjmp	.-504    	; 0x685c <main+0x12a0>
digitalWrite():
    6a54:	60 e0       	ldi	r22, 0x00	; 0
    6a56:	81 e2       	ldi	r24, 0x21	; 33
    6a58:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6a5c:	61 e0       	ldi	r22, 0x01	; 1
    6a5e:	8d e1       	ldi	r24, 0x1D	; 29
    6a60:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6a64:	61 e0       	ldi	r22, 0x01	; 1
    6a66:	8c e1       	ldi	r24, 0x1C	; 28
    6a68:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6a6c:	61 e0       	ldi	r22, 0x01	; 1
    6a6e:	8b e1       	ldi	r24, 0x1B	; 27
    6a70:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6a74:	60 e0       	ldi	r22, 0x00	; 0
    6a76:	8a e1       	ldi	r24, 0x1A	; 26
    6a78:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6a7c:	60 e0       	ldi	r22, 0x00	; 0
    6a7e:	8d e0       	ldi	r24, 0x0D	; 13
    6a80:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6a84:	60 e0       	ldi	r22, 0x00	; 0
    6a86:	8c e0       	ldi	r24, 0x0C	; 12
    6a88:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6a8c:	8c e3       	ldi	r24, 0x3C	; 60
    6a8e:	9c e2       	ldi	r25, 0x2C	; 44
    6a90:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
    6a94:	80 91 6f 28 	lds	r24, 0x286F	; 0x80286f <SSR_fail_toggle>
    6a98:	81 11       	cpse	r24, r1
    6a9a:	27 c0       	rjmp	.+78     	; 0x6aea <main+0x152e>
digitalWrite():
    6a9c:	60 e0       	ldi	r22, 0x00	; 0
    6a9e:	85 e1       	ldi	r24, 0x15	; 21
    6aa0:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
DISPLAY_DIGIT2():
    6aa4:	88 e1       	ldi	r24, 0x18	; 24
    6aa6:	90 e0       	ldi	r25, 0x00	; 0
    6aa8:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    6aac:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6ab0:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    6ab4:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    6ab8:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    6abc:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    6ac0:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    6ac4:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    6ac8:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    6acc:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    6ad0:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    6ad4:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    6ad8:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    6adc:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    6ae0:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    6ae4:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    6ae8:	b4 ce       	rjmp	.-664    	; 0x6852 <main+0x1296>
digitalWrite():
    6aea:	61 e0       	ldi	r22, 0x01	; 1
    6aec:	85 e1       	ldi	r24, 0x15	; 21
    6aee:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6af2:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
DISPLAY_DIGIT2():
    6af6:	8c e0       	ldi	r24, 0x0C	; 12
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    6afe:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6b02:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    6b06:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    6b0a:	81 e1       	ldi	r24, 0x11	; 17
    6b0c:	90 e0       	ldi	r25, 0x00	; 0
    6b0e:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    6b12:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    6b16:	88 e1       	ldi	r24, 0x18	; 24
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    6b1e:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    6b22:	85 e1       	ldi	r24, 0x15	; 21
    6b24:	90 e0       	ldi	r25, 0x00	; 0
    6b26:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    6b2a:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    6b2e:	8d e0       	ldi	r24, 0x0D	; 13
    6b30:	90 e0       	ldi	r25, 0x00	; 0
    6b32:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    6b36:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    6b3a:	89 e1       	ldi	r24, 0x19	; 25
    6b3c:	90 e0       	ldi	r25, 0x00	; 0
    6b3e:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    6b42:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    6b46:	2a e1       	ldi	r18, 0x1A	; 26
    6b48:	30 e0       	ldi	r19, 0x00	; 0
    6b4a:	20 93 dc 28 	sts	0x28DC, r18	; 0x8028dc <digits1+0x6>
    6b4e:	30 93 dd 28 	sts	0x28DD, r19	; 0x8028dd <digits1+0x7>
    6b52:	7f ce       	rjmp	.-770    	; 0x6852 <main+0x1296>
digitalWrite():
    6b54:	61 e0       	ldi	r22, 0x01	; 1
    6b56:	85 e1       	ldi	r24, 0x15	; 21
    6b58:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
DISPLAY_DIGIT2():
    6b5c:	8b e0       	ldi	r24, 0x0B	; 11
    6b5e:	90 e0       	ldi	r25, 0x00	; 0
    6b60:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    6b64:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6b68:	81 e1       	ldi	r24, 0x11	; 17
    6b6a:	90 e0       	ldi	r25, 0x00	; 0
    6b6c:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    6b70:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    6b74:	e0 92 e2 28 	sts	0x28E2, r14	; 0x8028e2 <digits2+0x4>
    6b78:	f0 92 e3 28 	sts	0x28E3, r15	; 0x8028e3 <digits2+0x5>
    6b7c:	2e e0       	ldi	r18, 0x0E	; 14
    6b7e:	30 e0       	ldi	r19, 0x00	; 0
    6b80:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <digits2+0x6>
    6b84:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <digits2+0x7>
DISPLAY_DIGIT1():
    6b88:	2f e0       	ldi	r18, 0x0F	; 15
    6b8a:	30 e0       	ldi	r19, 0x00	; 0
    6b8c:	20 93 d6 28 	sts	0x28D6, r18	; 0x8028d6 <digits1>
    6b90:	30 93 d7 28 	sts	0x28D7, r19	; 0x8028d7 <digits1+0x1>
    6b94:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    6b98:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    6b9c:	e0 92 da 28 	sts	0x28DA, r14	; 0x8028da <digits1+0x4>
    6ba0:	f0 92 db 28 	sts	0x28DB, r15	; 0x8028db <digits1+0x5>
    6ba4:	a1 ce       	rjmp	.-702    	; 0x68e8 <main+0x132c>
SET_SHORT_PRESS_FUNCTION():
    6ba6:	89 e1       	ldi	r24, 0x19	; 25
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    6bae:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    6bb2:	84 c9       	rjmp	.-3320   	; 0x5ebc <main+0x900>
    6bb4:	81 e0       	ldi	r24, 0x01	; 1
    6bb6:	80 93 d1 28 	sts	0x28D1, r24	; 0x8028d1 <DOT2_2>
    6bba:	e0 91 1c 29 	lds	r30, 0x291C	; 0x80291c <ENTER_BUT>
    6bbe:	ee 0f       	add	r30, r30
    6bc0:	ff 0b       	sbc	r31, r31
    6bc2:	e2 5f       	subi	r30, 0xF2	; 242
    6bc4:	f6 4d       	sbci	r31, 0xD6	; 214
    6bc6:	80 81       	ld	r24, Z
    6bc8:	91 81       	ldd	r25, Z+1	; 0x01
    6bca:	2a e0       	ldi	r18, 0x0A	; 10
    6bcc:	28 9f       	mul	r18, r24
    6bce:	b0 01       	movw	r22, r0
    6bd0:	29 9f       	mul	r18, r25
    6bd2:	70 0d       	add	r23, r0
    6bd4:	11 24       	eor	r1, r1
    6bd6:	07 2e       	mov	r0, r23
    6bd8:	00 0c       	add	r0, r0
    6bda:	88 0b       	sbc	r24, r24
    6bdc:	99 0b       	sbc	r25, r25
    6bde:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    6be2:	6c c9       	rjmp	.-3368   	; 0x5ebc <main+0x900>
    6be4:	21 e0       	ldi	r18, 0x01	; 1
    6be6:	20 93 d3 28 	sts	0x28D3, r18	; 0x8028d3 <DOT2_1>
    6bea:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    6bee:	49 97       	sbiw	r24, 0x19	; 25
    6bf0:	64 f5       	brge	.+88     	; 0x6c4a <main+0x168e>
    6bf2:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    6bf6:	81 11       	cpse	r24, r1
    6bf8:	21 c0       	rjmp	.+66     	; 0x6c3c <main+0x1680>
    6bfa:	88 e1       	ldi	r24, 0x18	; 24
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <digits2+0x4>
    6c02:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <digits2+0x5>
    6c06:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    6c0a:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
    6c0e:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    6c12:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    6c16:	c3 97       	sbiw	r24, 0x33	; 51
    6c18:	24 f0       	brlt	.+8      	; 0x6c22 <main+0x1666>
    6c1a:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    6c1e:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    6c22:	8f e0       	ldi	r24, 0x0F	; 15
    6c24:	90 e0       	ldi	r25, 0x00	; 0
    6c26:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    6c2a:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6c2e:	84 e1       	ldi	r24, 0x14	; 20
    6c30:	90 e0       	ldi	r25, 0x00	; 0
    6c32:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    6c36:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    6c3a:	50 c9       	rjmp	.-3424   	; 0x5edc <main+0x920>
    6c3c:	89 e1       	ldi	r24, 0x19	; 25
    6c3e:	90 e0       	ldi	r25, 0x00	; 0
    6c40:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    6c44:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    6c48:	e2 cf       	rjmp	.-60     	; 0x6c0e <main+0x1652>
    6c4a:	60 91 1a 29 	lds	r22, 0x291A	; 0x80291a <SET_VALUE+0xc>
    6c4e:	70 91 1b 29 	lds	r23, 0x291B	; 0x80291b <SET_VALUE+0xd>
    6c52:	07 2e       	mov	r0, r23
    6c54:	00 0c       	add	r0, r0
    6c56:	88 0b       	sbc	r24, r24
    6c58:	99 0b       	sbc	r25, r25
    6c5a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    6c5e:	d7 cf       	rjmp	.-82     	; 0x6c0e <main+0x1652>
    6c60:	80 91 70 28 	lds	r24, 0x2870	; 0x802870 <Probe_error_flag>
    6c64:	81 11       	cpse	r24, r1
    6c66:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
digitalWrite():
    6c6a:	61 e0       	ldi	r22, 0x01	; 1
    6c6c:	8d e1       	ldi	r24, 0x1D	; 29
    6c6e:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    6c72:	60 e0       	ldi	r22, 0x00	; 0
    6c74:	8c e1       	ldi	r24, 0x1C	; 28
    6c76:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6c7a:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    6c7e:	81 11       	cpse	r24, r1
    6c80:	3a c0       	rjmp	.+116    	; 0x6cf6 <main+0x173a>
    6c82:	c0 90 10 29 	lds	r12, 0x2910	; 0x802910 <SET_VALUE+0x2>
    6c86:	d0 90 11 29 	lds	r13, 0x2911	; 0x802911 <SET_VALUE+0x3>
    6c8a:	8a e0       	ldi	r24, 0x0A	; 10
    6c8c:	8c 9d       	mul	r24, r12
    6c8e:	b0 01       	movw	r22, r0
    6c90:	8d 9d       	mul	r24, r13
    6c92:	70 0d       	add	r23, r0
    6c94:	11 24       	eor	r1, r1
    6c96:	07 2e       	mov	r0, r23
    6c98:	00 0c       	add	r0, r0
    6c9a:	88 0b       	sbc	r24, r24
    6c9c:	99 0b       	sbc	r25, r25
    6c9e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    6ca2:	8a e0       	ldi	r24, 0x0A	; 10
    6ca4:	90 e0       	ldi	r25, 0x00	; 0
    6ca6:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    6caa:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
    6cae:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    6cb2:	c0 92 a8 28 	sts	0x28A8, r12	; 0x8028a8 <SET_TEMP_DEG>
    6cb6:	d0 92 a9 28 	sts	0x28A9, r13	; 0x8028a9 <SET_TEMP_DEG+0x1>
    6cba:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    6cbe:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    6cc2:	49 97       	sbiw	r24, 0x19	; 25
    6cc4:	dc f5       	brge	.+118    	; 0x6d3c <main+0x1780>
    6cc6:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    6cca:	81 11       	cpse	r24, r1
    6ccc:	30 c0       	rjmp	.+96     	; 0x6d2e <main+0x1772>
    6cce:	88 e1       	ldi	r24, 0x18	; 24
    6cd0:	90 e0       	ldi	r25, 0x00	; 0
    6cd2:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <digits1>
    6cd6:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <digits1+0x1>
    6cda:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <digits1+0x2>
    6cde:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <digits1+0x3>
    6ce2:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    6ce6:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    6cea:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    6cee:	c3 97       	sbiw	r24, 0x33	; 51
    6cf0:	0c f4       	brge	.+2      	; 0x6cf4 <main+0x1738>
    6cf2:	9a c8       	rjmp	.-3788   	; 0x5e28 <main+0x86c>
    6cf4:	7f cc       	rjmp	.-1794   	; 0x65f4 <main+0x1038>
    6cf6:	81 e0       	ldi	r24, 0x01	; 1
    6cf8:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <DOT2_1>
    6cfc:	c0 90 1a 29 	lds	r12, 0x291A	; 0x80291a <SET_VALUE+0xc>
    6d00:	d0 90 1b 29 	lds	r13, 0x291B	; 0x80291b <SET_VALUE+0xd>
    6d04:	b6 01       	movw	r22, r12
    6d06:	dd 0c       	add	r13, r13
    6d08:	88 0b       	sbc	r24, r24
    6d0a:	99 0b       	sbc	r25, r25
    6d0c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    6d10:	8f e0       	ldi	r24, 0x0F	; 15
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    6d18:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6d1c:	84 e1       	ldi	r24, 0x14	; 20
    6d1e:	90 e0       	ldi	r25, 0x00	; 0
    6d20:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    6d24:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    6d28:	c0 92 a7 28 	sts	0x28A7, r12	; 0x8028a7 <EnergySetValue>
    6d2c:	c6 cf       	rjmp	.-116    	; 0x6cba <main+0x16fe>
    6d2e:	89 e1       	ldi	r24, 0x19	; 25
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    6d36:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    6d3a:	d5 cf       	rjmp	.-86     	; 0x6ce6 <main+0x172a>
    6d3c:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <DOT1_1>
    6d40:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    6d44:	08 2e       	mov	r0, r24
    6d46:	00 0c       	add	r0, r0
    6d48:	99 0b       	sbc	r25, r25
    6d4a:	fc 01       	movw	r30, r24
    6d4c:	ee 0f       	add	r30, r30
    6d4e:	ff 1f       	adc	r31, r31
    6d50:	e2 5f       	subi	r30, 0xF2	; 242
    6d52:	f6 4d       	sbci	r31, 0xD6	; 214
    6d54:	20 81       	ld	r18, Z
    6d56:	31 81       	ldd	r19, Z+1	; 0x01
    6d58:	44 e6       	ldi	r20, 0x64	; 100
    6d5a:	42 9f       	mul	r20, r18
    6d5c:	b0 01       	movw	r22, r0
    6d5e:	43 9f       	mul	r20, r19
    6d60:	70 0d       	add	r23, r0
    6d62:	11 24       	eor	r1, r1
    6d64:	88 0f       	add	r24, r24
    6d66:	99 1f       	adc	r25, r25
    6d68:	fc 01       	movw	r30, r24
    6d6a:	e0 5f       	subi	r30, 0xF0	; 240
    6d6c:	f6 4d       	sbci	r31, 0xD6	; 214
    6d6e:	80 81       	ld	r24, Z
    6d70:	91 81       	ldd	r25, Z+1	; 0x01
    6d72:	68 0f       	add	r22, r24
    6d74:	79 1f       	adc	r23, r25
    6d76:	07 2e       	mov	r0, r23
    6d78:	00 0c       	add	r0, r0
    6d7a:	88 0b       	sbc	r24, r24
    6d7c:	99 0b       	sbc	r25, r25
    6d7e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    6d82:	b1 cf       	rjmp	.-158    	; 0x6ce6 <main+0x172a>
    6d84:	80 91 70 28 	lds	r24, 0x2870	; 0x802870 <Probe_error_flag>
    6d88:	81 11       	cpse	r24, r1
    6d8a:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    6d8e:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    6d92:	81 11       	cpse	r24, r1
    6d94:	8a c0       	rjmp	.+276    	; 0x6eaa <main+0x18ee>
    6d96:	c0 90 10 29 	lds	r12, 0x2910	; 0x802910 <SET_VALUE+0x2>
    6d9a:	d0 90 11 29 	lds	r13, 0x2911	; 0x802911 <SET_VALUE+0x3>
    6d9e:	8a e0       	ldi	r24, 0x0A	; 10
    6da0:	8c 9d       	mul	r24, r12
    6da2:	b0 01       	movw	r22, r0
    6da4:	8d 9d       	mul	r24, r13
    6da6:	70 0d       	add	r23, r0
    6da8:	11 24       	eor	r1, r1
    6daa:	07 2e       	mov	r0, r23
    6dac:	00 0c       	add	r0, r0
    6dae:	88 0b       	sbc	r24, r24
    6db0:	99 0b       	sbc	r25, r25
    6db2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    6db6:	8a e0       	ldi	r24, 0x0A	; 10
    6db8:	90 e0       	ldi	r25, 0x00	; 0
    6dba:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <digits2+0x6>
    6dbe:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <digits2+0x7>
    6dc2:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    6dc6:	c0 92 a8 28 	sts	0x28A8, r12	; 0x8028a8 <SET_TEMP_DEG>
    6dca:	d0 92 a9 28 	sts	0x28A9, r13	; 0x8028a9 <SET_TEMP_DEG+0x1>
    6dce:	c0 90 14 29 	lds	r12, 0x2914	; 0x802914 <SET_VALUE+0x6>
    6dd2:	d0 90 15 29 	lds	r13, 0x2915	; 0x802915 <SET_VALUE+0x7>
    6dd6:	c0 92 6d 28 	sts	0x286D, r12	; 0x80286d <SET_HOUR>
    6dda:	d0 92 6e 28 	sts	0x286E, r13	; 0x80286e <SET_HOUR+0x1>
    6dde:	e0 91 1c 29 	lds	r30, 0x291C	; 0x80291c <ENTER_BUT>
    6de2:	ee 0f       	add	r30, r30
    6de4:	ff 0b       	sbc	r31, r31
    6de6:	e2 5f       	subi	r30, 0xF2	; 242
    6de8:	f6 4d       	sbci	r31, 0xD6	; 214
    6dea:	84 e6       	ldi	r24, 0x64	; 100
    6dec:	8c 9d       	mul	r24, r12
    6dee:	b0 01       	movw	r22, r0
    6df0:	8d 9d       	mul	r24, r13
    6df2:	70 0d       	add	r23, r0
    6df4:	11 24       	eor	r1, r1
    6df6:	80 81       	ld	r24, Z
    6df8:	91 81       	ldd	r25, Z+1	; 0x01
    6dfa:	68 0f       	add	r22, r24
    6dfc:	79 1f       	adc	r23, r25
    6dfe:	07 2e       	mov	r0, r23
    6e00:	00 0c       	add	r0, r0
    6e02:	88 0b       	sbc	r24, r24
    6e04:	99 0b       	sbc	r25, r25
    6e06:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Eclass::BREAK_NUMBER1(long) [clone .constprop.19]>
    6e0a:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    6e0e:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    6e12:	49 97       	sbiw	r24, 0x19	; 25
    6e14:	74 f4       	brge	.+28     	; 0x6e32 <main+0x1876>
    6e16:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <BLINK_STATS>
    6e1a:	81 11       	cpse	r24, r1
    6e1c:	5f c0       	rjmp	.+190    	; 0x6edc <main+0x1920>
    6e1e:	88 e1       	ldi	r24, 0x18	; 24
    6e20:	90 e0       	ldi	r25, 0x00	; 0
    6e22:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <digits1+0x4>
    6e26:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <digits1+0x5>
    6e2a:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <digits1+0x6>
    6e2e:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <digits1+0x7>
    6e32:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <i>
    6e36:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <i+0x1>
    6e3a:	c3 97       	sbiw	r24, 0x33	; 51
    6e3c:	24 f0       	brlt	.+8      	; 0x6e46 <main+0x188a>
    6e3e:	10 92 cf 28 	sts	0x28CF, r1	; 0x8028cf <i>
    6e42:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <i+0x1>
    6e46:	2c e3       	ldi	r18, 0x3C	; 60
    6e48:	2c 9d       	mul	r18, r12
    6e4a:	c0 01       	movw	r24, r0
    6e4c:	2d 9d       	mul	r18, r13
    6e4e:	90 0d       	add	r25, r0
    6e50:	11 24       	eor	r1, r1
    6e52:	20 91 16 29 	lds	r18, 0x2916	; 0x802916 <SET_VALUE+0x8>
    6e56:	30 91 17 29 	lds	r19, 0x2917	; 0x802917 <SET_VALUE+0x9>
    6e5a:	82 0f       	add	r24, r18
    6e5c:	93 1f       	adc	r25, r19
    6e5e:	80 93 bb 28 	sts	0x28BB, r24	; 0x8028bb <SET_MIN>
    6e62:	90 93 bc 28 	sts	0x28BC, r25	; 0x8028bc <SET_MIN+0x1>
    6e66:	10 92 9b 28 	sts	0x289B, r1	; 0x80289b <REP1>
    6e6a:	10 92 9c 28 	sts	0x289C, r1	; 0x80289c <REP1+0x1>
    6e6e:	21 e0       	ldi	r18, 0x01	; 1
    6e70:	20 93 0a 29 	sts	0x290A, r18	; 0x80290a <VENT_FLAG>
    6e74:	10 92 69 28 	sts	0x2869, r1	; 0x802869 <DISP_INC>
    6e78:	10 92 6a 28 	sts	0x286A, r1	; 0x80286a <DISP_INC+0x1>
    6e7c:	10 92 6b 28 	sts	0x286B, r1	; 0x80286b <DISP_INC+0x2>
    6e80:	10 92 6c 28 	sts	0x286C, r1	; 0x80286c <DISP_INC+0x3>
    6e84:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <currentMillis1>
    6e88:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <currentMillis1+0x1>
    6e8c:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <currentMillis>
    6e90:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <currentMillis+0x1>
    6e94:	18 16       	cp	r1, r24
    6e96:	19 06       	cpc	r1, r25
    6e98:	14 f0       	brlt	.+4      	; 0x6e9e <main+0x18e2>
    6e9a:	0c 94 14 2f 	jmp	0x5e28	; 0x5e28 <main+0x86c>
    6e9e:	10 92 67 28 	sts	0x2867, r1	; 0x802867 <flag>
    6ea2:	10 92 68 28 	sts	0x2868, r1	; 0x802868 <flag+0x1>
    6ea6:	0c 94 14 2f 	jmp	0x5e28	; 0x5e28 <main+0x86c>
    6eaa:	81 e0       	ldi	r24, 0x01	; 1
    6eac:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <DOT2_1>
    6eb0:	60 91 a7 28 	lds	r22, 0x28A7	; 0x8028a7 <EnergySetValue>
    6eb4:	06 2e       	mov	r0, r22
    6eb6:	00 0c       	add	r0, r0
    6eb8:	77 0b       	sbc	r23, r23
    6eba:	88 0b       	sbc	r24, r24
    6ebc:	99 0b       	sbc	r25, r25
    6ebe:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    6ec2:	8f e0       	ldi	r24, 0x0F	; 15
    6ec4:	90 e0       	ldi	r25, 0x00	; 0
    6ec6:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <digits2>
    6eca:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <digits2+0x1>
    6ece:	84 e1       	ldi	r24, 0x14	; 20
    6ed0:	90 e0       	ldi	r25, 0x00	; 0
    6ed2:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    6ed6:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    6eda:	79 cf       	rjmp	.-270    	; 0x6dce <main+0x1812>
    6edc:	89 e1       	ldi	r24, 0x19	; 25
    6ede:	90 e0       	ldi	r25, 0x00	; 0
    6ee0:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <i>
    6ee4:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <i+0x1>
    6ee8:	a4 cf       	rjmp	.-184    	; 0x6e32 <main+0x1876>
    6eea:	10 92 66 28 	sts	0x2866, r1	; 0x802866 <ElapsedTime>
    6eee:	0c c8       	rjmp	.-4072   	; 0x5f08 <main+0x94c>
    6ef0:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <BUFF>
    6ef4:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <BUFF+0x1>
    6ef8:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <BUFF+0x2>
    6efc:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <BUFF+0x3>
    6f00:	3d c8       	rjmp	.-3974   	; 0x5f7c <main+0x9c0>
main():
    6f02:	80 e4       	ldi	r24, 0x40	; 64
    6f04:	92 e4       	ldi	r25, 0x42	; 66
    6f06:	af e0       	ldi	r26, 0x0F	; 15
    6f08:	b0 e0       	ldi	r27, 0x00	; 0
    6f0a:	82 c8       	rjmp	.-3836   	; 0x6010 <main+0xa54>
SET_SHORT_PRESS_FUNCTION():
    6f0c:	10 92 88 28 	sts	0x2888, r1	; 0x802888 <checkTempRaised>
    6f10:	d2 c8       	rjmp	.-3676   	; 0x60b6 <main+0xafa>
    6f12:	21 30       	cpi	r18, 0x01	; 1
    6f14:	31 05       	cpc	r19, r1
    6f16:	09 f0       	breq	.+2      	; 0x6f1a <main+0x195e>
    6f18:	28 c9       	rjmp	.-3504   	; 0x616a <main+0xbae>
    6f1a:	80 91 67 28 	lds	r24, 0x2867	; 0x802867 <flag>
    6f1e:	90 91 68 28 	lds	r25, 0x2868	; 0x802868 <flag+0x1>
    6f22:	01 97       	sbiw	r24, 0x01	; 1
    6f24:	09 f0       	breq	.+2      	; 0x6f28 <main+0x196c>
    6f26:	21 c9       	rjmp	.-3518   	; 0x616a <main+0xbae>
    6f28:	10 92 5a 28 	sts	0x285A, r1	; 0x80285a <RESUME_TEMP>
    6f2c:	10 92 5b 28 	sts	0x285B, r1	; 0x80285b <RESUME_TEMP+0x1>
    6f30:	10 92 58 28 	sts	0x2858, r1	; 0x802858 <RESUME_TIME>
    6f34:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <RESUME_TIME+0x1>
    6f38:	68 e5       	ldi	r22, 0x58	; 88
    6f3a:	78 e2       	ldi	r23, 0x28	; 40
    6f3c:	82 e3       	ldi	r24, 0x32	; 50
    6f3e:	90 e0       	ldi	r25, 0x00	; 0
    6f40:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]>
    6f44:	6a e5       	ldi	r22, 0x5A	; 90
    6f46:	78 e2       	ldi	r23, 0x28	; 40
    6f48:	8c e3       	ldi	r24, 0x3C	; 60
    6f4a:	90 e0       	ldi	r25, 0x00	; 0
    6f4c:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15]>
    6f50:	82 e0       	ldi	r24, 0x02	; 2
    6f52:	90 e0       	ldi	r25, 0x00	; 0
    6f54:	80 93 67 28 	sts	0x2867, r24	; 0x802867 <flag>
    6f58:	90 93 68 28 	sts	0x2868, r25	; 0x802868 <flag+0x1>
    6f5c:	06 c9       	rjmp	.-3572   	; 0x616a <main+0xbae>
    6f5e:	34 eb       	ldi	r19, 0xB4	; 180
    6f60:	a3 16       	cp	r10, r19
    6f62:	b1 04       	cpc	r11, r1
    6f64:	0c f4       	brge	.+2      	; 0x6f68 <main+0x19ac>
    6f66:	3e c9       	rjmp	.-3460   	; 0x61e4 <main+0xc28>
    6f68:	ab 01       	movw	r20, r22
    6f6a:	44 50       	subi	r20, 0x04	; 4
    6f6c:	51 09       	sbc	r21, r1
    6f6e:	43 31       	cpi	r20, 0x13	; 19
    6f70:	51 05       	cpc	r21, r1
    6f72:	08 f4       	brcc	.+2      	; 0x6f76 <main+0x19ba>
    6f74:	31 c9       	rjmp	.-3486   	; 0x61d8 <main+0xc1c>
    6f76:	36 c9       	rjmp	.-3476   	; 0x61e4 <main+0xc28>
    6f78:	0e 94 45 0a 	call	0x148a	; 0x148a <Bclass::PID_callingg() [clone .constprop.44]>
    6f7c:	79 c9       	rjmp	.-3342   	; 0x6270 <main+0xcb4>
    6f7e:	94 e1       	ldi	r25, 0x14	; 20
    6f80:	c9 1a       	sub	r12, r25
    6f82:	d1 08       	sbc	r13, r1
    6f84:	e5 e0       	ldi	r30, 0x05	; 5
    6f86:	ce 16       	cp	r12, r30
    6f88:	d1 04       	cpc	r13, r1
    6f8a:	08 f0       	brcs	.+2      	; 0x6f8e <main+0x19d2>
    6f8c:	83 c9       	rjmp	.-3322   	; 0x6294 <main+0xcd8>
    6f8e:	27 e0       	ldi	r18, 0x07	; 7
    6f90:	30 e0       	ldi	r19, 0x00	; 0
    6f92:	20 93 50 28 	sts	0x2850, r18	; 0x802850 <ErroRConst>
    6f96:	30 93 51 28 	sts	0x2851, r19	; 0x802851 <ErroRConst+0x1>
    6f9a:	7c c9       	rjmp	.-3336   	; 0x6294 <main+0xcd8>
    6f9c:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <EXECUTE_PID_LOOP>
    6fa0:	b2 c9       	rjmp	.-3228   	; 0x6306 <main+0xd4a>
    6fa2:	40 90 12 28 	lds	r4, 0x2812	; 0x802812 <TEMP_DEG>
    6fa6:	50 90 13 28 	lds	r5, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    6faa:	60 90 14 28 	lds	r6, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    6fae:	70 90 15 28 	lds	r7, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    6fb2:	a0 90 34 2a 	lds	r10, 0x2A34	; 0x802a34 <PID_SETPOINT>
    6fb6:	b0 90 35 2a 	lds	r11, 0x2A35	; 0x802a35 <PID_SETPOINT+0x1>
    6fba:	c0 90 36 2a 	lds	r12, 0x2A36	; 0x802a36 <PID_SETPOINT+0x2>
    6fbe:	d0 90 37 2a 	lds	r13, 0x2A37	; 0x802a37 <PID_SETPOINT+0x3>
    6fc2:	a6 01       	movw	r20, r12
    6fc4:	95 01       	movw	r18, r10
    6fc6:	c3 01       	movw	r24, r6
    6fc8:	b2 01       	movw	r22, r4
    6fca:	fb d2       	rcall	.+1526   	; 0x75c2 <__gesf2>
    6fcc:	87 fd       	sbrc	r24, 7
    6fce:	06 c0       	rjmp	.+12     	; 0x6fdc <main+0x1a20>
    6fd0:	81 e0       	ldi	r24, 0x01	; 1
    6fd2:	80 93 b8 28 	sts	0x28B8, r24	; 0x8028b8 <COUNTDOWN_START>
    6fd6:	80 93 ad 28 	sts	0x28AD, r24	; 0x8028ad <soak_once_flag>
    6fda:	a5 c9       	rjmp	.-3254   	; 0x6326 <main+0xd6a>
    6fdc:	a6 01       	movw	r20, r12
    6fde:	95 01       	movw	r18, r10
    6fe0:	c3 01       	movw	r24, r6
    6fe2:	b2 01       	movw	r22, r4
    6fe4:	9f d1       	rcall	.+830    	; 0x7324 <__cmpsf2>
    6fe6:	87 ff       	sbrs	r24, 7
    6fe8:	9e c9       	rjmp	.-3268   	; 0x6326 <main+0xd6a>
    6fea:	80 91 ad 28 	lds	r24, 0x28AD	; 0x8028ad <soak_once_flag>
    6fee:	81 11       	cpse	r24, r1
    6ff0:	9a c9       	rjmp	.-3276   	; 0x6326 <main+0xd6a>
    6ff2:	10 92 b8 28 	sts	0x28B8, r1	; 0x8028b8 <COUNTDOWN_START>
    6ff6:	97 c9       	rjmp	.-3282   	; 0x6326 <main+0xd6a>
    6ff8:	81 e0       	ldi	r24, 0x01	; 1
    6ffa:	80 93 b8 28 	sts	0x28B8, r24	; 0x8028b8 <COUNTDOWN_START>
    6ffe:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <ElapsedMinute>
    7002:	90 91 a6 28 	lds	r25, 0x28A6	; 0x8028a6 <ElapsedMinute+0x1>
    7006:	6c e3       	ldi	r22, 0x3C	; 60
    7008:	70 e0       	ldi	r23, 0x00	; 0
    700a:	42 d3       	rcall	.+1668   	; 0x7690 <__udivmodhi4>
    700c:	94 c9       	rjmp	.-3288   	; 0x6336 <main+0xd7a>
DISPLAY_DIGIT1():
    700e:	00 93 d6 28 	sts	0x28D6, r16	; 0x8028d6 <digits1>
    7012:	10 93 d7 28 	sts	0x28D7, r17	; 0x8028d7 <digits1+0x1>
    7016:	e0 92 d8 28 	sts	0x28D8, r14	; 0x8028d8 <digits1+0x2>
    701a:	f0 92 d9 28 	sts	0x28D9, r15	; 0x8028d9 <digits1+0x3>
    701e:	00 93 da 28 	sts	0x28DA, r16	; 0x8028da <digits1+0x4>
    7022:	10 93 db 28 	sts	0x28DB, r17	; 0x8028db <digits1+0x5>
    7026:	2a e1       	ldi	r18, 0x1A	; 26
    7028:	30 e0       	ldi	r19, 0x00	; 0
    702a:	20 93 dc 28 	sts	0x28DC, r18	; 0x8028dc <digits1+0x6>
    702e:	30 93 dd 28 	sts	0x28DD, r19	; 0x8028dd <digits1+0x7>
    7032:	f9 c9       	rjmp	.-3086   	; 0x6426 <main+0xe6a>
SET_SHORT_PRESS_FUNCTION():
    7034:	81 e0       	ldi	r24, 0x01	; 1
    7036:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <CHANGE1>
    703a:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <TIMER_LED_BLINK>
digitalWrite():
    703e:	61 e0       	ldi	r22, 0x01	; 1
SET_SHORT_PRESS_FUNCTION():
    7040:	81 11       	cpse	r24, r1
    7042:	01 c0       	rjmp	.+2      	; 0x7046 <main+0x1a8a>
digitalWrite():
    7044:	60 e0       	ldi	r22, 0x00	; 0
    7046:	8c e0       	ldi	r24, 0x0C	; 12
    7048:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    704c:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <IN_ERROR>
    7050:	88 23       	and	r24, r24
    7052:	71 f0       	breq	.+28     	; 0x7070 <main+0x1ab4>
stop():
    7054:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <BUZZ_TICK1>
    7058:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <BUZZ_TICK1+0xb>
    705c:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <BUZZ_TICK1+0xc>
    7060:	10 92 71 2b 	sts	0x2B71, r1	; 0x802b71 <BUZZ_TICK1+0xd>
    7064:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <BUZZ_TICK1+0xe>
    7068:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <BUZZ_TICK1+0xf>
    706c:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <BUZZ_TICK1+0x10>
SET_SHORT_PRESS_FUNCTION():
    7070:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Energy_Mode>
    7074:	81 11       	cpse	r24, r1
    7076:	68 c0       	rjmp	.+208    	; 0x7148 <main+0x1b8c>
    7078:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <DOT2_1>
    707c:	20 e0       	ldi	r18, 0x00	; 0
    707e:	30 e0       	ldi	r19, 0x00	; 0
    7080:	a9 01       	movw	r20, r18
    7082:	c3 01       	movw	r24, r6
    7084:	b2 01       	movw	r22, r4
    7086:	9d d2       	rcall	.+1338   	; 0x75c2 <__gesf2>
    7088:	87 fd       	sbrc	r24, 7
    708a:	2e c0       	rjmp	.+92     	; 0x70e8 <main+0x1b2c>
    708c:	20 e0       	ldi	r18, 0x00	; 0
    708e:	30 e4       	ldi	r19, 0x40	; 64
    7090:	4c e9       	ldi	r20, 0x9C	; 156
    7092:	55 e4       	ldi	r21, 0x45	; 69
    7094:	c3 01       	movw	r24, r6
    7096:	b2 01       	movw	r22, r4
    7098:	45 d1       	rcall	.+650    	; 0x7324 <__cmpsf2>
    709a:	18 16       	cp	r1, r24
    709c:	2c f1       	brlt	.+74     	; 0x70e8 <main+0x1b2c>
digitalWrite():
    709e:	61 e0       	ldi	r22, 0x01	; 1
    70a0:	8c e1       	ldi	r24, 0x1C	; 28
    70a2:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    70a6:	60 e0       	ldi	r22, 0x00	; 0
    70a8:	8d e1       	ldi	r24, 0x1D	; 29
    70aa:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    70ae:	20 91 01 28 	lds	r18, 0x2801	; 0x802801 <BUFF>
    70b2:	30 91 02 28 	lds	r19, 0x2802	; 0x802802 <BUFF+0x1>
    70b6:	40 91 03 28 	lds	r20, 0x2803	; 0x802803 <BUFF+0x2>
    70ba:	50 91 04 28 	lds	r21, 0x2804	; 0x802804 <BUFF+0x3>
    70be:	60 91 34 2a 	lds	r22, 0x2A34	; 0x802a34 <PID_SETPOINT>
    70c2:	70 91 35 2a 	lds	r23, 0x2A35	; 0x802a35 <PID_SETPOINT+0x1>
    70c6:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <PID_SETPOINT+0x2>
    70ca:	90 91 37 2a 	lds	r25, 0x2A37	; 0x802a37 <PID_SETPOINT+0x3>
    70ce:	c5 d0       	rcall	.+394    	; 0x725a <__subsf3>
    70d0:	20 e0       	ldi	r18, 0x00	; 0
    70d2:	30 e0       	ldi	r19, 0x00	; 0
    70d4:	40 e2       	ldi	r20, 0x20	; 32
    70d6:	51 e4       	ldi	r21, 0x41	; 65
    70d8:	78 d2       	rcall	.+1264   	; 0x75ca <__mulsf3>
    70da:	90 d1       	rcall	.+800    	; 0x73fc <__fixsfsi>
    70dc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    70e0:	81 e0       	ldi	r24, 0x01	; 1
    70e2:	80 93 d1 28 	sts	0x28D1, r24	; 0x8028d1 <DOT2_2>
    70e6:	9f c9       	rjmp	.-3266   	; 0x6426 <main+0xe6a>
    70e8:	20 e0       	ldi	r18, 0x00	; 0
    70ea:	30 e4       	ldi	r19, 0x40	; 64
    70ec:	4c e9       	ldi	r20, 0x9C	; 156
    70ee:	55 e4       	ldi	r21, 0x45	; 69
    70f0:	c3 01       	movw	r24, r6
    70f2:	b2 01       	movw	r22, r4
    70f4:	66 d2       	rcall	.+1228   	; 0x75c2 <__gesf2>
    70f6:	18 16       	cp	r1, r24
    70f8:	f4 f4       	brge	.+60     	; 0x7136 <main+0x1b7a>
    70fa:	20 e0       	ldi	r18, 0x00	; 0
    70fc:	30 e4       	ldi	r19, 0x40	; 64
    70fe:	4c e1       	ldi	r20, 0x1C	; 28
    7100:	56 e4       	ldi	r21, 0x46	; 70
    7102:	c3 01       	movw	r24, r6
    7104:	b2 01       	movw	r22, r4
    7106:	0e d1       	rcall	.+540    	; 0x7324 <__cmpsf2>
    7108:	18 16       	cp	r1, r24
    710a:	ac f0       	brlt	.+42     	; 0x7136 <main+0x1b7a>
digitalWrite():
    710c:	60 e0       	ldi	r22, 0x00	; 0
    710e:	8c e1       	ldi	r24, 0x1C	; 28
    7110:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    7114:	61 e0       	ldi	r22, 0x01	; 1
    7116:	8d e1       	ldi	r24, 0x1D	; 29
    7118:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    711c:	20 e0       	ldi	r18, 0x00	; 0
    711e:	30 e0       	ldi	r19, 0x00	; 0
    7120:	40 e2       	ldi	r20, 0x20	; 32
    7122:	51 e4       	ldi	r21, 0x41	; 65
    7124:	60 91 12 28 	lds	r22, 0x2812	; 0x802812 <TEMP_DEG>
    7128:	70 91 13 28 	lds	r23, 0x2813	; 0x802813 <TEMP_DEG+0x1>
    712c:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <TEMP_DEG+0x2>
    7130:	90 91 15 28 	lds	r25, 0x2815	; 0x802815 <TEMP_DEG+0x3>
    7134:	d1 cf       	rjmp	.-94     	; 0x70d8 <main+0x1b1c>
    7136:	10 92 69 28 	sts	0x2869, r1	; 0x802869 <DISP_INC>
    713a:	10 92 6a 28 	sts	0x286A, r1	; 0x80286a <DISP_INC+0x1>
    713e:	10 92 6b 28 	sts	0x286B, r1	; 0x80286b <DISP_INC+0x2>
    7142:	10 92 6c 28 	sts	0x286C, r1	; 0x80286c <DISP_INC+0x3>
    7146:	6f c9       	rjmp	.-3362   	; 0x6426 <main+0xe6a>
digitalWrite():
    7148:	61 e0       	ldi	r22, 0x01	; 1
    714a:	8c e1       	ldi	r24, 0x1C	; 28
    714c:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    7150:	60 e0       	ldi	r22, 0x00	; 0
    7152:	8d e1       	ldi	r24, 0x1D	; 29
    7154:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    7158:	81 e0       	ldi	r24, 0x01	; 1
    715a:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <DOT2_1>
    715e:	60 91 a7 28 	lds	r22, 0x28A7	; 0x8028a7 <EnergySetValue>
    7162:	06 2e       	mov	r0, r22
    7164:	00 0c       	add	r0, r0
    7166:	77 0b       	sbc	r23, r23
    7168:	88 0b       	sbc	r24, r24
    716a:	99 0b       	sbc	r25, r25
    716c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Eclass::BREAK_NUMBER2(long) [clone .constprop.20]>
    7170:	20 92 de 28 	sts	0x28DE, r2	; 0x8028de <digits2>
    7174:	30 92 df 28 	sts	0x28DF, r3	; 0x8028df <digits2+0x1>
    7178:	84 e1       	ldi	r24, 0x14	; 20
    717a:	90 e0       	ldi	r25, 0x00	; 0
    717c:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <digits2+0x2>
    7180:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <digits2+0x3>
    7184:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <DOT2_2>
    7188:	4e c9       	rjmp	.-3428   	; 0x6426 <main+0xe6a>
    718a:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <soak_once_flag>
    718e:	10 92 ac 28 	sts	0x28AC, r1	; 0x8028ac <Inprocess_flag>
digitalWrite():
    7192:	60 e0       	ldi	r22, 0x00	; 0
    7194:	81 e2       	ldi	r24, 0x21	; 33
    7196:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    719a:	60 e0       	ldi	r22, 0x00	; 0
    719c:	80 ea       	ldi	r24, 0xA0	; 160
    719e:	90 e0       	ldi	r25, 0x00	; 0
    71a0:	0e 94 a0 13 	call	0x2740	; 0x2740 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    71a4:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <Inprocess_autoresume_flag>
    71a8:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <STOP_PROCESS>
    71ac:	90 91 94 28 	lds	r25, 0x2894	; 0x802894 <STOP_PROCESS+0x1>
    71b0:	18 16       	cp	r1, r24
    71b2:	19 06       	cpc	r1, r25
    71b4:	d4 f1       	brlt	.+116    	; 0x722a <main+0x1c6e>
DISPLAY_UPDATE():
    71b6:	8e e2       	ldi	r24, 0x2E	; 46
    71b8:	9b e2       	ldi	r25, 0x2B	; 43
    71ba:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Ticker::update()>
digitalWrite():
    71be:	61 e0       	ldi	r22, 0x01	; 1
    71c0:	85 e1       	ldi	r24, 0x15	; 21
    71c2:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    71c6:	80 91 c1 28 	lds	r24, 0x28C1	; 0x8028c1 <currentMillis>
    71ca:	90 91 c2 28 	lds	r25, 0x28C2	; 0x8028c2 <currentMillis+0x1>
    71ce:	88 97       	sbiw	r24, 0x28	; 40
    71d0:	f4 f0       	brlt	.+60     	; 0x720e <main+0x1c52>
    71d2:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
    71d6:	91 e0       	ldi	r25, 0x01	; 1
    71d8:	89 27       	eor	r24, r25
    71da:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
    71de:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <currentMillis>
    71e2:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <currentMillis+0x1>
    71e6:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <currentMillis1>
    71ea:	90 91 ba 28 	lds	r25, 0x28BA	; 0x8028ba <currentMillis1+0x1>
    71ee:	89 37       	cpi	r24, 0x79	; 121
    71f0:	91 05       	cpc	r25, r1
    71f2:	6c f0       	brlt	.+26     	; 0x720e <main+0x1c52>
    71f4:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <STOP_PROCESS>
    71f8:	90 91 94 28 	lds	r25, 0x2894	; 0x802894 <STOP_PROCESS+0x1>
    71fc:	01 96       	adiw	r24, 0x01	; 1
    71fe:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <STOP_PROCESS>
    7202:	90 93 94 28 	sts	0x2894, r25	; 0x802894 <STOP_PROCESS+0x1>
    7206:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <currentMillis1>
    720a:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <currentMillis1+0x1>
    720e:	d0 90 00 28 	lds	r13, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
digitalWrite():
    7212:	61 e0       	ldi	r22, 0x01	; 1
SET_SHORT_PRESS_FUNCTION():
    7214:	d1 10       	cpse	r13, r1
    7216:	01 c0       	rjmp	.+2      	; 0x721a <main+0x1c5e>
digitalWrite():
    7218:	60 e0       	ldi	r22, 0x00	; 0
    721a:	8a e1       	ldi	r24, 0x1A	; 26
    721c:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    7220:	6d 2d       	mov	r22, r13
    7222:	8a e1       	ldi	r24, 0x1A	; 26
    7224:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
    7228:	bf cf       	rjmp	.-130    	; 0x71a8 <main+0x1bec>
    722a:	60 e0       	ldi	r22, 0x00	; 0
    722c:	85 e1       	ldi	r24, 0x15	; 21
    722e:	0e 94 ed 08 	call	0x11da	; 0x11da <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    7232:	10 92 34 2a 	sts	0x2A34, r1	; 0x802a34 <PID_SETPOINT>
    7236:	10 92 35 2a 	sts	0x2A35, r1	; 0x802a35 <PID_SETPOINT+0x1>
    723a:	10 92 36 2a 	sts	0x2A36, r1	; 0x802a36 <PID_SETPOINT+0x2>
    723e:	10 92 37 2a 	sts	0x2A37, r1	; 0x802a37 <PID_SETPOINT+0x3>
    7242:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <EXECUTE_PID_LOOP>
    7246:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    724a:	0c 94 14 2f 	jmp	0x5e28	; 0x5e28 <main+0x86c>
    724e:	60 91 a7 28 	lds	r22, 0x28A7	; 0x8028a7 <EnergySetValue>
    7252:	84 eb       	ldi	r24, 0xB4	; 180
    7254:	90 e0       	ldi	r25, 0x00	; 0
    7256:	0c 94 e1 2f 	jmp	0x5fc2	; 0x5fc2 <main+0xa06>

0000725a <__subsf3>:
__subsf3():
    725a:	50 58       	subi	r21, 0x80	; 128

0000725c <__addsf3>:
    725c:	bb 27       	eor	r27, r27
    725e:	aa 27       	eor	r26, r26
    7260:	0e d0       	rcall	.+28     	; 0x727e <__addsf3x>
    7262:	75 c1       	rjmp	.+746    	; 0x754e <__fp_round>
__addsf3():
    7264:	66 d1       	rcall	.+716    	; 0x7532 <__fp_pscA>
    7266:	30 f0       	brcs	.+12     	; 0x7274 <__addsf3+0x18>
    7268:	6b d1       	rcall	.+726    	; 0x7540 <__fp_pscB>
    726a:	20 f0       	brcs	.+8      	; 0x7274 <__addsf3+0x18>
    726c:	31 f4       	brne	.+12     	; 0x727a <__addsf3+0x1e>
    726e:	9f 3f       	cpi	r25, 0xFF	; 255
    7270:	11 f4       	brne	.+4      	; 0x7276 <__addsf3+0x1a>
    7272:	1e f4       	brtc	.+6      	; 0x727a <__addsf3+0x1e>
    7274:	5b c1       	rjmp	.+694    	; 0x752c <__fp_nan>
    7276:	0e f4       	brtc	.+2      	; 0x727a <__addsf3+0x1e>
    7278:	e0 95       	com	r30
    727a:	e7 fb       	bst	r30, 7
    727c:	51 c1       	rjmp	.+674    	; 0x7520 <__fp_inf>

0000727e <__addsf3x>:
__addsf3x():
    727e:	e9 2f       	mov	r30, r25
    7280:	77 d1       	rcall	.+750    	; 0x7570 <__fp_split3>
    7282:	80 f3       	brcs	.-32     	; 0x7264 <__addsf3+0x8>
    7284:	ba 17       	cp	r27, r26
    7286:	62 07       	cpc	r22, r18
    7288:	73 07       	cpc	r23, r19
    728a:	84 07       	cpc	r24, r20
    728c:	95 07       	cpc	r25, r21
    728e:	18 f0       	brcs	.+6      	; 0x7296 <__addsf3x+0x18>
    7290:	71 f4       	brne	.+28     	; 0x72ae <__addsf3x+0x30>
    7292:	9e f5       	brtc	.+102    	; 0x72fa <__addsf3x+0x7c>
    7294:	8f c1       	rjmp	.+798    	; 0x75b4 <__fp_zero>
    7296:	0e f4       	brtc	.+2      	; 0x729a <__addsf3x+0x1c>
    7298:	e0 95       	com	r30
    729a:	0b 2e       	mov	r0, r27
    729c:	ba 2f       	mov	r27, r26
    729e:	a0 2d       	mov	r26, r0
    72a0:	0b 01       	movw	r0, r22
    72a2:	b9 01       	movw	r22, r18
    72a4:	90 01       	movw	r18, r0
    72a6:	0c 01       	movw	r0, r24
    72a8:	ca 01       	movw	r24, r20
    72aa:	a0 01       	movw	r20, r0
    72ac:	11 24       	eor	r1, r1
    72ae:	ff 27       	eor	r31, r31
    72b0:	59 1b       	sub	r21, r25
    72b2:	99 f0       	breq	.+38     	; 0x72da <__addsf3x+0x5c>
    72b4:	59 3f       	cpi	r21, 0xF9	; 249
    72b6:	50 f4       	brcc	.+20     	; 0x72cc <__addsf3x+0x4e>
    72b8:	50 3e       	cpi	r21, 0xE0	; 224
    72ba:	68 f1       	brcs	.+90     	; 0x7316 <__addsf3x+0x98>
    72bc:	1a 16       	cp	r1, r26
    72be:	f0 40       	sbci	r31, 0x00	; 0
    72c0:	a2 2f       	mov	r26, r18
    72c2:	23 2f       	mov	r18, r19
    72c4:	34 2f       	mov	r19, r20
    72c6:	44 27       	eor	r20, r20
    72c8:	58 5f       	subi	r21, 0xF8	; 248
    72ca:	f3 cf       	rjmp	.-26     	; 0x72b2 <__addsf3x+0x34>
    72cc:	46 95       	lsr	r20
    72ce:	37 95       	ror	r19
    72d0:	27 95       	ror	r18
    72d2:	a7 95       	ror	r26
    72d4:	f0 40       	sbci	r31, 0x00	; 0
    72d6:	53 95       	inc	r21
    72d8:	c9 f7       	brne	.-14     	; 0x72cc <__addsf3x+0x4e>
    72da:	7e f4       	brtc	.+30     	; 0x72fa <__addsf3x+0x7c>
    72dc:	1f 16       	cp	r1, r31
    72de:	ba 0b       	sbc	r27, r26
    72e0:	62 0b       	sbc	r22, r18
    72e2:	73 0b       	sbc	r23, r19
    72e4:	84 0b       	sbc	r24, r20
    72e6:	ba f0       	brmi	.+46     	; 0x7316 <__addsf3x+0x98>
    72e8:	91 50       	subi	r25, 0x01	; 1
    72ea:	a1 f0       	breq	.+40     	; 0x7314 <__addsf3x+0x96>
    72ec:	ff 0f       	add	r31, r31
    72ee:	bb 1f       	adc	r27, r27
    72f0:	66 1f       	adc	r22, r22
    72f2:	77 1f       	adc	r23, r23
    72f4:	88 1f       	adc	r24, r24
    72f6:	c2 f7       	brpl	.-16     	; 0x72e8 <__addsf3x+0x6a>
    72f8:	0e c0       	rjmp	.+28     	; 0x7316 <__addsf3x+0x98>
    72fa:	ba 0f       	add	r27, r26
    72fc:	62 1f       	adc	r22, r18
    72fe:	73 1f       	adc	r23, r19
    7300:	84 1f       	adc	r24, r20
    7302:	48 f4       	brcc	.+18     	; 0x7316 <__addsf3x+0x98>
    7304:	87 95       	ror	r24
    7306:	77 95       	ror	r23
    7308:	67 95       	ror	r22
    730a:	b7 95       	ror	r27
    730c:	f7 95       	ror	r31
    730e:	9e 3f       	cpi	r25, 0xFE	; 254
    7310:	08 f0       	brcs	.+2      	; 0x7314 <__addsf3x+0x96>
    7312:	b3 cf       	rjmp	.-154    	; 0x727a <__addsf3+0x1e>
    7314:	93 95       	inc	r25
    7316:	88 0f       	add	r24, r24
    7318:	08 f0       	brcs	.+2      	; 0x731c <__addsf3x+0x9e>
    731a:	99 27       	eor	r25, r25
    731c:	ee 0f       	add	r30, r30
    731e:	97 95       	ror	r25
    7320:	87 95       	ror	r24
    7322:	08 95       	ret

00007324 <__cmpsf2>:
    7324:	d9 d0       	rcall	.+434    	; 0x74d8 <__fp_cmp>
    7326:	08 f4       	brcc	.+2      	; 0x732a <__cmpsf2+0x6>
    7328:	81 e0       	ldi	r24, 0x01	; 1
    732a:	08 95       	ret

0000732c <__divsf3>:
    732c:	0c d0       	rcall	.+24     	; 0x7346 <__divsf3x>
    732e:	0f c1       	rjmp	.+542    	; 0x754e <__fp_round>
    7330:	07 d1       	rcall	.+526    	; 0x7540 <__fp_pscB>
    7332:	40 f0       	brcs	.+16     	; 0x7344 <__divsf3+0x18>
    7334:	fe d0       	rcall	.+508    	; 0x7532 <__fp_pscA>
    7336:	30 f0       	brcs	.+12     	; 0x7344 <__divsf3+0x18>
    7338:	21 f4       	brne	.+8      	; 0x7342 <__divsf3+0x16>
    733a:	5f 3f       	cpi	r21, 0xFF	; 255
    733c:	19 f0       	breq	.+6      	; 0x7344 <__divsf3+0x18>
    733e:	f0 c0       	rjmp	.+480    	; 0x7520 <__fp_inf>
    7340:	51 11       	cpse	r21, r1
    7342:	39 c1       	rjmp	.+626    	; 0x75b6 <__fp_szero>
    7344:	f3 c0       	rjmp	.+486    	; 0x752c <__fp_nan>

00007346 <__divsf3x>:
    7346:	14 d1       	rcall	.+552    	; 0x7570 <__fp_split3>
    7348:	98 f3       	brcs	.-26     	; 0x7330 <__divsf3+0x4>

0000734a <__divsf3_pse>:
__divsf3_pse():
    734a:	99 23       	and	r25, r25
    734c:	c9 f3       	breq	.-14     	; 0x7340 <__divsf3+0x14>
    734e:	55 23       	and	r21, r21
    7350:	b1 f3       	breq	.-20     	; 0x733e <__divsf3+0x12>
    7352:	95 1b       	sub	r25, r21
    7354:	55 0b       	sbc	r21, r21
    7356:	bb 27       	eor	r27, r27
    7358:	aa 27       	eor	r26, r26
    735a:	62 17       	cp	r22, r18
    735c:	73 07       	cpc	r23, r19
    735e:	84 07       	cpc	r24, r20
    7360:	38 f0       	brcs	.+14     	; 0x7370 <__divsf3_pse+0x26>
    7362:	9f 5f       	subi	r25, 0xFF	; 255
    7364:	5f 4f       	sbci	r21, 0xFF	; 255
    7366:	22 0f       	add	r18, r18
    7368:	33 1f       	adc	r19, r19
    736a:	44 1f       	adc	r20, r20
    736c:	aa 1f       	adc	r26, r26
    736e:	a9 f3       	breq	.-22     	; 0x735a <__divsf3_pse+0x10>
    7370:	33 d0       	rcall	.+102    	; 0x73d8 <__divsf3_pse+0x8e>
    7372:	0e 2e       	mov	r0, r30
    7374:	3a f0       	brmi	.+14     	; 0x7384 <__divsf3_pse+0x3a>
    7376:	e0 e8       	ldi	r30, 0x80	; 128
    7378:	30 d0       	rcall	.+96     	; 0x73da <__divsf3_pse+0x90>
    737a:	91 50       	subi	r25, 0x01	; 1
    737c:	50 40       	sbci	r21, 0x00	; 0
    737e:	e6 95       	lsr	r30
    7380:	00 1c       	adc	r0, r0
    7382:	ca f7       	brpl	.-14     	; 0x7376 <__divsf3_pse+0x2c>
    7384:	29 d0       	rcall	.+82     	; 0x73d8 <__divsf3_pse+0x8e>
    7386:	fe 2f       	mov	r31, r30
    7388:	27 d0       	rcall	.+78     	; 0x73d8 <__divsf3_pse+0x8e>
    738a:	66 0f       	add	r22, r22
    738c:	77 1f       	adc	r23, r23
    738e:	88 1f       	adc	r24, r24
    7390:	bb 1f       	adc	r27, r27
    7392:	26 17       	cp	r18, r22
    7394:	37 07       	cpc	r19, r23
    7396:	48 07       	cpc	r20, r24
    7398:	ab 07       	cpc	r26, r27
    739a:	b0 e8       	ldi	r27, 0x80	; 128
    739c:	09 f0       	breq	.+2      	; 0x73a0 <__divsf3_pse+0x56>
    739e:	bb 0b       	sbc	r27, r27
    73a0:	80 2d       	mov	r24, r0
    73a2:	bf 01       	movw	r22, r30
    73a4:	ff 27       	eor	r31, r31
    73a6:	93 58       	subi	r25, 0x83	; 131
    73a8:	5f 4f       	sbci	r21, 0xFF	; 255
    73aa:	2a f0       	brmi	.+10     	; 0x73b6 <__divsf3_pse+0x6c>
    73ac:	9e 3f       	cpi	r25, 0xFE	; 254
    73ae:	51 05       	cpc	r21, r1
    73b0:	68 f0       	brcs	.+26     	; 0x73cc <__divsf3_pse+0x82>
    73b2:	b6 c0       	rjmp	.+364    	; 0x7520 <__fp_inf>
    73b4:	00 c1       	rjmp	.+512    	; 0x75b6 <__fp_szero>
    73b6:	5f 3f       	cpi	r21, 0xFF	; 255
    73b8:	ec f3       	brlt	.-6      	; 0x73b4 <__divsf3_pse+0x6a>
    73ba:	98 3e       	cpi	r25, 0xE8	; 232
    73bc:	dc f3       	brlt	.-10     	; 0x73b4 <__divsf3_pse+0x6a>
    73be:	86 95       	lsr	r24
    73c0:	77 95       	ror	r23
    73c2:	67 95       	ror	r22
    73c4:	b7 95       	ror	r27
    73c6:	f7 95       	ror	r31
    73c8:	9f 5f       	subi	r25, 0xFF	; 255
    73ca:	c9 f7       	brne	.-14     	; 0x73be <__divsf3_pse+0x74>
    73cc:	88 0f       	add	r24, r24
    73ce:	91 1d       	adc	r25, r1
    73d0:	96 95       	lsr	r25
    73d2:	87 95       	ror	r24
    73d4:	97 f9       	bld	r25, 7
    73d6:	08 95       	ret
    73d8:	e1 e0       	ldi	r30, 0x01	; 1
    73da:	66 0f       	add	r22, r22
    73dc:	77 1f       	adc	r23, r23
    73de:	88 1f       	adc	r24, r24
    73e0:	bb 1f       	adc	r27, r27
    73e2:	62 17       	cp	r22, r18
    73e4:	73 07       	cpc	r23, r19
    73e6:	84 07       	cpc	r24, r20
    73e8:	ba 07       	cpc	r27, r26
    73ea:	20 f0       	brcs	.+8      	; 0x73f4 <__divsf3_pse+0xaa>
    73ec:	62 1b       	sub	r22, r18
    73ee:	73 0b       	sbc	r23, r19
    73f0:	84 0b       	sbc	r24, r20
    73f2:	ba 0b       	sbc	r27, r26
    73f4:	ee 1f       	adc	r30, r30
    73f6:	88 f7       	brcc	.-30     	; 0x73da <__divsf3_pse+0x90>
    73f8:	e0 95       	com	r30
    73fa:	08 95       	ret

000073fc <__fixsfsi>:
__fixsfsi():
    73fc:	04 d0       	rcall	.+8      	; 0x7406 <__fixunssfsi>
    73fe:	68 94       	set
    7400:	b1 11       	cpse	r27, r1
    7402:	d9 c0       	rjmp	.+434    	; 0x75b6 <__fp_szero>
    7404:	08 95       	ret

00007406 <__fixunssfsi>:
__fixunssfsi():
    7406:	bc d0       	rcall	.+376    	; 0x7580 <__fp_splitA>
    7408:	88 f0       	brcs	.+34     	; 0x742c <__fixunssfsi+0x26>
    740a:	9f 57       	subi	r25, 0x7F	; 127
    740c:	90 f0       	brcs	.+36     	; 0x7432 <__fixunssfsi+0x2c>
    740e:	b9 2f       	mov	r27, r25
    7410:	99 27       	eor	r25, r25
    7412:	b7 51       	subi	r27, 0x17	; 23
    7414:	a0 f0       	brcs	.+40     	; 0x743e <__fixunssfsi+0x38>
    7416:	d1 f0       	breq	.+52     	; 0x744c <__fixunssfsi+0x46>
    7418:	66 0f       	add	r22, r22
    741a:	77 1f       	adc	r23, r23
    741c:	88 1f       	adc	r24, r24
    741e:	99 1f       	adc	r25, r25
    7420:	1a f0       	brmi	.+6      	; 0x7428 <__fixunssfsi+0x22>
    7422:	ba 95       	dec	r27
    7424:	c9 f7       	brne	.-14     	; 0x7418 <__fixunssfsi+0x12>
    7426:	12 c0       	rjmp	.+36     	; 0x744c <__fixunssfsi+0x46>
    7428:	b1 30       	cpi	r27, 0x01	; 1
    742a:	81 f0       	breq	.+32     	; 0x744c <__fixunssfsi+0x46>
    742c:	c3 d0       	rcall	.+390    	; 0x75b4 <__fp_zero>
    742e:	b1 e0       	ldi	r27, 0x01	; 1
    7430:	08 95       	ret
    7432:	c0 c0       	rjmp	.+384    	; 0x75b4 <__fp_zero>
    7434:	67 2f       	mov	r22, r23
    7436:	78 2f       	mov	r23, r24
    7438:	88 27       	eor	r24, r24
    743a:	b8 5f       	subi	r27, 0xF8	; 248
    743c:	39 f0       	breq	.+14     	; 0x744c <__fixunssfsi+0x46>
    743e:	b9 3f       	cpi	r27, 0xF9	; 249
    7440:	cc f3       	brlt	.-14     	; 0x7434 <__fixunssfsi+0x2e>
    7442:	86 95       	lsr	r24
    7444:	77 95       	ror	r23
    7446:	67 95       	ror	r22
    7448:	b3 95       	inc	r27
    744a:	d9 f7       	brne	.-10     	; 0x7442 <__fixunssfsi+0x3c>
    744c:	3e f4       	brtc	.+14     	; 0x745c <__fixunssfsi+0x56>
    744e:	90 95       	com	r25
    7450:	80 95       	com	r24
    7452:	70 95       	com	r23
    7454:	61 95       	neg	r22
    7456:	7f 4f       	sbci	r23, 0xFF	; 255
    7458:	8f 4f       	sbci	r24, 0xFF	; 255
    745a:	9f 4f       	sbci	r25, 0xFF	; 255
    745c:	08 95       	ret

0000745e <__floatunsisf>:
__floatunsisf():
    745e:	e8 94       	clt
    7460:	09 c0       	rjmp	.+18     	; 0x7474 <__floatsisf+0x12>

00007462 <__floatsisf>:
    7462:	97 fb       	bst	r25, 7
    7464:	3e f4       	brtc	.+14     	; 0x7474 <__floatsisf+0x12>
    7466:	90 95       	com	r25
    7468:	80 95       	com	r24
    746a:	70 95       	com	r23
    746c:	61 95       	neg	r22
    746e:	7f 4f       	sbci	r23, 0xFF	; 255
    7470:	8f 4f       	sbci	r24, 0xFF	; 255
    7472:	9f 4f       	sbci	r25, 0xFF	; 255
    7474:	99 23       	and	r25, r25
    7476:	a9 f0       	breq	.+42     	; 0x74a2 <__floatsisf+0x40>
    7478:	f9 2f       	mov	r31, r25
    747a:	96 e9       	ldi	r25, 0x96	; 150
    747c:	bb 27       	eor	r27, r27
    747e:	93 95       	inc	r25
    7480:	f6 95       	lsr	r31
    7482:	87 95       	ror	r24
    7484:	77 95       	ror	r23
    7486:	67 95       	ror	r22
    7488:	b7 95       	ror	r27
    748a:	f1 11       	cpse	r31, r1
    748c:	f8 cf       	rjmp	.-16     	; 0x747e <__floatsisf+0x1c>
    748e:	fa f4       	brpl	.+62     	; 0x74ce <__floatsisf+0x6c>
    7490:	bb 0f       	add	r27, r27
    7492:	11 f4       	brne	.+4      	; 0x7498 <__floatsisf+0x36>
    7494:	60 ff       	sbrs	r22, 0
    7496:	1b c0       	rjmp	.+54     	; 0x74ce <__floatsisf+0x6c>
    7498:	6f 5f       	subi	r22, 0xFF	; 255
    749a:	7f 4f       	sbci	r23, 0xFF	; 255
    749c:	8f 4f       	sbci	r24, 0xFF	; 255
    749e:	9f 4f       	sbci	r25, 0xFF	; 255
    74a0:	16 c0       	rjmp	.+44     	; 0x74ce <__floatsisf+0x6c>
    74a2:	88 23       	and	r24, r24
    74a4:	11 f0       	breq	.+4      	; 0x74aa <__floatsisf+0x48>
    74a6:	96 e9       	ldi	r25, 0x96	; 150
    74a8:	11 c0       	rjmp	.+34     	; 0x74cc <__floatsisf+0x6a>
    74aa:	77 23       	and	r23, r23
    74ac:	21 f0       	breq	.+8      	; 0x74b6 <__floatsisf+0x54>
    74ae:	9e e8       	ldi	r25, 0x8E	; 142
    74b0:	87 2f       	mov	r24, r23
    74b2:	76 2f       	mov	r23, r22
    74b4:	05 c0       	rjmp	.+10     	; 0x74c0 <__floatsisf+0x5e>
    74b6:	66 23       	and	r22, r22
    74b8:	71 f0       	breq	.+28     	; 0x74d6 <__floatsisf+0x74>
    74ba:	96 e8       	ldi	r25, 0x86	; 134
    74bc:	86 2f       	mov	r24, r22
    74be:	70 e0       	ldi	r23, 0x00	; 0
    74c0:	60 e0       	ldi	r22, 0x00	; 0
    74c2:	2a f0       	brmi	.+10     	; 0x74ce <__floatsisf+0x6c>
    74c4:	9a 95       	dec	r25
    74c6:	66 0f       	add	r22, r22
    74c8:	77 1f       	adc	r23, r23
    74ca:	88 1f       	adc	r24, r24
    74cc:	da f7       	brpl	.-10     	; 0x74c4 <__floatsisf+0x62>
    74ce:	88 0f       	add	r24, r24
    74d0:	96 95       	lsr	r25
    74d2:	87 95       	ror	r24
    74d4:	97 f9       	bld	r25, 7
    74d6:	08 95       	ret

000074d8 <__fp_cmp>:
__fp_cmp():
    74d8:	99 0f       	add	r25, r25
    74da:	00 08       	sbc	r0, r0
    74dc:	55 0f       	add	r21, r21
    74de:	aa 0b       	sbc	r26, r26
    74e0:	e0 e8       	ldi	r30, 0x80	; 128
    74e2:	fe ef       	ldi	r31, 0xFE	; 254
    74e4:	16 16       	cp	r1, r22
    74e6:	17 06       	cpc	r1, r23
    74e8:	e8 07       	cpc	r30, r24
    74ea:	f9 07       	cpc	r31, r25
    74ec:	c0 f0       	brcs	.+48     	; 0x751e <__fp_cmp+0x46>
    74ee:	12 16       	cp	r1, r18
    74f0:	13 06       	cpc	r1, r19
    74f2:	e4 07       	cpc	r30, r20
    74f4:	f5 07       	cpc	r31, r21
    74f6:	98 f0       	brcs	.+38     	; 0x751e <__fp_cmp+0x46>
    74f8:	62 1b       	sub	r22, r18
    74fa:	73 0b       	sbc	r23, r19
    74fc:	84 0b       	sbc	r24, r20
    74fe:	95 0b       	sbc	r25, r21
    7500:	39 f4       	brne	.+14     	; 0x7510 <__fp_cmp+0x38>
    7502:	0a 26       	eor	r0, r26
    7504:	61 f0       	breq	.+24     	; 0x751e <__fp_cmp+0x46>
    7506:	23 2b       	or	r18, r19
    7508:	24 2b       	or	r18, r20
    750a:	25 2b       	or	r18, r21
    750c:	21 f4       	brne	.+8      	; 0x7516 <__fp_cmp+0x3e>
    750e:	08 95       	ret
    7510:	0a 26       	eor	r0, r26
    7512:	09 f4       	brne	.+2      	; 0x7516 <__fp_cmp+0x3e>
    7514:	a1 40       	sbci	r26, 0x01	; 1
    7516:	a6 95       	lsr	r26
    7518:	8f ef       	ldi	r24, 0xFF	; 255
    751a:	81 1d       	adc	r24, r1
    751c:	81 1d       	adc	r24, r1
    751e:	08 95       	ret

00007520 <__fp_inf>:
__fp_inf():
    7520:	97 f9       	bld	r25, 7
    7522:	9f 67       	ori	r25, 0x7F	; 127
    7524:	80 e8       	ldi	r24, 0x80	; 128
    7526:	70 e0       	ldi	r23, 0x00	; 0
    7528:	60 e0       	ldi	r22, 0x00	; 0
    752a:	08 95       	ret

0000752c <__fp_nan>:
__fp_nan():
    752c:	9f ef       	ldi	r25, 0xFF	; 255
    752e:	80 ec       	ldi	r24, 0xC0	; 192
    7530:	08 95       	ret

00007532 <__fp_pscA>:
__fp_pscA():
    7532:	00 24       	eor	r0, r0
    7534:	0a 94       	dec	r0
    7536:	16 16       	cp	r1, r22
    7538:	17 06       	cpc	r1, r23
    753a:	18 06       	cpc	r1, r24
    753c:	09 06       	cpc	r0, r25
    753e:	08 95       	ret

00007540 <__fp_pscB>:
__fp_pscB():
    7540:	00 24       	eor	r0, r0
    7542:	0a 94       	dec	r0
    7544:	12 16       	cp	r1, r18
    7546:	13 06       	cpc	r1, r19
    7548:	14 06       	cpc	r1, r20
    754a:	05 06       	cpc	r0, r21
    754c:	08 95       	ret

0000754e <__fp_round>:
__fp_round():
    754e:	09 2e       	mov	r0, r25
    7550:	03 94       	inc	r0
    7552:	00 0c       	add	r0, r0
    7554:	11 f4       	brne	.+4      	; 0x755a <__fp_round+0xc>
    7556:	88 23       	and	r24, r24
    7558:	52 f0       	brmi	.+20     	; 0x756e <__fp_round+0x20>
    755a:	bb 0f       	add	r27, r27
    755c:	40 f4       	brcc	.+16     	; 0x756e <__fp_round+0x20>
    755e:	bf 2b       	or	r27, r31
    7560:	11 f4       	brne	.+4      	; 0x7566 <__fp_round+0x18>
    7562:	60 ff       	sbrs	r22, 0
    7564:	04 c0       	rjmp	.+8      	; 0x756e <__fp_round+0x20>
    7566:	6f 5f       	subi	r22, 0xFF	; 255
    7568:	7f 4f       	sbci	r23, 0xFF	; 255
    756a:	8f 4f       	sbci	r24, 0xFF	; 255
    756c:	9f 4f       	sbci	r25, 0xFF	; 255
    756e:	08 95       	ret

00007570 <__fp_split3>:
__fp_split3():
    7570:	57 fd       	sbrc	r21, 7
    7572:	90 58       	subi	r25, 0x80	; 128
    7574:	44 0f       	add	r20, r20
    7576:	55 1f       	adc	r21, r21
    7578:	59 f0       	breq	.+22     	; 0x7590 <__fp_splitA+0x10>
    757a:	5f 3f       	cpi	r21, 0xFF	; 255
    757c:	71 f0       	breq	.+28     	; 0x759a <__fp_splitA+0x1a>
    757e:	47 95       	ror	r20

00007580 <__fp_splitA>:
    7580:	88 0f       	add	r24, r24
    7582:	97 fb       	bst	r25, 7
    7584:	99 1f       	adc	r25, r25
    7586:	61 f0       	breq	.+24     	; 0x75a0 <__fp_splitA+0x20>
    7588:	9f 3f       	cpi	r25, 0xFF	; 255
    758a:	79 f0       	breq	.+30     	; 0x75aa <__fp_splitA+0x2a>
    758c:	87 95       	ror	r24
    758e:	08 95       	ret
    7590:	12 16       	cp	r1, r18
    7592:	13 06       	cpc	r1, r19
    7594:	14 06       	cpc	r1, r20
    7596:	55 1f       	adc	r21, r21
    7598:	f2 cf       	rjmp	.-28     	; 0x757e <__fp_split3+0xe>
    759a:	46 95       	lsr	r20
    759c:	f1 df       	rcall	.-30     	; 0x7580 <__fp_splitA>
    759e:	08 c0       	rjmp	.+16     	; 0x75b0 <__fp_splitA+0x30>
    75a0:	16 16       	cp	r1, r22
    75a2:	17 06       	cpc	r1, r23
    75a4:	18 06       	cpc	r1, r24
    75a6:	99 1f       	adc	r25, r25
    75a8:	f1 cf       	rjmp	.-30     	; 0x758c <__fp_splitA+0xc>
    75aa:	86 95       	lsr	r24
    75ac:	71 05       	cpc	r23, r1
    75ae:	61 05       	cpc	r22, r1
    75b0:	08 94       	sec
    75b2:	08 95       	ret

000075b4 <__fp_zero>:
__fp_zero():
    75b4:	e8 94       	clt

000075b6 <__fp_szero>:
    75b6:	bb 27       	eor	r27, r27
    75b8:	66 27       	eor	r22, r22
    75ba:	77 27       	eor	r23, r23
    75bc:	cb 01       	movw	r24, r22
    75be:	97 f9       	bld	r25, 7
    75c0:	08 95       	ret

000075c2 <__gesf2>:
__gesf2():
    75c2:	8a df       	rcall	.-236    	; 0x74d8 <__fp_cmp>
    75c4:	08 f4       	brcc	.+2      	; 0x75c8 <__gesf2+0x6>
    75c6:	8f ef       	ldi	r24, 0xFF	; 255
    75c8:	08 95       	ret

000075ca <__mulsf3>:
__mulsf3():
    75ca:	0b d0       	rcall	.+22     	; 0x75e2 <__mulsf3x>
    75cc:	c0 cf       	rjmp	.-128    	; 0x754e <__fp_round>
    75ce:	b1 df       	rcall	.-158    	; 0x7532 <__fp_pscA>
    75d0:	28 f0       	brcs	.+10     	; 0x75dc <__mulsf3+0x12>
    75d2:	b6 df       	rcall	.-148    	; 0x7540 <__fp_pscB>
    75d4:	18 f0       	brcs	.+6      	; 0x75dc <__mulsf3+0x12>
    75d6:	95 23       	and	r25, r21
    75d8:	09 f0       	breq	.+2      	; 0x75dc <__mulsf3+0x12>
    75da:	a2 cf       	rjmp	.-188    	; 0x7520 <__fp_inf>
    75dc:	a7 cf       	rjmp	.-178    	; 0x752c <__fp_nan>
    75de:	11 24       	eor	r1, r1
    75e0:	ea cf       	rjmp	.-44     	; 0x75b6 <__fp_szero>

000075e2 <__mulsf3x>:
__mulsf3x():
    75e2:	c6 df       	rcall	.-116    	; 0x7570 <__fp_split3>
    75e4:	a0 f3       	brcs	.-24     	; 0x75ce <__mulsf3+0x4>

000075e6 <__mulsf3_pse>:
    75e6:	95 9f       	mul	r25, r21
    75e8:	d1 f3       	breq	.-12     	; 0x75de <__mulsf3+0x14>
    75ea:	95 0f       	add	r25, r21
    75ec:	50 e0       	ldi	r21, 0x00	; 0
    75ee:	55 1f       	adc	r21, r21
    75f0:	62 9f       	mul	r22, r18
    75f2:	f0 01       	movw	r30, r0
    75f4:	72 9f       	mul	r23, r18
    75f6:	bb 27       	eor	r27, r27
    75f8:	f0 0d       	add	r31, r0
    75fa:	b1 1d       	adc	r27, r1
    75fc:	63 9f       	mul	r22, r19
    75fe:	aa 27       	eor	r26, r26
    7600:	f0 0d       	add	r31, r0
    7602:	b1 1d       	adc	r27, r1
    7604:	aa 1f       	adc	r26, r26
    7606:	64 9f       	mul	r22, r20
    7608:	66 27       	eor	r22, r22
    760a:	b0 0d       	add	r27, r0
    760c:	a1 1d       	adc	r26, r1
    760e:	66 1f       	adc	r22, r22
    7610:	82 9f       	mul	r24, r18
    7612:	22 27       	eor	r18, r18
    7614:	b0 0d       	add	r27, r0
    7616:	a1 1d       	adc	r26, r1
    7618:	62 1f       	adc	r22, r18
    761a:	73 9f       	mul	r23, r19
    761c:	b0 0d       	add	r27, r0
    761e:	a1 1d       	adc	r26, r1
    7620:	62 1f       	adc	r22, r18
    7622:	83 9f       	mul	r24, r19
    7624:	a0 0d       	add	r26, r0
    7626:	61 1d       	adc	r22, r1
    7628:	22 1f       	adc	r18, r18
    762a:	74 9f       	mul	r23, r20
    762c:	33 27       	eor	r19, r19
    762e:	a0 0d       	add	r26, r0
    7630:	61 1d       	adc	r22, r1
    7632:	23 1f       	adc	r18, r19
    7634:	84 9f       	mul	r24, r20
    7636:	60 0d       	add	r22, r0
    7638:	21 1d       	adc	r18, r1
    763a:	82 2f       	mov	r24, r18
    763c:	76 2f       	mov	r23, r22
    763e:	6a 2f       	mov	r22, r26
    7640:	11 24       	eor	r1, r1
    7642:	9f 57       	subi	r25, 0x7F	; 127
    7644:	50 40       	sbci	r21, 0x00	; 0
    7646:	8a f0       	brmi	.+34     	; 0x766a <__mulsf3_pse+0x84>
    7648:	e1 f0       	breq	.+56     	; 0x7682 <__mulsf3_pse+0x9c>
    764a:	88 23       	and	r24, r24
    764c:	4a f0       	brmi	.+18     	; 0x7660 <__mulsf3_pse+0x7a>
    764e:	ee 0f       	add	r30, r30
    7650:	ff 1f       	adc	r31, r31
    7652:	bb 1f       	adc	r27, r27
    7654:	66 1f       	adc	r22, r22
    7656:	77 1f       	adc	r23, r23
    7658:	88 1f       	adc	r24, r24
    765a:	91 50       	subi	r25, 0x01	; 1
    765c:	50 40       	sbci	r21, 0x00	; 0
    765e:	a9 f7       	brne	.-22     	; 0x764a <__mulsf3_pse+0x64>
    7660:	9e 3f       	cpi	r25, 0xFE	; 254
    7662:	51 05       	cpc	r21, r1
    7664:	70 f0       	brcs	.+28     	; 0x7682 <__mulsf3_pse+0x9c>
    7666:	5c cf       	rjmp	.-328    	; 0x7520 <__fp_inf>
    7668:	a6 cf       	rjmp	.-180    	; 0x75b6 <__fp_szero>
    766a:	5f 3f       	cpi	r21, 0xFF	; 255
    766c:	ec f3       	brlt	.-6      	; 0x7668 <__mulsf3_pse+0x82>
    766e:	98 3e       	cpi	r25, 0xE8	; 232
    7670:	dc f3       	brlt	.-10     	; 0x7668 <__mulsf3_pse+0x82>
    7672:	86 95       	lsr	r24
    7674:	77 95       	ror	r23
    7676:	67 95       	ror	r22
    7678:	b7 95       	ror	r27
    767a:	f7 95       	ror	r31
    767c:	e7 95       	ror	r30
    767e:	9f 5f       	subi	r25, 0xFF	; 255
    7680:	c1 f7       	brne	.-16     	; 0x7672 <__mulsf3_pse+0x8c>
    7682:	fe 2b       	or	r31, r30
    7684:	88 0f       	add	r24, r24
    7686:	91 1d       	adc	r25, r1
    7688:	96 95       	lsr	r25
    768a:	87 95       	ror	r24
    768c:	97 f9       	bld	r25, 7
    768e:	08 95       	ret

00007690 <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    7690:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    7692:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    7694:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    7696:	07 c0       	rjmp	.+14     	; 0x76a6 <__udivmodhi4_ep>

00007698 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    7698:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    769a:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    769c:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    769e:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    76a0:	10 f0       	brcs	.+4      	; 0x76a6 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    76a2:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    76a4:	b7 0b       	sbc	r27, r23

000076a6 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    76a6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    76a8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    76aa:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    76ac:	a9 f7       	brne	.-22     	; 0x7698 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    76ae:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    76b0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    76b2:	bc 01       	movw	r22, r24
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    76b4:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    76b6:	08 95       	ret

000076b8 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    76b8:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    76ba:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    76bc:	16 f4       	brtc	.+4      	; 0x76c2 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    76be:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    76c0:	06 d0       	rcall	.+12     	; 0x76ce <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    76c2:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    76c4:	08 d0       	rcall	.+16     	; 0x76d6 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    76c6:	e4 df       	rcall	.-56     	; 0x7690 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    76c8:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    76ca:	05 d0       	rcall	.+10     	; 0x76d6 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    76cc:	3e f4       	brtc	.+14     	; 0x76dc <__divmodhi4_exit>

000076ce <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    76ce:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    76d0:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    76d2:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    76d4:	08 95       	ret

000076d6 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    76d6:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    76d8:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    76da:	7f 4f       	sbci	r23, 0xFF	; 255

000076dc <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    76dc:	08 95       	ret

000076de <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    76de:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    76e0:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    76e2:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    76e4:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    76e6:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    76e8:	0d c0       	rjmp	.+26     	; 0x7704 <__udivmodsi4_ep>

000076ea <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    76ea:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    76ec:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    76ee:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    76f0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    76f2:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    76f4:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    76f6:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    76f8:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    76fa:	20 f0       	brcs	.+8      	; 0x7704 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    76fc:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    76fe:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    7700:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    7702:	f5 0b       	sbc	r31, r21

00007704 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    7704:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    7706:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    7708:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    770a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    770c:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    770e:	69 f7       	brne	.-38     	; 0x76ea <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    7710:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    7712:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    7714:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    7716:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    7718:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    771a:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    771c:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    771e:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    7720:	08 95       	ret

00007722 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    7722:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    7724:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    7726:	16 f4       	brtc	.+4      	; 0x772c <__divmodsi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    7728:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    772a:	0f d0       	rcall	.+30     	; 0x774a <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    772c:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    772e:	05 d0       	rcall	.+10     	; 0x773a <__divmodsi4_neg2>
    7730:	d6 df       	rcall	.-84     	; 0x76de <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    7732:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    7734:	02 d0       	rcall	.+4      	; 0x773a <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    7736:	46 f4       	brtc	.+16     	; 0x7748 <__divmodsi4_exit>
    7738:	08 c0       	rjmp	.+16     	; 0x774a <__negsi2>

0000773a <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    773a:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    773c:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    773e:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    7740:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    7742:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    7744:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    7746:	5f 4f       	sbci	r21, 0xFF	; 255

00007748 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    7748:	08 95       	ret

0000774a <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    774a:	90 95       	com	r25
    774c:	80 95       	com	r24
    774e:	70 95       	com	r23
    7750:	61 95       	neg	r22
    7752:	7f 4f       	sbci	r23, 0xFF	; 255
    7754:	8f 4f       	sbci	r24, 0xFF	; 255
    7756:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    7758:	08 95       	ret

0000775a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    775a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    775c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    775e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    7760:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    7762:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    7764:	09 94       	ijmp

00007766 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    7766:	15 d0       	rcall	.+42     	; 0x7792 <__umulhisi3>

00007768 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    7768:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    776a:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    776c:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    776e:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    7770:	08 95       	ret

00007772 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    7772:	0f d0       	rcall	.+30     	; 0x7792 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    7774:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    7776:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    7778:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    777a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    777c:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    777e:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    7780:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    7782:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    7784:	08 95       	ret

00007786 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    7786:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    7788:	f4 cf       	rjmp	.-24     	; 0x7772 <__muluhisi3>

0000778a <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    778a:	f3 df       	rcall	.-26     	; 0x7772 <__muluhisi3>
    778c:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    778e:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    7790:	08 95       	ret

00007792 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    7792:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    7794:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    7796:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    7798:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    779a:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    779c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    779e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    77a0:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    77a2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    77a4:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    77a6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    77a8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    77aa:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    77ac:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    77ae:	08 95       	ret

000077b0 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    77b0:	f8 94       	cli

000077b2 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    77b2:	ff cf       	rjmp	.-2      	; 0x77b2 <__stop_program>
